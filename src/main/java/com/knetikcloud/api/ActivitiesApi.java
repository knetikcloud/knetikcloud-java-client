/*
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.knetikcloud.api;

import com.knetikcloud.ApiCallback;
import com.knetikcloud.ApiClient;
import com.knetikcloud.ApiException;
import com.knetikcloud.ApiResponse;
import com.knetikcloud.Configuration;
import com.knetikcloud.Pair;
import com.knetikcloud.ProgressRequestBody;
import com.knetikcloud.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ActivityOccurrenceCreationFailure;
import io.swagger.client.model.ActivityOccurrenceResource;
import io.swagger.client.model.ActivityOccurrenceResults;
import io.swagger.client.model.ActivityResource;
import io.swagger.client.model.PageResourceBareActivityResource;
import io.swagger.client.model.Result;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ActivitiesApi {
    private ApiClient apiClient;

    public ActivitiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ActivitiesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createActivity */
    private com.squareup.okhttp.Call createActivityCall(ActivityResource activityResource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = activityResource;
        
        // create path and map variables
        String localVarPath = "/activities".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createActivityValidateBeforeCall(ActivityResource activityResource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = createActivityCall(activityResource, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create an activity
     * 
     * @param activityResource The activity resource object (optional)
     * @return ActivityResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ActivityResource createActivity(ActivityResource activityResource) throws ApiException {
        ApiResponse<ActivityResource> resp = createActivityWithHttpInfo(activityResource);
        return resp.getData();
    }

    /**
     * Create an activity
     * 
     * @param activityResource The activity resource object (optional)
     * @return ApiResponse&lt;ActivityResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ActivityResource> createActivityWithHttpInfo(ActivityResource activityResource) throws ApiException {
        com.squareup.okhttp.Call call = createActivityValidateBeforeCall(activityResource, null, null);
        Type localVarReturnType = new TypeToken<ActivityResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an activity (asynchronously)
     * 
     * @param activityResource The activity resource object (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createActivityAsync(ActivityResource activityResource, final ApiCallback<ActivityResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createActivityValidateBeforeCall(activityResource, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ActivityResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createActivityOccurrence */
    private com.squareup.okhttp.Call createActivityOccurrenceCall(Boolean test, ActivityOccurrenceResource activityOccurrenceResource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = activityOccurrenceResource;
        
        // create path and map variables
        String localVarPath = "/activity-occurrences".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (test != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "test", test));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createActivityOccurrenceValidateBeforeCall(Boolean test, ActivityOccurrenceResource activityOccurrenceResource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = createActivityOccurrenceCall(test, activityOccurrenceResource, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new activity occurrence
     * Has to enforce extra rules if not used as an admin
     * @param test if true, indicates that the occurrence should NOT be created. This can be used to test for eligibility and valid settings (optional, default to false)
     * @param activityOccurrenceResource The activity occurrence object (optional)
     * @return ActivityOccurrenceResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ActivityOccurrenceResource createActivityOccurrence(Boolean test, ActivityOccurrenceResource activityOccurrenceResource) throws ApiException {
        ApiResponse<ActivityOccurrenceResource> resp = createActivityOccurrenceWithHttpInfo(test, activityOccurrenceResource);
        return resp.getData();
    }

    /**
     * Create a new activity occurrence
     * Has to enforce extra rules if not used as an admin
     * @param test if true, indicates that the occurrence should NOT be created. This can be used to test for eligibility and valid settings (optional, default to false)
     * @param activityOccurrenceResource The activity occurrence object (optional)
     * @return ApiResponse&lt;ActivityOccurrenceResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ActivityOccurrenceResource> createActivityOccurrenceWithHttpInfo(Boolean test, ActivityOccurrenceResource activityOccurrenceResource) throws ApiException {
        com.squareup.okhttp.Call call = createActivityOccurrenceValidateBeforeCall(test, activityOccurrenceResource, null, null);
        Type localVarReturnType = new TypeToken<ActivityOccurrenceResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new activity occurrence (asynchronously)
     * Has to enforce extra rules if not used as an admin
     * @param test if true, indicates that the occurrence should NOT be created. This can be used to test for eligibility and valid settings (optional, default to false)
     * @param activityOccurrenceResource The activity occurrence object (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createActivityOccurrenceAsync(Boolean test, ActivityOccurrenceResource activityOccurrenceResource, final ApiCallback<ActivityOccurrenceResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createActivityOccurrenceValidateBeforeCall(test, activityOccurrenceResource, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ActivityOccurrenceResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteActivity */
    private com.squareup.okhttp.Call deleteActivityCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/activities/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteActivityValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteActivity(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteActivityCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an activity
     * 
     * @param id The id of the activity (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteActivity(Long id) throws ApiException {
        deleteActivityWithHttpInfo(id);
    }

    /**
     * Delete an activity
     * 
     * @param id The id of the activity (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteActivityWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = deleteActivityValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an activity (asynchronously)
     * 
     * @param id The id of the activity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteActivityAsync(Long id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteActivityValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getActivities */
    private com.squareup.okhttp.Call getActivitiesCall(Boolean filterTemplate, String filterName, String filterId, Integer size, Integer page, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/activities".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (filterTemplate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_template", filterTemplate));
        if (filterName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_name", filterName));
        if (filterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_id", filterId));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getActivitiesValidateBeforeCall(Boolean filterTemplate, String filterName, String filterId, Integer size, Integer page, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getActivitiesCall(filterTemplate, filterName, filterId, size, page, order, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List activity definitions
     * 
     * @param filterTemplate Filter for activities that are templates, or specifically not if false (optional)
     * @param filterName Filter for activities that have a name starting with specified string (optional)
     * @param filterId Filter for activities with an id in the given comma separated list of ids (optional)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @return PageResourceBareActivityResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageResourceBareActivityResource getActivities(Boolean filterTemplate, String filterName, String filterId, Integer size, Integer page, String order) throws ApiException {
        ApiResponse<PageResourceBareActivityResource> resp = getActivitiesWithHttpInfo(filterTemplate, filterName, filterId, size, page, order);
        return resp.getData();
    }

    /**
     * List activity definitions
     * 
     * @param filterTemplate Filter for activities that are templates, or specifically not if false (optional)
     * @param filterName Filter for activities that have a name starting with specified string (optional)
     * @param filterId Filter for activities with an id in the given comma separated list of ids (optional)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @return ApiResponse&lt;PageResourceBareActivityResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageResourceBareActivityResource> getActivitiesWithHttpInfo(Boolean filterTemplate, String filterName, String filterId, Integer size, Integer page, String order) throws ApiException {
        com.squareup.okhttp.Call call = getActivitiesValidateBeforeCall(filterTemplate, filterName, filterId, size, page, order, null, null);
        Type localVarReturnType = new TypeToken<PageResourceBareActivityResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List activity definitions (asynchronously)
     * 
     * @param filterTemplate Filter for activities that are templates, or specifically not if false (optional)
     * @param filterName Filter for activities that have a name starting with specified string (optional)
     * @param filterId Filter for activities with an id in the given comma separated list of ids (optional)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getActivitiesAsync(Boolean filterTemplate, String filterName, String filterId, Integer size, Integer page, String order, final ApiCallback<PageResourceBareActivityResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getActivitiesValidateBeforeCall(filterTemplate, filterName, filterId, size, page, order, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageResourceBareActivityResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getActivity */
    private com.squareup.okhttp.Call getActivityCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/activities/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getActivityValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getActivity(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getActivityCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a single activity
     * 
     * @param id The id of the activity (required)
     * @return ActivityResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ActivityResource getActivity(Long id) throws ApiException {
        ApiResponse<ActivityResource> resp = getActivityWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get a single activity
     * 
     * @param id The id of the activity (required)
     * @return ApiResponse&lt;ActivityResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ActivityResource> getActivityWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = getActivityValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<ActivityResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a single activity (asynchronously)
     * 
     * @param id The id of the activity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getActivityAsync(Long id, final ApiCallback<ActivityResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getActivityValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ActivityResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for setActivityOccurrenceResults */
    private com.squareup.okhttp.Call setActivityOccurrenceResultsCall(Long activityOccurrenceId, ActivityOccurrenceResults activityOccurrenceResults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = activityOccurrenceResults;
        
        // create path and map variables
        String localVarPath = "/activity-occurrences/{activity_occurrence_id}/results".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "activity_occurrence_id" + "\\}", apiClient.escapeString(activityOccurrenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setActivityOccurrenceResultsValidateBeforeCall(Long activityOccurrenceId, ActivityOccurrenceResults activityOccurrenceResults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'activityOccurrenceId' is set
        if (activityOccurrenceId == null) {
            throw new ApiException("Missing the required parameter 'activityOccurrenceId' when calling setActivityOccurrenceResults(Async)");
        }
        
        
        com.squareup.okhttp.Call call = setActivityOccurrenceResultsCall(activityOccurrenceId, activityOccurrenceResults, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Sets the status of an activity occurrence to FINISHED and logs metrics
     * 
     * @param activityOccurrenceId The id of the activity occurrence (required)
     * @param activityOccurrenceResults The activity occurrence object (optional)
     * @return ActivityOccurrenceResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ActivityOccurrenceResults setActivityOccurrenceResults(Long activityOccurrenceId, ActivityOccurrenceResults activityOccurrenceResults) throws ApiException {
        ApiResponse<ActivityOccurrenceResults> resp = setActivityOccurrenceResultsWithHttpInfo(activityOccurrenceId, activityOccurrenceResults);
        return resp.getData();
    }

    /**
     * Sets the status of an activity occurrence to FINISHED and logs metrics
     * 
     * @param activityOccurrenceId The id of the activity occurrence (required)
     * @param activityOccurrenceResults The activity occurrence object (optional)
     * @return ApiResponse&lt;ActivityOccurrenceResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ActivityOccurrenceResults> setActivityOccurrenceResultsWithHttpInfo(Long activityOccurrenceId, ActivityOccurrenceResults activityOccurrenceResults) throws ApiException {
        com.squareup.okhttp.Call call = setActivityOccurrenceResultsValidateBeforeCall(activityOccurrenceId, activityOccurrenceResults, null, null);
        Type localVarReturnType = new TypeToken<ActivityOccurrenceResults>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sets the status of an activity occurrence to FINISHED and logs metrics (asynchronously)
     * 
     * @param activityOccurrenceId The id of the activity occurrence (required)
     * @param activityOccurrenceResults The activity occurrence object (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setActivityOccurrenceResultsAsync(Long activityOccurrenceId, ActivityOccurrenceResults activityOccurrenceResults, final ApiCallback<ActivityOccurrenceResults> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setActivityOccurrenceResultsValidateBeforeCall(activityOccurrenceId, activityOccurrenceResults, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ActivityOccurrenceResults>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateActivity */
    private com.squareup.okhttp.Call updateActivityCall(Long id, ActivityResource activityResource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = activityResource;
        
        // create path and map variables
        String localVarPath = "/activities/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateActivityValidateBeforeCall(Long id, ActivityResource activityResource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateActivity(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateActivityCall(id, activityResource, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an activity
     * 
     * @param id The id of the activity (required)
     * @param activityResource The activity resource object (optional)
     * @return ActivityResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ActivityResource updateActivity(Long id, ActivityResource activityResource) throws ApiException {
        ApiResponse<ActivityResource> resp = updateActivityWithHttpInfo(id, activityResource);
        return resp.getData();
    }

    /**
     * Update an activity
     * 
     * @param id The id of the activity (required)
     * @param activityResource The activity resource object (optional)
     * @return ApiResponse&lt;ActivityResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ActivityResource> updateActivityWithHttpInfo(Long id, ActivityResource activityResource) throws ApiException {
        com.squareup.okhttp.Call call = updateActivityValidateBeforeCall(id, activityResource, null, null);
        Type localVarReturnType = new TypeToken<ActivityResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an activity (asynchronously)
     * 
     * @param id The id of the activity (required)
     * @param activityResource The activity resource object (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateActivityAsync(Long id, ActivityResource activityResource, final ApiCallback<ActivityResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateActivityValidateBeforeCall(id, activityResource, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ActivityResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateActivityOccurrence */
    private com.squareup.okhttp.Call updateActivityOccurrenceCall(Long activityOccurrenceId, String activityCccurrenceStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = activityCccurrenceStatus;
        
        // create path and map variables
        String localVarPath = "/activity-occurrences/{activity_occurrence_id}/status".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "activity_occurrence_id" + "\\}", apiClient.escapeString(activityOccurrenceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateActivityOccurrenceValidateBeforeCall(Long activityOccurrenceId, String activityCccurrenceStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'activityOccurrenceId' is set
        if (activityOccurrenceId == null) {
            throw new ApiException("Missing the required parameter 'activityOccurrenceId' when calling updateActivityOccurrence(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateActivityOccurrenceCall(activityOccurrenceId, activityCccurrenceStatus, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updated the status of an activity occurrence
     * If setting to &#39;FINISHED&#39; you must POST to /results instead to record the metrics and get synchronous reward results
     * @param activityOccurrenceId The id of the activity occurrence (required)
     * @param activityCccurrenceStatus The activity occurrence status object (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateActivityOccurrence(Long activityOccurrenceId, String activityCccurrenceStatus) throws ApiException {
        updateActivityOccurrenceWithHttpInfo(activityOccurrenceId, activityCccurrenceStatus);
    }

    /**
     * Updated the status of an activity occurrence
     * If setting to &#39;FINISHED&#39; you must POST to /results instead to record the metrics and get synchronous reward results
     * @param activityOccurrenceId The id of the activity occurrence (required)
     * @param activityCccurrenceStatus The activity occurrence status object (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateActivityOccurrenceWithHttpInfo(Long activityOccurrenceId, String activityCccurrenceStatus) throws ApiException {
        com.squareup.okhttp.Call call = updateActivityOccurrenceValidateBeforeCall(activityOccurrenceId, activityCccurrenceStatus, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updated the status of an activity occurrence (asynchronously)
     * If setting to &#39;FINISHED&#39; you must POST to /results instead to record the metrics and get synchronous reward results
     * @param activityOccurrenceId The id of the activity occurrence (required)
     * @param activityCccurrenceStatus The activity occurrence status object (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateActivityOccurrenceAsync(Long activityOccurrenceId, String activityCccurrenceStatus, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateActivityOccurrenceValidateBeforeCall(activityOccurrenceId, activityCccurrenceStatus, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
