/*
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.knetikcloud.api;

import com.knetikcloud.client.ApiCallback;
import com.knetikcloud.client.ApiClient;
import com.knetikcloud.client.ApiException;
import com.knetikcloud.client.ApiResponse;
import com.knetikcloud.client.Configuration;
import com.knetikcloud.client.Pair;
import com.knetikcloud.client.ProgressRequestBody;
import com.knetikcloud.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.knetikcloud.model.AnswerResource;
import com.knetikcloud.model.Collectionstring;
import com.knetikcloud.model.DeltaResource;
import com.knetikcloud.model.ImportJobResource;
import com.knetikcloud.model.PageResourceImportJobResource;
import com.knetikcloud.model.PageResourceQuestionResource;
import com.knetikcloud.model.PageResourceQuestionTemplateResource;
import com.knetikcloud.model.QuestionResource;
import com.knetikcloud.model.QuestionTemplateResource;
import com.knetikcloud.model.Result;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GamificationTriviaApi {
    private ApiClient apiClient;

    public GamificationTriviaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GamificationTriviaApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for addQuestionAnswers */
    private com.squareup.okhttp.Call addQuestionAnswersCall(String questionId, AnswerResource answer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = answer;
        
        // create path and map variables
        String localVarPath = "/trivia/questions/{question_id}/answers"
            .replaceAll("\\{" + "question_id" + "\\}", apiClient.escapeString(questionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addQuestionAnswersValidateBeforeCall(String questionId, AnswerResource answer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'questionId' is set
        if (questionId == null) {
            throw new ApiException("Missing the required parameter 'questionId' when calling addQuestionAnswers(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addQuestionAnswersCall(questionId, answer, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add an answer to a question
     * 
     * @param questionId The id of the question (required)
     * @param answer The new answer (optional)
     * @return AnswerResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AnswerResource addQuestionAnswers(String questionId, AnswerResource answer) throws ApiException {
        ApiResponse<AnswerResource> resp = addQuestionAnswersWithHttpInfo(questionId, answer);
        return resp.getData();
    }

    /**
     * Add an answer to a question
     * 
     * @param questionId The id of the question (required)
     * @param answer The new answer (optional)
     * @return ApiResponse&lt;AnswerResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AnswerResource> addQuestionAnswersWithHttpInfo(String questionId, AnswerResource answer) throws ApiException {
        com.squareup.okhttp.Call call = addQuestionAnswersValidateBeforeCall(questionId, answer, null, null);
        Type localVarReturnType = new TypeToken<AnswerResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add an answer to a question (asynchronously)
     * 
     * @param questionId The id of the question (required)
     * @param answer The new answer (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addQuestionAnswersAsync(String questionId, AnswerResource answer, final ApiCallback<AnswerResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addQuestionAnswersValidateBeforeCall(questionId, answer, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnswerResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addQuestionTag */
    private com.squareup.okhttp.Call addQuestionTagCall(String id, String tag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = tag;
        
        // create path and map variables
        String localVarPath = "/trivia/questions/{id}/tags"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addQuestionTagValidateBeforeCall(String id, String tag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addQuestionTag(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addQuestionTagCall(id, tag, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a tag to a question
     * 
     * @param id The id of the question (required)
     * @param tag The new tag (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addQuestionTag(String id, String tag) throws ApiException {
        addQuestionTagWithHttpInfo(id, tag);
    }

    /**
     * Add a tag to a question
     * 
     * @param id The id of the question (required)
     * @param tag The new tag (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addQuestionTagWithHttpInfo(String id, String tag) throws ApiException {
        com.squareup.okhttp.Call call = addQuestionTagValidateBeforeCall(id, tag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add a tag to a question (asynchronously)
     * 
     * @param id The id of the question (required)
     * @param tag The new tag (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addQuestionTagAsync(String id, String tag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addQuestionTagValidateBeforeCall(id, tag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for addTagToQuestionsBatch */
    private com.squareup.okhttp.Call addTagToQuestionsBatchCall(String tag, String filterSearch, String filterIdset, String filterCategory, String filterTag, String filterTagset, String filterType, Boolean filterPublished, Long filterImportId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = tag;
        
        // create path and map variables
        String localVarPath = "/trivia/questions/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (filterSearch != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_search", filterSearch));
        if (filterIdset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_idset", filterIdset));
        if (filterCategory != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_category", filterCategory));
        if (filterTag != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_tag", filterTag));
        if (filterTagset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_tagset", filterTagset));
        if (filterType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_type", filterType));
        if (filterPublished != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_published", filterPublished));
        if (filterImportId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_import_id", filterImportId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addTagToQuestionsBatchValidateBeforeCall(String tag, String filterSearch, String filterIdset, String filterCategory, String filterTag, String filterTagset, String filterType, Boolean filterPublished, Long filterImportId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = addTagToQuestionsBatchCall(tag, filterSearch, filterIdset, filterCategory, filterTag, filterTagset, filterType, filterPublished, filterImportId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a tag to a batch of questions
     * All questions that dont&#39;t have the tag and match filters will have it added. The returned number is the number of questions updated.
     * @param tag The tag to add (optional)
     * @param filterSearch Filter for documents whose question, answers or tags contains provided string (optional)
     * @param filterIdset Filter for documents whose id is in the comma separated list provided (optional)
     * @param filterCategory Filter for questions with specified category, by id (optional)
     * @param filterTag Filter for questions with specified tag (optional)
     * @param filterTagset Filter for questions with specified tags (separated by comma) (optional)
     * @param filterType Filter for questions with specified type (optional)
     * @param filterPublished Filter for questions currenctly published or not (optional)
     * @param filterImportId Filter for questions from a specific import job (optional)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Integer addTagToQuestionsBatch(String tag, String filterSearch, String filterIdset, String filterCategory, String filterTag, String filterTagset, String filterType, Boolean filterPublished, Long filterImportId) throws ApiException {
        ApiResponse<Integer> resp = addTagToQuestionsBatchWithHttpInfo(tag, filterSearch, filterIdset, filterCategory, filterTag, filterTagset, filterType, filterPublished, filterImportId);
        return resp.getData();
    }

    /**
     * Add a tag to a batch of questions
     * All questions that dont&#39;t have the tag and match filters will have it added. The returned number is the number of questions updated.
     * @param tag The tag to add (optional)
     * @param filterSearch Filter for documents whose question, answers or tags contains provided string (optional)
     * @param filterIdset Filter for documents whose id is in the comma separated list provided (optional)
     * @param filterCategory Filter for questions with specified category, by id (optional)
     * @param filterTag Filter for questions with specified tag (optional)
     * @param filterTagset Filter for questions with specified tags (separated by comma) (optional)
     * @param filterType Filter for questions with specified type (optional)
     * @param filterPublished Filter for questions currenctly published or not (optional)
     * @param filterImportId Filter for questions from a specific import job (optional)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Integer> addTagToQuestionsBatchWithHttpInfo(String tag, String filterSearch, String filterIdset, String filterCategory, String filterTag, String filterTagset, String filterType, Boolean filterPublished, Long filterImportId) throws ApiException {
        com.squareup.okhttp.Call call = addTagToQuestionsBatchValidateBeforeCall(tag, filterSearch, filterIdset, filterCategory, filterTag, filterTagset, filterType, filterPublished, filterImportId, null, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a tag to a batch of questions (asynchronously)
     * All questions that dont&#39;t have the tag and match filters will have it added. The returned number is the number of questions updated.
     * @param tag The tag to add (optional)
     * @param filterSearch Filter for documents whose question, answers or tags contains provided string (optional)
     * @param filterIdset Filter for documents whose id is in the comma separated list provided (optional)
     * @param filterCategory Filter for questions with specified category, by id (optional)
     * @param filterTag Filter for questions with specified tag (optional)
     * @param filterTagset Filter for questions with specified tags (separated by comma) (optional)
     * @param filterType Filter for questions with specified type (optional)
     * @param filterPublished Filter for questions currenctly published or not (optional)
     * @param filterImportId Filter for questions from a specific import job (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addTagToQuestionsBatchAsync(String tag, String filterSearch, String filterIdset, String filterCategory, String filterTag, String filterTagset, String filterType, Boolean filterPublished, Long filterImportId, final ApiCallback<Integer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addTagToQuestionsBatchValidateBeforeCall(tag, filterSearch, filterIdset, filterCategory, filterTag, filterTagset, filterType, filterPublished, filterImportId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createImportJob */
    private com.squareup.okhttp.Call createImportJobCall(ImportJobResource request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/trivia/import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createImportJobValidateBeforeCall(ImportJobResource request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = createImportJobCall(request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create an import job
     * Set up a job to import a set of trivia questions from a cvs file at a remote url. the file will be validated asynchronously but will not be processed until started manually with the process endpoint.
     * @param request The new import job (optional)
     * @return ImportJobResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ImportJobResource createImportJob(ImportJobResource request) throws ApiException {
        ApiResponse<ImportJobResource> resp = createImportJobWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Create an import job
     * Set up a job to import a set of trivia questions from a cvs file at a remote url. the file will be validated asynchronously but will not be processed until started manually with the process endpoint.
     * @param request The new import job (optional)
     * @return ApiResponse&lt;ImportJobResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ImportJobResource> createImportJobWithHttpInfo(ImportJobResource request) throws ApiException {
        com.squareup.okhttp.Call call = createImportJobValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<ImportJobResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an import job (asynchronously)
     * Set up a job to import a set of trivia questions from a cvs file at a remote url. the file will be validated asynchronously but will not be processed until started manually with the process endpoint.
     * @param request The new import job (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createImportJobAsync(ImportJobResource request, final ApiCallback<ImportJobResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createImportJobValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ImportJobResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createQuestion */
    private com.squareup.okhttp.Call createQuestionCall(QuestionResource question, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = question;
        
        // create path and map variables
        String localVarPath = "/trivia/questions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createQuestionValidateBeforeCall(QuestionResource question, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = createQuestionCall(question, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a question
     * 
     * @param question The new question (optional)
     * @return QuestionResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QuestionResource createQuestion(QuestionResource question) throws ApiException {
        ApiResponse<QuestionResource> resp = createQuestionWithHttpInfo(question);
        return resp.getData();
    }

    /**
     * Create a question
     * 
     * @param question The new question (optional)
     * @return ApiResponse&lt;QuestionResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QuestionResource> createQuestionWithHttpInfo(QuestionResource question) throws ApiException {
        com.squareup.okhttp.Call call = createQuestionValidateBeforeCall(question, null, null);
        Type localVarReturnType = new TypeToken<QuestionResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a question (asynchronously)
     * 
     * @param question The new question (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createQuestionAsync(QuestionResource question, final ApiCallback<QuestionResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createQuestionValidateBeforeCall(question, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QuestionResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createQuestionTemplate */
    private com.squareup.okhttp.Call createQuestionTemplateCall(QuestionTemplateResource questionTemplateResource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = questionTemplateResource;
        
        // create path and map variables
        String localVarPath = "/trivia/questions/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createQuestionTemplateValidateBeforeCall(QuestionTemplateResource questionTemplateResource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = createQuestionTemplateCall(questionTemplateResource, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a question template
     * Question templates define a type of question and the properties they have
     * @param questionTemplateResource The question template resource object (optional)
     * @return QuestionTemplateResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QuestionTemplateResource createQuestionTemplate(QuestionTemplateResource questionTemplateResource) throws ApiException {
        ApiResponse<QuestionTemplateResource> resp = createQuestionTemplateWithHttpInfo(questionTemplateResource);
        return resp.getData();
    }

    /**
     * Create a question template
     * Question templates define a type of question and the properties they have
     * @param questionTemplateResource The question template resource object (optional)
     * @return ApiResponse&lt;QuestionTemplateResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QuestionTemplateResource> createQuestionTemplateWithHttpInfo(QuestionTemplateResource questionTemplateResource) throws ApiException {
        com.squareup.okhttp.Call call = createQuestionTemplateValidateBeforeCall(questionTemplateResource, null, null);
        Type localVarReturnType = new TypeToken<QuestionTemplateResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a question template (asynchronously)
     * Question templates define a type of question and the properties they have
     * @param questionTemplateResource The question template resource object (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createQuestionTemplateAsync(QuestionTemplateResource questionTemplateResource, final ApiCallback<QuestionTemplateResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createQuestionTemplateValidateBeforeCall(questionTemplateResource, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QuestionTemplateResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteImportJob */
    private com.squareup.okhttp.Call deleteImportJobCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/trivia/import/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteImportJobValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteImportJob(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteImportJobCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an import job
     * Also deletes all questions that were imported by it
     * @param id The id of the job (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteImportJob(Long id) throws ApiException {
        deleteImportJobWithHttpInfo(id);
    }

    /**
     * Delete an import job
     * Also deletes all questions that were imported by it
     * @param id The id of the job (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteImportJobWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = deleteImportJobValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an import job (asynchronously)
     * Also deletes all questions that were imported by it
     * @param id The id of the job (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteImportJobAsync(Long id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteImportJobValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteQuestion */
    private com.squareup.okhttp.Call deleteQuestionCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/trivia/questions/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteQuestionValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteQuestion(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteQuestionCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a question
     * 
     * @param id The id of the question (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteQuestion(String id) throws ApiException {
        deleteQuestionWithHttpInfo(id);
    }

    /**
     * Delete a question
     * 
     * @param id The id of the question (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteQuestionWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteQuestionValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a question (asynchronously)
     * 
     * @param id The id of the question (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteQuestionAsync(String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteQuestionValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteQuestionAnswers */
    private com.squareup.okhttp.Call deleteQuestionAnswersCall(String questionId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/trivia/questions/{question_id}/answers/{id}"
            .replaceAll("\\{" + "question_id" + "\\}", apiClient.escapeString(questionId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteQuestionAnswersValidateBeforeCall(String questionId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'questionId' is set
        if (questionId == null) {
            throw new ApiException("Missing the required parameter 'questionId' when calling deleteQuestionAnswers(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteQuestionAnswers(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteQuestionAnswersCall(questionId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove an answer from a question
     * 
     * @param questionId The id of the question (required)
     * @param id The id of the answer (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteQuestionAnswers(String questionId, String id) throws ApiException {
        deleteQuestionAnswersWithHttpInfo(questionId, id);
    }

    /**
     * Remove an answer from a question
     * 
     * @param questionId The id of the question (required)
     * @param id The id of the answer (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteQuestionAnswersWithHttpInfo(String questionId, String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteQuestionAnswersValidateBeforeCall(questionId, id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove an answer from a question (asynchronously)
     * 
     * @param questionId The id of the question (required)
     * @param id The id of the answer (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteQuestionAnswersAsync(String questionId, String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteQuestionAnswersValidateBeforeCall(questionId, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteQuestionTemplate */
    private com.squareup.okhttp.Call deleteQuestionTemplateCall(String id, String cascade, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/trivia/questions/templates/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (cascade != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cascade", cascade));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteQuestionTemplateValidateBeforeCall(String id, String cascade, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteQuestionTemplate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteQuestionTemplateCall(id, cascade, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a question template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
     * @param id The id of the template (required)
     * @param cascade The value needed to delete used templates (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteQuestionTemplate(String id, String cascade) throws ApiException {
        deleteQuestionTemplateWithHttpInfo(id, cascade);
    }

    /**
     * Delete a question template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
     * @param id The id of the template (required)
     * @param cascade The value needed to delete used templates (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteQuestionTemplateWithHttpInfo(String id, String cascade) throws ApiException {
        com.squareup.okhttp.Call call = deleteQuestionTemplateValidateBeforeCall(id, cascade, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a question template (asynchronously)
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
     * @param id The id of the template (required)
     * @param cascade The value needed to delete used templates (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteQuestionTemplateAsync(String id, String cascade, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteQuestionTemplateValidateBeforeCall(id, cascade, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getImportJob */
    private com.squareup.okhttp.Call getImportJobCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/trivia/import/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getImportJobValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getImportJob(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getImportJobCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get an import job
     * 
     * @param id The id of the job (required)
     * @return ImportJobResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ImportJobResource getImportJob(Long id) throws ApiException {
        ApiResponse<ImportJobResource> resp = getImportJobWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get an import job
     * 
     * @param id The id of the job (required)
     * @return ApiResponse&lt;ImportJobResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ImportJobResource> getImportJobWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = getImportJobValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<ImportJobResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an import job (asynchronously)
     * 
     * @param id The id of the job (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getImportJobAsync(Long id, final ApiCallback<ImportJobResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getImportJobValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ImportJobResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getImportJobs */
    private com.squareup.okhttp.Call getImportJobsCall(String filterVendor, String filterCategory, String filterName, String filterStatus, Integer size, Integer page, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/trivia/import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (filterVendor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_vendor", filterVendor));
        if (filterCategory != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_category", filterCategory));
        if (filterName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_name", filterName));
        if (filterStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_status", filterStatus));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getImportJobsValidateBeforeCall(String filterVendor, String filterCategory, String filterName, String filterStatus, Integer size, Integer page, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getImportJobsCall(filterVendor, filterCategory, filterName, filterStatus, size, page, order, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a list of import job
     * 
     * @param filterVendor Filter for jobs by vendor id (optional)
     * @param filterCategory Filter for jobs by category id (optional)
     * @param filterName Filter for jobs which name *STARTS* with the given string (optional)
     * @param filterStatus Filter for jobs that are in a specific set of statuses (comma separated) (optional)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @return PageResourceImportJobResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageResourceImportJobResource getImportJobs(String filterVendor, String filterCategory, String filterName, String filterStatus, Integer size, Integer page, String order) throws ApiException {
        ApiResponse<PageResourceImportJobResource> resp = getImportJobsWithHttpInfo(filterVendor, filterCategory, filterName, filterStatus, size, page, order);
        return resp.getData();
    }

    /**
     * Get a list of import job
     * 
     * @param filterVendor Filter for jobs by vendor id (optional)
     * @param filterCategory Filter for jobs by category id (optional)
     * @param filterName Filter for jobs which name *STARTS* with the given string (optional)
     * @param filterStatus Filter for jobs that are in a specific set of statuses (comma separated) (optional)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @return ApiResponse&lt;PageResourceImportJobResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageResourceImportJobResource> getImportJobsWithHttpInfo(String filterVendor, String filterCategory, String filterName, String filterStatus, Integer size, Integer page, String order) throws ApiException {
        com.squareup.okhttp.Call call = getImportJobsValidateBeforeCall(filterVendor, filterCategory, filterName, filterStatus, size, page, order, null, null);
        Type localVarReturnType = new TypeToken<PageResourceImportJobResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of import job (asynchronously)
     * 
     * @param filterVendor Filter for jobs by vendor id (optional)
     * @param filterCategory Filter for jobs by category id (optional)
     * @param filterName Filter for jobs which name *STARTS* with the given string (optional)
     * @param filterStatus Filter for jobs that are in a specific set of statuses (comma separated) (optional)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getImportJobsAsync(String filterVendor, String filterCategory, String filterName, String filterStatus, Integer size, Integer page, String order, final ApiCallback<PageResourceImportJobResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getImportJobsValidateBeforeCall(filterVendor, filterCategory, filterName, filterStatus, size, page, order, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageResourceImportJobResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getQuestion */
    private com.squareup.okhttp.Call getQuestionCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/trivia/questions/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getQuestionValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getQuestion(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getQuestionCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a single question
     * 
     * @param id The id of the question (required)
     * @return QuestionResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QuestionResource getQuestion(String id) throws ApiException {
        ApiResponse<QuestionResource> resp = getQuestionWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get a single question
     * 
     * @param id The id of the question (required)
     * @return ApiResponse&lt;QuestionResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QuestionResource> getQuestionWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getQuestionValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<QuestionResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a single question (asynchronously)
     * 
     * @param id The id of the question (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getQuestionAsync(String id, final ApiCallback<QuestionResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getQuestionValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QuestionResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getQuestionAnswer */
    private com.squareup.okhttp.Call getQuestionAnswerCall(String questionId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/trivia/questions/{question_id}/answers/{id}"
            .replaceAll("\\{" + "question_id" + "\\}", apiClient.escapeString(questionId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getQuestionAnswerValidateBeforeCall(String questionId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'questionId' is set
        if (questionId == null) {
            throw new ApiException("Missing the required parameter 'questionId' when calling getQuestionAnswer(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getQuestionAnswer(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getQuestionAnswerCall(questionId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get an answer for a question
     * 
     * @param questionId The id of the question (required)
     * @param id The id of the answer (required)
     * @return AnswerResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AnswerResource getQuestionAnswer(String questionId, String id) throws ApiException {
        ApiResponse<AnswerResource> resp = getQuestionAnswerWithHttpInfo(questionId, id);
        return resp.getData();
    }

    /**
     * Get an answer for a question
     * 
     * @param questionId The id of the question (required)
     * @param id The id of the answer (required)
     * @return ApiResponse&lt;AnswerResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AnswerResource> getQuestionAnswerWithHttpInfo(String questionId, String id) throws ApiException {
        com.squareup.okhttp.Call call = getQuestionAnswerValidateBeforeCall(questionId, id, null, null);
        Type localVarReturnType = new TypeToken<AnswerResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an answer for a question (asynchronously)
     * 
     * @param questionId The id of the question (required)
     * @param id The id of the answer (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getQuestionAnswerAsync(String questionId, String id, final ApiCallback<AnswerResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getQuestionAnswerValidateBeforeCall(questionId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnswerResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getQuestionAnswers */
    private com.squareup.okhttp.Call getQuestionAnswersCall(String questionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/trivia/questions/{question_id}/answers"
            .replaceAll("\\{" + "question_id" + "\\}", apiClient.escapeString(questionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getQuestionAnswersValidateBeforeCall(String questionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'questionId' is set
        if (questionId == null) {
            throw new ApiException("Missing the required parameter 'questionId' when calling getQuestionAnswers(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getQuestionAnswersCall(questionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List the answers available for a question
     * 
     * @param questionId The id of the question (required)
     * @return List&lt;AnswerResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AnswerResource> getQuestionAnswers(String questionId) throws ApiException {
        ApiResponse<List<AnswerResource>> resp = getQuestionAnswersWithHttpInfo(questionId);
        return resp.getData();
    }

    /**
     * List the answers available for a question
     * 
     * @param questionId The id of the question (required)
     * @return ApiResponse&lt;List&lt;AnswerResource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AnswerResource>> getQuestionAnswersWithHttpInfo(String questionId) throws ApiException {
        com.squareup.okhttp.Call call = getQuestionAnswersValidateBeforeCall(questionId, null, null);
        Type localVarReturnType = new TypeToken<List<AnswerResource>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List the answers available for a question (asynchronously)
     * 
     * @param questionId The id of the question (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getQuestionAnswersAsync(String questionId, final ApiCallback<List<AnswerResource>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getQuestionAnswersValidateBeforeCall(questionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AnswerResource>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getQuestionDeltas */
    private com.squareup.okhttp.Call getQuestionDeltasCall(Long since, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/trivia/questions/delta";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getQuestionDeltasValidateBeforeCall(Long since, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getQuestionDeltasCall(since, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List question deltas in ascending order of updated date
     * The &#39;since&#39; parameter is important to avoid getting a full list of all questions. Implementors should make sure they pass the updated date of the last resource loaded, not the date of the last request, in order to avoid gaps
     * @param since Timestamp in seconds (optional)
     * @return List&lt;DeltaResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DeltaResource> getQuestionDeltas(Long since) throws ApiException {
        ApiResponse<List<DeltaResource>> resp = getQuestionDeltasWithHttpInfo(since);
        return resp.getData();
    }

    /**
     * List question deltas in ascending order of updated date
     * The &#39;since&#39; parameter is important to avoid getting a full list of all questions. Implementors should make sure they pass the updated date of the last resource loaded, not the date of the last request, in order to avoid gaps
     * @param since Timestamp in seconds (optional)
     * @return ApiResponse&lt;List&lt;DeltaResource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DeltaResource>> getQuestionDeltasWithHttpInfo(Long since) throws ApiException {
        com.squareup.okhttp.Call call = getQuestionDeltasValidateBeforeCall(since, null, null);
        Type localVarReturnType = new TypeToken<List<DeltaResource>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List question deltas in ascending order of updated date (asynchronously)
     * The &#39;since&#39; parameter is important to avoid getting a full list of all questions. Implementors should make sure they pass the updated date of the last resource loaded, not the date of the last request, in order to avoid gaps
     * @param since Timestamp in seconds (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getQuestionDeltasAsync(Long since, final ApiCallback<List<DeltaResource>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getQuestionDeltasValidateBeforeCall(since, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DeltaResource>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getQuestionTags */
    private com.squareup.okhttp.Call getQuestionTagsCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/trivia/questions/{id}/tags"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getQuestionTagsValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getQuestionTags(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getQuestionTagsCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List the tags for a question
     * 
     * @param id The id of the question (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> getQuestionTags(String id) throws ApiException {
        ApiResponse<List<String>> resp = getQuestionTagsWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * List the tags for a question
     * 
     * @param id The id of the question (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> getQuestionTagsWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getQuestionTagsValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List the tags for a question (asynchronously)
     * 
     * @param id The id of the question (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getQuestionTagsAsync(String id, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getQuestionTagsValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getQuestionTemplate */
    private com.squareup.okhttp.Call getQuestionTemplateCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/trivia/questions/templates/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getQuestionTemplateValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getQuestionTemplate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getQuestionTemplateCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a single question template
     * 
     * @param id The id of the template (required)
     * @return QuestionTemplateResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QuestionTemplateResource getQuestionTemplate(String id) throws ApiException {
        ApiResponse<QuestionTemplateResource> resp = getQuestionTemplateWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get a single question template
     * 
     * @param id The id of the template (required)
     * @return ApiResponse&lt;QuestionTemplateResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QuestionTemplateResource> getQuestionTemplateWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getQuestionTemplateValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<QuestionTemplateResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a single question template (asynchronously)
     * 
     * @param id The id of the template (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getQuestionTemplateAsync(String id, final ApiCallback<QuestionTemplateResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getQuestionTemplateValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QuestionTemplateResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getQuestionTemplates */
    private com.squareup.okhttp.Call getQuestionTemplatesCall(Integer size, Integer page, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/trivia/questions/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getQuestionTemplatesValidateBeforeCall(Integer size, Integer page, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getQuestionTemplatesCall(size, page, order, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List and search question templates
     * 
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @return PageResourceQuestionTemplateResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageResourceQuestionTemplateResource getQuestionTemplates(Integer size, Integer page, String order) throws ApiException {
        ApiResponse<PageResourceQuestionTemplateResource> resp = getQuestionTemplatesWithHttpInfo(size, page, order);
        return resp.getData();
    }

    /**
     * List and search question templates
     * 
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @return ApiResponse&lt;PageResourceQuestionTemplateResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageResourceQuestionTemplateResource> getQuestionTemplatesWithHttpInfo(Integer size, Integer page, String order) throws ApiException {
        com.squareup.okhttp.Call call = getQuestionTemplatesValidateBeforeCall(size, page, order, null, null);
        Type localVarReturnType = new TypeToken<PageResourceQuestionTemplateResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List and search question templates (asynchronously)
     * 
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getQuestionTemplatesAsync(Integer size, Integer page, String order, final ApiCallback<PageResourceQuestionTemplateResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getQuestionTemplatesValidateBeforeCall(size, page, order, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageResourceQuestionTemplateResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getQuestions */
    private com.squareup.okhttp.Call getQuestionsCall(Integer size, Integer page, String order, String filterSearch, String filterIdset, String filterCategory, String filterTagset, String filterTag, String filterType, Boolean filterPublished, Long filterImportId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/trivia/questions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));
        if (filterSearch != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_search", filterSearch));
        if (filterIdset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_idset", filterIdset));
        if (filterCategory != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_category", filterCategory));
        if (filterTagset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_tagset", filterTagset));
        if (filterTag != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_tag", filterTag));
        if (filterType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_type", filterType));
        if (filterPublished != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_published", filterPublished));
        if (filterImportId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_import_id", filterImportId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getQuestionsValidateBeforeCall(Integer size, Integer page, String order, String filterSearch, String filterIdset, String filterCategory, String filterTagset, String filterTag, String filterType, Boolean filterPublished, Long filterImportId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getQuestionsCall(size, page, order, filterSearch, filterIdset, filterCategory, filterTagset, filterTag, filterType, filterPublished, filterImportId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List and search questions
     * 
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @param filterSearch Filter for documents whose question, answers or tags contains provided string (optional)
     * @param filterIdset Filter for documents whose id is in the comma separated list provided (optional)
     * @param filterCategory Filter for questions with specified category, by id (optional)
     * @param filterTagset Filter for questions with specified tags (separated by comma) (optional)
     * @param filterTag Filter for questions with specified tag (optional)
     * @param filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param filterPublished Filter for questions currenctly published or not (optional)
     * @param filterImportId Filter for questions from a specific import job (optional)
     * @return PageResourceQuestionResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageResourceQuestionResource getQuestions(Integer size, Integer page, String order, String filterSearch, String filterIdset, String filterCategory, String filterTagset, String filterTag, String filterType, Boolean filterPublished, Long filterImportId) throws ApiException {
        ApiResponse<PageResourceQuestionResource> resp = getQuestionsWithHttpInfo(size, page, order, filterSearch, filterIdset, filterCategory, filterTagset, filterTag, filterType, filterPublished, filterImportId);
        return resp.getData();
    }

    /**
     * List and search questions
     * 
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @param filterSearch Filter for documents whose question, answers or tags contains provided string (optional)
     * @param filterIdset Filter for documents whose id is in the comma separated list provided (optional)
     * @param filterCategory Filter for questions with specified category, by id (optional)
     * @param filterTagset Filter for questions with specified tags (separated by comma) (optional)
     * @param filterTag Filter for questions with specified tag (optional)
     * @param filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param filterPublished Filter for questions currenctly published or not (optional)
     * @param filterImportId Filter for questions from a specific import job (optional)
     * @return ApiResponse&lt;PageResourceQuestionResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageResourceQuestionResource> getQuestionsWithHttpInfo(Integer size, Integer page, String order, String filterSearch, String filterIdset, String filterCategory, String filterTagset, String filterTag, String filterType, Boolean filterPublished, Long filterImportId) throws ApiException {
        com.squareup.okhttp.Call call = getQuestionsValidateBeforeCall(size, page, order, filterSearch, filterIdset, filterCategory, filterTagset, filterTag, filterType, filterPublished, filterImportId, null, null);
        Type localVarReturnType = new TypeToken<PageResourceQuestionResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List and search questions (asynchronously)
     * 
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @param filterSearch Filter for documents whose question, answers or tags contains provided string (optional)
     * @param filterIdset Filter for documents whose id is in the comma separated list provided (optional)
     * @param filterCategory Filter for questions with specified category, by id (optional)
     * @param filterTagset Filter for questions with specified tags (separated by comma) (optional)
     * @param filterTag Filter for questions with specified tag (optional)
     * @param filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param filterPublished Filter for questions currenctly published or not (optional)
     * @param filterImportId Filter for questions from a specific import job (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getQuestionsAsync(Integer size, Integer page, String order, String filterSearch, String filterIdset, String filterCategory, String filterTagset, String filterTag, String filterType, Boolean filterPublished, Long filterImportId, final ApiCallback<PageResourceQuestionResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getQuestionsValidateBeforeCall(size, page, order, filterSearch, filterIdset, filterCategory, filterTagset, filterTag, filterType, filterPublished, filterImportId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageResourceQuestionResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getQuestionsCount */
    private com.squareup.okhttp.Call getQuestionsCountCall(String filterSearch, String filterIdset, String filterCategory, String filterTag, String filterTagset, String filterType, Boolean filterPublished, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/trivia/questions/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (filterSearch != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_search", filterSearch));
        if (filterIdset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_idset", filterIdset));
        if (filterCategory != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_category", filterCategory));
        if (filterTag != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_tag", filterTag));
        if (filterTagset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_tagset", filterTagset));
        if (filterType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_type", filterType));
        if (filterPublished != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_published", filterPublished));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getQuestionsCountValidateBeforeCall(String filterSearch, String filterIdset, String filterCategory, String filterTag, String filterTagset, String filterType, Boolean filterPublished, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getQuestionsCountCall(filterSearch, filterIdset, filterCategory, filterTag, filterTagset, filterType, filterPublished, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Count questions based on filters
     * This is also provided by the list endpoint so you don&#39;t need to call this for pagination purposes
     * @param filterSearch Filter for documents whose question, answers or tags contains provided string (optional)
     * @param filterIdset Filter for documents whose id is in the comma separated list provided (optional)
     * @param filterCategory Filter for questions with specified category, by id (optional)
     * @param filterTag Filter for questions with specified tag (optional)
     * @param filterTagset Filter for questions with specified tags (separated by comma) (optional)
     * @param filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param filterPublished Filter for questions currenctly published or not (optional)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Long getQuestionsCount(String filterSearch, String filterIdset, String filterCategory, String filterTag, String filterTagset, String filterType, Boolean filterPublished) throws ApiException {
        ApiResponse<Long> resp = getQuestionsCountWithHttpInfo(filterSearch, filterIdset, filterCategory, filterTag, filterTagset, filterType, filterPublished);
        return resp.getData();
    }

    /**
     * Count questions based on filters
     * This is also provided by the list endpoint so you don&#39;t need to call this for pagination purposes
     * @param filterSearch Filter for documents whose question, answers or tags contains provided string (optional)
     * @param filterIdset Filter for documents whose id is in the comma separated list provided (optional)
     * @param filterCategory Filter for questions with specified category, by id (optional)
     * @param filterTag Filter for questions with specified tag (optional)
     * @param filterTagset Filter for questions with specified tags (separated by comma) (optional)
     * @param filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param filterPublished Filter for questions currenctly published or not (optional)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Long> getQuestionsCountWithHttpInfo(String filterSearch, String filterIdset, String filterCategory, String filterTag, String filterTagset, String filterType, Boolean filterPublished) throws ApiException {
        com.squareup.okhttp.Call call = getQuestionsCountValidateBeforeCall(filterSearch, filterIdset, filterCategory, filterTag, filterTagset, filterType, filterPublished, null, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Count questions based on filters (asynchronously)
     * This is also provided by the list endpoint so you don&#39;t need to call this for pagination purposes
     * @param filterSearch Filter for documents whose question, answers or tags contains provided string (optional)
     * @param filterIdset Filter for documents whose id is in the comma separated list provided (optional)
     * @param filterCategory Filter for questions with specified category, by id (optional)
     * @param filterTag Filter for questions with specified tag (optional)
     * @param filterTagset Filter for questions with specified tags (separated by comma) (optional)
     * @param filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param filterPublished Filter for questions currenctly published or not (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getQuestionsCountAsync(String filterSearch, String filterIdset, String filterCategory, String filterTag, String filterTagset, String filterType, Boolean filterPublished, final ApiCallback<Long> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getQuestionsCountValidateBeforeCall(filterSearch, filterIdset, filterCategory, filterTag, filterTagset, filterType, filterPublished, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for processImportJob */
    private com.squareup.okhttp.Call processImportJobCall(Long id, Boolean publishNow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/trivia/import/{id}/process"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (publishNow != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "publish_now", publishNow));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call processImportJobValidateBeforeCall(Long id, Boolean publishNow, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling processImportJob(Async)");
        }
        
        // verify the required parameter 'publishNow' is set
        if (publishNow == null) {
            throw new ApiException("Missing the required parameter 'publishNow' when calling processImportJob(Async)");
        }
        
        
        com.squareup.okhttp.Call call = processImportJobCall(id, publishNow, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Start processing an import job
     * Will process the CSV file and add new questions asynchronously. The status of the job must be &#39;VALID&#39;.
     * @param id The id of the job (required)
     * @param publishNow Whether the new questions should be published live immediately (required)
     * @return ImportJobResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ImportJobResource processImportJob(Long id, Boolean publishNow) throws ApiException {
        ApiResponse<ImportJobResource> resp = processImportJobWithHttpInfo(id, publishNow);
        return resp.getData();
    }

    /**
     * Start processing an import job
     * Will process the CSV file and add new questions asynchronously. The status of the job must be &#39;VALID&#39;.
     * @param id The id of the job (required)
     * @param publishNow Whether the new questions should be published live immediately (required)
     * @return ApiResponse&lt;ImportJobResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ImportJobResource> processImportJobWithHttpInfo(Long id, Boolean publishNow) throws ApiException {
        com.squareup.okhttp.Call call = processImportJobValidateBeforeCall(id, publishNow, null, null);
        Type localVarReturnType = new TypeToken<ImportJobResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start processing an import job (asynchronously)
     * Will process the CSV file and add new questions asynchronously. The status of the job must be &#39;VALID&#39;.
     * @param id The id of the job (required)
     * @param publishNow Whether the new questions should be published live immediately (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call processImportJobAsync(Long id, Boolean publishNow, final ApiCallback<ImportJobResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = processImportJobValidateBeforeCall(id, publishNow, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ImportJobResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for removeQuestionTag */
    private com.squareup.okhttp.Call removeQuestionTagCall(String id, String tag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/trivia/questions/{id}/tags/{tag}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "tag" + "\\}", apiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeQuestionTagValidateBeforeCall(String id, String tag, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeQuestionTag(Async)");
        }
        
        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling removeQuestionTag(Async)");
        }
        
        
        com.squareup.okhttp.Call call = removeQuestionTagCall(id, tag, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove a tag from a question
     * 
     * @param id The id of the question (required)
     * @param tag The tag to remove (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeQuestionTag(String id, String tag) throws ApiException {
        removeQuestionTagWithHttpInfo(id, tag);
    }

    /**
     * Remove a tag from a question
     * 
     * @param id The id of the question (required)
     * @param tag The tag to remove (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeQuestionTagWithHttpInfo(String id, String tag) throws ApiException {
        com.squareup.okhttp.Call call = removeQuestionTagValidateBeforeCall(id, tag, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove a tag from a question (asynchronously)
     * 
     * @param id The id of the question (required)
     * @param tag The tag to remove (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeQuestionTagAsync(String id, String tag, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeQuestionTagValidateBeforeCall(id, tag, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for removeTagToQuestionsBatch */
    private com.squareup.okhttp.Call removeTagToQuestionsBatchCall(String tag, String filterSearch, String filterIdset, String filterCategory, String filterTag, String filterTagset, String filterType, Boolean filterPublished, Long filterImportId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/trivia/questions/tags/{tag}"
            .replaceAll("\\{" + "tag" + "\\}", apiClient.escapeString(tag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (filterSearch != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_search", filterSearch));
        if (filterIdset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_idset", filterIdset));
        if (filterCategory != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_category", filterCategory));
        if (filterTag != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_tag", filterTag));
        if (filterTagset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_tagset", filterTagset));
        if (filterType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_type", filterType));
        if (filterPublished != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_published", filterPublished));
        if (filterImportId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_import_id", filterImportId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeTagToQuestionsBatchValidateBeforeCall(String tag, String filterSearch, String filterIdset, String filterCategory, String filterTag, String filterTagset, String filterType, Boolean filterPublished, Long filterImportId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling removeTagToQuestionsBatch(Async)");
        }
        
        
        com.squareup.okhttp.Call call = removeTagToQuestionsBatchCall(tag, filterSearch, filterIdset, filterCategory, filterTag, filterTagset, filterType, filterPublished, filterImportId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove a tag from a batch of questions
     * ll questions that have the tag and match filters will have it removed. The returned number is the number of questions updated.
     * @param tag The tag to remove (required)
     * @param filterSearch Filter for documents whose question, answers or tags contains provided string (optional)
     * @param filterIdset Filter for documents whose id is in the comma separated list provided (optional)
     * @param filterCategory Filter for questions with specified category, by id (optional)
     * @param filterTag Filter for questions with specified tag (optional)
     * @param filterTagset Filter for questions with specified tags (separated by comma) (optional)
     * @param filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param filterPublished Filter for questions currenctly published or not (optional)
     * @param filterImportId Filter for questions from a specific import job (optional)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Integer removeTagToQuestionsBatch(String tag, String filterSearch, String filterIdset, String filterCategory, String filterTag, String filterTagset, String filterType, Boolean filterPublished, Long filterImportId) throws ApiException {
        ApiResponse<Integer> resp = removeTagToQuestionsBatchWithHttpInfo(tag, filterSearch, filterIdset, filterCategory, filterTag, filterTagset, filterType, filterPublished, filterImportId);
        return resp.getData();
    }

    /**
     * Remove a tag from a batch of questions
     * ll questions that have the tag and match filters will have it removed. The returned number is the number of questions updated.
     * @param tag The tag to remove (required)
     * @param filterSearch Filter for documents whose question, answers or tags contains provided string (optional)
     * @param filterIdset Filter for documents whose id is in the comma separated list provided (optional)
     * @param filterCategory Filter for questions with specified category, by id (optional)
     * @param filterTag Filter for questions with specified tag (optional)
     * @param filterTagset Filter for questions with specified tags (separated by comma) (optional)
     * @param filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param filterPublished Filter for questions currenctly published or not (optional)
     * @param filterImportId Filter for questions from a specific import job (optional)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Integer> removeTagToQuestionsBatchWithHttpInfo(String tag, String filterSearch, String filterIdset, String filterCategory, String filterTag, String filterTagset, String filterType, Boolean filterPublished, Long filterImportId) throws ApiException {
        com.squareup.okhttp.Call call = removeTagToQuestionsBatchValidateBeforeCall(tag, filterSearch, filterIdset, filterCategory, filterTag, filterTagset, filterType, filterPublished, filterImportId, null, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove a tag from a batch of questions (asynchronously)
     * ll questions that have the tag and match filters will have it removed. The returned number is the number of questions updated.
     * @param tag The tag to remove (required)
     * @param filterSearch Filter for documents whose question, answers or tags contains provided string (optional)
     * @param filterIdset Filter for documents whose id is in the comma separated list provided (optional)
     * @param filterCategory Filter for questions with specified category, by id (optional)
     * @param filterTag Filter for questions with specified tag (optional)
     * @param filterTagset Filter for questions with specified tags (separated by comma) (optional)
     * @param filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param filterPublished Filter for questions currenctly published or not (optional)
     * @param filterImportId Filter for questions from a specific import job (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeTagToQuestionsBatchAsync(String tag, String filterSearch, String filterIdset, String filterCategory, String filterTag, String filterTagset, String filterType, Boolean filterPublished, Long filterImportId, final ApiCallback<Integer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeTagToQuestionsBatchValidateBeforeCall(tag, filterSearch, filterIdset, filterCategory, filterTag, filterTagset, filterType, filterPublished, filterImportId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for searchQuestionTags */
    private com.squareup.okhttp.Call searchQuestionTagsCall(String filterSearch, String filterCategory, Long filterImportId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/trivia/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (filterSearch != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_search", filterSearch));
        if (filterCategory != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_category", filterCategory));
        if (filterImportId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_import_id", filterImportId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchQuestionTagsValidateBeforeCall(String filterSearch, String filterCategory, Long filterImportId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = searchQuestionTagsCall(filterSearch, filterCategory, filterImportId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List and search tags by the beginning of the string
     * For performance reasons, search &amp; category filters are mutually exclusive. If category is specified, search filter will be ignored in order to do fast matches for typeahead.
     * @param filterSearch Filter for tags starting with the given text (optional)
     * @param filterCategory Filter for tags on questions from a specific category (optional)
     * @param filterImportId Filter for tags on questions from a specific import job (optional)
     * @return Collectionstring
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Collectionstring searchQuestionTags(String filterSearch, String filterCategory, Long filterImportId) throws ApiException {
        ApiResponse<Collectionstring> resp = searchQuestionTagsWithHttpInfo(filterSearch, filterCategory, filterImportId);
        return resp.getData();
    }

    /**
     * List and search tags by the beginning of the string
     * For performance reasons, search &amp; category filters are mutually exclusive. If category is specified, search filter will be ignored in order to do fast matches for typeahead.
     * @param filterSearch Filter for tags starting with the given text (optional)
     * @param filterCategory Filter for tags on questions from a specific category (optional)
     * @param filterImportId Filter for tags on questions from a specific import job (optional)
     * @return ApiResponse&lt;Collectionstring&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Collectionstring> searchQuestionTagsWithHttpInfo(String filterSearch, String filterCategory, Long filterImportId) throws ApiException {
        com.squareup.okhttp.Call call = searchQuestionTagsValidateBeforeCall(filterSearch, filterCategory, filterImportId, null, null);
        Type localVarReturnType = new TypeToken<Collectionstring>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List and search tags by the beginning of the string (asynchronously)
     * For performance reasons, search &amp; category filters are mutually exclusive. If category is specified, search filter will be ignored in order to do fast matches for typeahead.
     * @param filterSearch Filter for tags starting with the given text (optional)
     * @param filterCategory Filter for tags on questions from a specific category (optional)
     * @param filterImportId Filter for tags on questions from a specific import job (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchQuestionTagsAsync(String filterSearch, String filterCategory, Long filterImportId, final ApiCallback<Collectionstring> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchQuestionTagsValidateBeforeCall(filterSearch, filterCategory, filterImportId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Collectionstring>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateImportJob */
    private com.squareup.okhttp.Call updateImportJobCall(Long id, ImportJobResource request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/trivia/import/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateImportJobValidateBeforeCall(Long id, ImportJobResource request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateImportJob(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateImportJobCall(id, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an import job
     * Changes should be made before process is started for there to be any effect.
     * @param id The id of the job (required)
     * @param request The updated job (optional)
     * @return ImportJobResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ImportJobResource updateImportJob(Long id, ImportJobResource request) throws ApiException {
        ApiResponse<ImportJobResource> resp = updateImportJobWithHttpInfo(id, request);
        return resp.getData();
    }

    /**
     * Update an import job
     * Changes should be made before process is started for there to be any effect.
     * @param id The id of the job (required)
     * @param request The updated job (optional)
     * @return ApiResponse&lt;ImportJobResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ImportJobResource> updateImportJobWithHttpInfo(Long id, ImportJobResource request) throws ApiException {
        com.squareup.okhttp.Call call = updateImportJobValidateBeforeCall(id, request, null, null);
        Type localVarReturnType = new TypeToken<ImportJobResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an import job (asynchronously)
     * Changes should be made before process is started for there to be any effect.
     * @param id The id of the job (required)
     * @param request The updated job (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateImportJobAsync(Long id, ImportJobResource request, final ApiCallback<ImportJobResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateImportJobValidateBeforeCall(id, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ImportJobResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateQuestion */
    private com.squareup.okhttp.Call updateQuestionCall(String id, QuestionResource question, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = question;
        
        // create path and map variables
        String localVarPath = "/trivia/questions/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateQuestionValidateBeforeCall(String id, QuestionResource question, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateQuestion(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateQuestionCall(id, question, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a question
     * 
     * @param id The id of the question (required)
     * @param question The updated question (optional)
     * @return QuestionResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QuestionResource updateQuestion(String id, QuestionResource question) throws ApiException {
        ApiResponse<QuestionResource> resp = updateQuestionWithHttpInfo(id, question);
        return resp.getData();
    }

    /**
     * Update a question
     * 
     * @param id The id of the question (required)
     * @param question The updated question (optional)
     * @return ApiResponse&lt;QuestionResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QuestionResource> updateQuestionWithHttpInfo(String id, QuestionResource question) throws ApiException {
        com.squareup.okhttp.Call call = updateQuestionValidateBeforeCall(id, question, null, null);
        Type localVarReturnType = new TypeToken<QuestionResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a question (asynchronously)
     * 
     * @param id The id of the question (required)
     * @param question The updated question (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateQuestionAsync(String id, QuestionResource question, final ApiCallback<QuestionResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateQuestionValidateBeforeCall(id, question, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QuestionResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateQuestionAnswer */
    private com.squareup.okhttp.Call updateQuestionAnswerCall(String questionId, String id, AnswerResource answer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = answer;
        
        // create path and map variables
        String localVarPath = "/trivia/questions/{question_id}/answers/{id}"
            .replaceAll("\\{" + "question_id" + "\\}", apiClient.escapeString(questionId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateQuestionAnswerValidateBeforeCall(String questionId, String id, AnswerResource answer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'questionId' is set
        if (questionId == null) {
            throw new ApiException("Missing the required parameter 'questionId' when calling updateQuestionAnswer(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateQuestionAnswer(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateQuestionAnswerCall(questionId, id, answer, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an answer for a question
     * 
     * @param questionId The id of the question (required)
     * @param id The id of the answer (required)
     * @param answer The updated answer (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateQuestionAnswer(String questionId, String id, AnswerResource answer) throws ApiException {
        updateQuestionAnswerWithHttpInfo(questionId, id, answer);
    }

    /**
     * Update an answer for a question
     * 
     * @param questionId The id of the question (required)
     * @param id The id of the answer (required)
     * @param answer The updated answer (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateQuestionAnswerWithHttpInfo(String questionId, String id, AnswerResource answer) throws ApiException {
        com.squareup.okhttp.Call call = updateQuestionAnswerValidateBeforeCall(questionId, id, answer, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update an answer for a question (asynchronously)
     * 
     * @param questionId The id of the question (required)
     * @param id The id of the answer (required)
     * @param answer The updated answer (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateQuestionAnswerAsync(String questionId, String id, AnswerResource answer, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateQuestionAnswerValidateBeforeCall(questionId, id, answer, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateQuestionTemplate */
    private com.squareup.okhttp.Call updateQuestionTemplateCall(String id, QuestionTemplateResource questionTemplateResource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = questionTemplateResource;
        
        // create path and map variables
        String localVarPath = "/trivia/questions/templates/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateQuestionTemplateValidateBeforeCall(String id, QuestionTemplateResource questionTemplateResource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateQuestionTemplate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateQuestionTemplateCall(id, questionTemplateResource, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a question template
     * 
     * @param id The id of the template (required)
     * @param questionTemplateResource The question template resource object (optional)
     * @return QuestionTemplateResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QuestionTemplateResource updateQuestionTemplate(String id, QuestionTemplateResource questionTemplateResource) throws ApiException {
        ApiResponse<QuestionTemplateResource> resp = updateQuestionTemplateWithHttpInfo(id, questionTemplateResource);
        return resp.getData();
    }

    /**
     * Update a question template
     * 
     * @param id The id of the template (required)
     * @param questionTemplateResource The question template resource object (optional)
     * @return ApiResponse&lt;QuestionTemplateResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QuestionTemplateResource> updateQuestionTemplateWithHttpInfo(String id, QuestionTemplateResource questionTemplateResource) throws ApiException {
        com.squareup.okhttp.Call call = updateQuestionTemplateValidateBeforeCall(id, questionTemplateResource, null, null);
        Type localVarReturnType = new TypeToken<QuestionTemplateResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a question template (asynchronously)
     * 
     * @param id The id of the template (required)
     * @param questionTemplateResource The question template resource object (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateQuestionTemplateAsync(String id, QuestionTemplateResource questionTemplateResource, final ApiCallback<QuestionTemplateResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateQuestionTemplateValidateBeforeCall(id, questionTemplateResource, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QuestionTemplateResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateQuestionsInBulk */
    private com.squareup.okhttp.Call updateQuestionsInBulkCall(QuestionResource question, String filterSearch, String filterIdset, String filterCategory, String filterTagset, String filterType, Boolean filterPublished, Long filterImportId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = question;
        
        // create path and map variables
        String localVarPath = "/trivia/questions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (filterSearch != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_search", filterSearch));
        if (filterIdset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_idset", filterIdset));
        if (filterCategory != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_category", filterCategory));
        if (filterTagset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_tagset", filterTagset));
        if (filterType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_type", filterType));
        if (filterPublished != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_published", filterPublished));
        if (filterImportId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_import_id", filterImportId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateQuestionsInBulkValidateBeforeCall(QuestionResource question, String filterSearch, String filterIdset, String filterCategory, String filterTagset, String filterType, Boolean filterPublished, Long filterImportId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = updateQuestionsInBulkCall(question, filterSearch, filterIdset, filterCategory, filterTagset, filterType, filterPublished, filterImportId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Bulk update questions
     * Will update all questions that match filters used (or all questions in system if no filters used). Body should match a question resource with only those properties you wish to set. Null values will be ignored. Returned number is how many were updated.
     * @param question New values for a set of question fields (optional)
     * @param filterSearch Filter for documents whose question, answers or tags contains provided string (optional)
     * @param filterIdset Filter for documents whose id is in the comma separated list provided (optional)
     * @param filterCategory Filter for questions with specified category, by id (optional)
     * @param filterTagset Filter for questions with specified tags (separated by comma) (optional)
     * @param filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param filterPublished Filter for questions currenctly published or not (optional)
     * @param filterImportId Filter for questions from a specific import job (optional)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Integer updateQuestionsInBulk(QuestionResource question, String filterSearch, String filterIdset, String filterCategory, String filterTagset, String filterType, Boolean filterPublished, Long filterImportId) throws ApiException {
        ApiResponse<Integer> resp = updateQuestionsInBulkWithHttpInfo(question, filterSearch, filterIdset, filterCategory, filterTagset, filterType, filterPublished, filterImportId);
        return resp.getData();
    }

    /**
     * Bulk update questions
     * Will update all questions that match filters used (or all questions in system if no filters used). Body should match a question resource with only those properties you wish to set. Null values will be ignored. Returned number is how many were updated.
     * @param question New values for a set of question fields (optional)
     * @param filterSearch Filter for documents whose question, answers or tags contains provided string (optional)
     * @param filterIdset Filter for documents whose id is in the comma separated list provided (optional)
     * @param filterCategory Filter for questions with specified category, by id (optional)
     * @param filterTagset Filter for questions with specified tags (separated by comma) (optional)
     * @param filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param filterPublished Filter for questions currenctly published or not (optional)
     * @param filterImportId Filter for questions from a specific import job (optional)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Integer> updateQuestionsInBulkWithHttpInfo(QuestionResource question, String filterSearch, String filterIdset, String filterCategory, String filterTagset, String filterType, Boolean filterPublished, Long filterImportId) throws ApiException {
        com.squareup.okhttp.Call call = updateQuestionsInBulkValidateBeforeCall(question, filterSearch, filterIdset, filterCategory, filterTagset, filterType, filterPublished, filterImportId, null, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Bulk update questions (asynchronously)
     * Will update all questions that match filters used (or all questions in system if no filters used). Body should match a question resource with only those properties you wish to set. Null values will be ignored. Returned number is how many were updated.
     * @param question New values for a set of question fields (optional)
     * @param filterSearch Filter for documents whose question, answers or tags contains provided string (optional)
     * @param filterIdset Filter for documents whose id is in the comma separated list provided (optional)
     * @param filterCategory Filter for questions with specified category, by id (optional)
     * @param filterTagset Filter for questions with specified tags (separated by comma) (optional)
     * @param filterType Filter for questions with specified type.  Allowable values: (&#39;TEXT&#39;, &#39;IMAGE&#39;, &#39;VIDEO&#39;, &#39;AUDIO&#39;) (optional)
     * @param filterPublished Filter for questions currenctly published or not (optional)
     * @param filterImportId Filter for questions from a specific import job (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateQuestionsInBulkAsync(QuestionResource question, String filterSearch, String filterIdset, String filterCategory, String filterTagset, String filterType, Boolean filterPublished, Long filterImportId, final ApiCallback<Integer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateQuestionsInBulkValidateBeforeCall(question, filterSearch, filterIdset, filterCategory, filterTagset, filterType, filterPublished, filterImportId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
