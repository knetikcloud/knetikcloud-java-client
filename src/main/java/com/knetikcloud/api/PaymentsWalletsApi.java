/*
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.knetikcloud.api;

import com.knetikcloud.client.ApiCallback;
import com.knetikcloud.client.ApiClient;
import com.knetikcloud.client.ApiException;
import com.knetikcloud.client.ApiResponse;
import com.knetikcloud.client.Configuration;
import com.knetikcloud.client.Pair;
import com.knetikcloud.client.ProgressRequestBody;
import com.knetikcloud.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.knetikcloud.model.PageResourceSimpleWallet;
import com.knetikcloud.model.PageResourceWalletTotalResponse;
import com.knetikcloud.model.PageResourceWalletTransactionResource;
import com.knetikcloud.model.Result;
import com.knetikcloud.model.SimpleWallet;
import com.knetikcloud.model.WalletAlterRequest;
import com.knetikcloud.model.WalletTransactionResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PaymentsWalletsApi {
    private ApiClient apiClient;

    public PaymentsWalletsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentsWalletsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getUserWallet */
    private com.squareup.okhttp.Call getUserWalletCall(Integer userId, String currencyCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/wallets/{currency_code}"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "currency_code" + "\\}", apiClient.escapeString(currencyCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserWalletValidateBeforeCall(Integer userId, String currencyCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserWallet(Async)");
        }
        
        // verify the required parameter 'currencyCode' is set
        if (currencyCode == null) {
            throw new ApiException("Missing the required parameter 'currencyCode' when calling getUserWallet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUserWalletCall(userId, currencyCode, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns the user&#39;s wallet for the given currency code
     * 
     * @param userId The ID of the user for whom wallet is being retrieved (required)
     * @param currencyCode Currency code of the user&#39;s wallet (required)
     * @return SimpleWallet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SimpleWallet getUserWallet(Integer userId, String currencyCode) throws ApiException {
        ApiResponse<SimpleWallet> resp = getUserWalletWithHttpInfo(userId, currencyCode);
        return resp.getData();
    }

    /**
     * Returns the user&#39;s wallet for the given currency code
     * 
     * @param userId The ID of the user for whom wallet is being retrieved (required)
     * @param currencyCode Currency code of the user&#39;s wallet (required)
     * @return ApiResponse&lt;SimpleWallet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SimpleWallet> getUserWalletWithHttpInfo(Integer userId, String currencyCode) throws ApiException {
        com.squareup.okhttp.Call call = getUserWalletValidateBeforeCall(userId, currencyCode, null, null);
        Type localVarReturnType = new TypeToken<SimpleWallet>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns the user&#39;s wallet for the given currency code (asynchronously)
     * 
     * @param userId The ID of the user for whom wallet is being retrieved (required)
     * @param currencyCode Currency code of the user&#39;s wallet (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserWalletAsync(Integer userId, String currencyCode, final ApiCallback<SimpleWallet> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserWalletValidateBeforeCall(userId, currencyCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SimpleWallet>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUserWalletTransactions */
    private com.squareup.okhttp.Call getUserWalletTransactionsCall(Integer userId, String currencyCode, String filterType, Long filterMaxDate, Long filterMinDate, String filterSign, Integer size, Integer page, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/wallets/{currency_code}/transactions"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "currency_code" + "\\}", apiClient.escapeString(currencyCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (filterType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_type", filterType));
        if (filterMaxDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_max_date", filterMaxDate));
        if (filterMinDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_min_date", filterMinDate));
        if (filterSign != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_sign", filterSign));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserWalletTransactionsValidateBeforeCall(Integer userId, String currencyCode, String filterType, Long filterMaxDate, Long filterMinDate, String filterSign, Integer size, Integer page, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserWalletTransactions(Async)");
        }
        
        // verify the required parameter 'currencyCode' is set
        if (currencyCode == null) {
            throw new ApiException("Missing the required parameter 'currencyCode' when calling getUserWalletTransactions(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUserWalletTransactionsCall(userId, currencyCode, filterType, filterMaxDate, filterMinDate, filterSign, size, page, order, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a user&#39;s wallet transactions
     * 
     * @param userId The ID of the user for whom wallet transactions are being retrieved (required)
     * @param currencyCode Currency code of the user&#39;s wallet (required)
     * @param filterType Filter for transactions with specified type (optional)
     * @param filterMaxDate Filter for transactions from no earlier than the specified date as a unix timestamp in seconds (optional)
     * @param filterMinDate Filter for transactions from no later than the specified date as a unix timestamp in seconds (optional)
     * @param filterSign Filter for transactions with amount with the given sign.  Allowable values: (&#39;positive&#39;, &#39;negative&#39;) (optional)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @return PageResourceWalletTransactionResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageResourceWalletTransactionResource getUserWalletTransactions(Integer userId, String currencyCode, String filterType, Long filterMaxDate, Long filterMinDate, String filterSign, Integer size, Integer page, String order) throws ApiException {
        ApiResponse<PageResourceWalletTransactionResource> resp = getUserWalletTransactionsWithHttpInfo(userId, currencyCode, filterType, filterMaxDate, filterMinDate, filterSign, size, page, order);
        return resp.getData();
    }

    /**
     * Retrieve a user&#39;s wallet transactions
     * 
     * @param userId The ID of the user for whom wallet transactions are being retrieved (required)
     * @param currencyCode Currency code of the user&#39;s wallet (required)
     * @param filterType Filter for transactions with specified type (optional)
     * @param filterMaxDate Filter for transactions from no earlier than the specified date as a unix timestamp in seconds (optional)
     * @param filterMinDate Filter for transactions from no later than the specified date as a unix timestamp in seconds (optional)
     * @param filterSign Filter for transactions with amount with the given sign.  Allowable values: (&#39;positive&#39;, &#39;negative&#39;) (optional)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @return ApiResponse&lt;PageResourceWalletTransactionResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageResourceWalletTransactionResource> getUserWalletTransactionsWithHttpInfo(Integer userId, String currencyCode, String filterType, Long filterMaxDate, Long filterMinDate, String filterSign, Integer size, Integer page, String order) throws ApiException {
        com.squareup.okhttp.Call call = getUserWalletTransactionsValidateBeforeCall(userId, currencyCode, filterType, filterMaxDate, filterMinDate, filterSign, size, page, order, null, null);
        Type localVarReturnType = new TypeToken<PageResourceWalletTransactionResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a user&#39;s wallet transactions (asynchronously)
     * 
     * @param userId The ID of the user for whom wallet transactions are being retrieved (required)
     * @param currencyCode Currency code of the user&#39;s wallet (required)
     * @param filterType Filter for transactions with specified type (optional)
     * @param filterMaxDate Filter for transactions from no earlier than the specified date as a unix timestamp in seconds (optional)
     * @param filterMinDate Filter for transactions from no later than the specified date as a unix timestamp in seconds (optional)
     * @param filterSign Filter for transactions with amount with the given sign.  Allowable values: (&#39;positive&#39;, &#39;negative&#39;) (optional)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserWalletTransactionsAsync(Integer userId, String currencyCode, String filterType, Long filterMaxDate, Long filterMinDate, String filterSign, Integer size, Integer page, String order, final ApiCallback<PageResourceWalletTransactionResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserWalletTransactionsValidateBeforeCall(userId, currencyCode, filterType, filterMaxDate, filterMinDate, filterSign, size, page, order, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageResourceWalletTransactionResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUserWallets */
    private com.squareup.okhttp.Call getUserWalletsCall(Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/wallets"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserWalletsValidateBeforeCall(Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserWallets(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUserWalletsCall(userId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List all of a user&#39;s wallets
     * 
     * @param userId The ID of the user for whom wallets are being retrieved (required)
     * @return List&lt;SimpleWallet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SimpleWallet> getUserWallets(Integer userId) throws ApiException {
        ApiResponse<List<SimpleWallet>> resp = getUserWalletsWithHttpInfo(userId);
        return resp.getData();
    }

    /**
     * List all of a user&#39;s wallets
     * 
     * @param userId The ID of the user for whom wallets are being retrieved (required)
     * @return ApiResponse&lt;List&lt;SimpleWallet&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SimpleWallet>> getUserWalletsWithHttpInfo(Integer userId) throws ApiException {
        com.squareup.okhttp.Call call = getUserWalletsValidateBeforeCall(userId, null, null);
        Type localVarReturnType = new TypeToken<List<SimpleWallet>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all of a user&#39;s wallets (asynchronously)
     * 
     * @param userId The ID of the user for whom wallets are being retrieved (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserWalletsAsync(Integer userId, final ApiCallback<List<SimpleWallet>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserWalletsValidateBeforeCall(userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SimpleWallet>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getWalletBalances */
    private com.squareup.okhttp.Call getWalletBalancesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wallets/totals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWalletBalancesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getWalletBalancesCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves a summation of wallet balances by currency code
     * 
     * @return PageResourceWalletTotalResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageResourceWalletTotalResponse getWalletBalances() throws ApiException {
        ApiResponse<PageResourceWalletTotalResponse> resp = getWalletBalancesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieves a summation of wallet balances by currency code
     * 
     * @return ApiResponse&lt;PageResourceWalletTotalResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageResourceWalletTotalResponse> getWalletBalancesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getWalletBalancesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<PageResourceWalletTotalResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves a summation of wallet balances by currency code (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWalletBalancesAsync(final ApiCallback<PageResourceWalletTotalResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWalletBalancesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageResourceWalletTotalResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getWalletTransactions */
    private com.squareup.okhttp.Call getWalletTransactionsCall(Integer filterInvoice, String filterType, String filterDate, String filterSign, Integer filterUserId, String filterUsername, String filterDetails, String filterCurrencyCode, Integer size, Integer page, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wallets/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (filterInvoice != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_invoice", filterInvoice));
        if (filterType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_type", filterType));
        if (filterDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_date", filterDate));
        if (filterSign != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_sign", filterSign));
        if (filterUserId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_user_id", filterUserId));
        if (filterUsername != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_username", filterUsername));
        if (filterDetails != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_details", filterDetails));
        if (filterCurrencyCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_currency_code", filterCurrencyCode));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWalletTransactionsValidateBeforeCall(Integer filterInvoice, String filterType, String filterDate, String filterSign, Integer filterUserId, String filterUsername, String filterDetails, String filterCurrencyCode, Integer size, Integer page, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getWalletTransactionsCall(filterInvoice, filterType, filterDate, filterSign, filterUserId, filterUsername, filterDetails, filterCurrencyCode, size, page, order, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve wallet transactions across the system
     * 
     * @param filterInvoice Filter for transactions from a specific invoice (optional)
     * @param filterType Filter for transactions with specified type (optional)
     * @param filterDate A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
     * @param filterSign Filter for transactions with amount with the given sign (optional)
     * @param filterUserId Filter for transactions for specific userId (optional)
     * @param filterUsername Filter for transactions for specific username that start with the given string (optional)
     * @param filterDetails Filter for transactions for specific details that start with the given string (optional)
     * @param filterCurrencyCode Filter for transactions for specific currency code (optional)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @return PageResourceWalletTransactionResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageResourceWalletTransactionResource getWalletTransactions(Integer filterInvoice, String filterType, String filterDate, String filterSign, Integer filterUserId, String filterUsername, String filterDetails, String filterCurrencyCode, Integer size, Integer page, String order) throws ApiException {
        ApiResponse<PageResourceWalletTransactionResource> resp = getWalletTransactionsWithHttpInfo(filterInvoice, filterType, filterDate, filterSign, filterUserId, filterUsername, filterDetails, filterCurrencyCode, size, page, order);
        return resp.getData();
    }

    /**
     * Retrieve wallet transactions across the system
     * 
     * @param filterInvoice Filter for transactions from a specific invoice (optional)
     * @param filterType Filter for transactions with specified type (optional)
     * @param filterDate A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
     * @param filterSign Filter for transactions with amount with the given sign (optional)
     * @param filterUserId Filter for transactions for specific userId (optional)
     * @param filterUsername Filter for transactions for specific username that start with the given string (optional)
     * @param filterDetails Filter for transactions for specific details that start with the given string (optional)
     * @param filterCurrencyCode Filter for transactions for specific currency code (optional)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @return ApiResponse&lt;PageResourceWalletTransactionResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageResourceWalletTransactionResource> getWalletTransactionsWithHttpInfo(Integer filterInvoice, String filterType, String filterDate, String filterSign, Integer filterUserId, String filterUsername, String filterDetails, String filterCurrencyCode, Integer size, Integer page, String order) throws ApiException {
        com.squareup.okhttp.Call call = getWalletTransactionsValidateBeforeCall(filterInvoice, filterType, filterDate, filterSign, filterUserId, filterUsername, filterDetails, filterCurrencyCode, size, page, order, null, null);
        Type localVarReturnType = new TypeToken<PageResourceWalletTransactionResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve wallet transactions across the system (asynchronously)
     * 
     * @param filterInvoice Filter for transactions from a specific invoice (optional)
     * @param filterType Filter for transactions with specified type (optional)
     * @param filterDate A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
     * @param filterSign Filter for transactions with amount with the given sign (optional)
     * @param filterUserId Filter for transactions for specific userId (optional)
     * @param filterUsername Filter for transactions for specific username that start with the given string (optional)
     * @param filterDetails Filter for transactions for specific details that start with the given string (optional)
     * @param filterCurrencyCode Filter for transactions for specific currency code (optional)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWalletTransactionsAsync(Integer filterInvoice, String filterType, String filterDate, String filterSign, Integer filterUserId, String filterUsername, String filterDetails, String filterCurrencyCode, Integer size, Integer page, String order, final ApiCallback<PageResourceWalletTransactionResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWalletTransactionsValidateBeforeCall(filterInvoice, filterType, filterDate, filterSign, filterUserId, filterUsername, filterDetails, filterCurrencyCode, size, page, order, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageResourceWalletTransactionResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getWallets */
    private com.squareup.okhttp.Call getWalletsCall(Integer size, Integer page, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wallets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWalletsValidateBeforeCall(Integer size, Integer page, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getWalletsCall(size, page, order, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a list of wallets across the system
     * 
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @return PageResourceSimpleWallet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageResourceSimpleWallet getWallets(Integer size, Integer page, String order) throws ApiException {
        ApiResponse<PageResourceSimpleWallet> resp = getWalletsWithHttpInfo(size, page, order);
        return resp.getData();
    }

    /**
     * Retrieve a list of wallets across the system
     * 
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @return ApiResponse&lt;PageResourceSimpleWallet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageResourceSimpleWallet> getWalletsWithHttpInfo(Integer size, Integer page, String order) throws ApiException {
        com.squareup.okhttp.Call call = getWalletsValidateBeforeCall(size, page, order, null, null);
        Type localVarReturnType = new TypeToken<PageResourceSimpleWallet>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a list of wallets across the system (asynchronously)
     * 
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWalletsAsync(Integer size, Integer page, String order, final ApiCallback<PageResourceSimpleWallet> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWalletsValidateBeforeCall(size, page, order, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageResourceSimpleWallet>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateWalletBalance */
    private com.squareup.okhttp.Call updateWalletBalanceCall(Integer userId, String currencyCode, WalletAlterRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/wallets/{currency_code}/balance"
            .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "currency_code" + "\\}", apiClient.escapeString(currencyCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateWalletBalanceValidateBeforeCall(Integer userId, String currencyCode, WalletAlterRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateWalletBalance(Async)");
        }
        
        // verify the required parameter 'currencyCode' is set
        if (currencyCode == null) {
            throw new ApiException("Missing the required parameter 'currencyCode' when calling updateWalletBalance(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateWalletBalanceCall(userId, currencyCode, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates the balance for a user&#39;s wallet
     * 
     * @param userId The ID of the user for whom wallet is being modified (required)
     * @param currencyCode Currency code of the user&#39;s wallet (required)
     * @param request The requested balance modification to be made to the user&#39;s wallet (optional)
     * @return WalletTransactionResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WalletTransactionResource updateWalletBalance(Integer userId, String currencyCode, WalletAlterRequest request) throws ApiException {
        ApiResponse<WalletTransactionResource> resp = updateWalletBalanceWithHttpInfo(userId, currencyCode, request);
        return resp.getData();
    }

    /**
     * Updates the balance for a user&#39;s wallet
     * 
     * @param userId The ID of the user for whom wallet is being modified (required)
     * @param currencyCode Currency code of the user&#39;s wallet (required)
     * @param request The requested balance modification to be made to the user&#39;s wallet (optional)
     * @return ApiResponse&lt;WalletTransactionResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WalletTransactionResource> updateWalletBalanceWithHttpInfo(Integer userId, String currencyCode, WalletAlterRequest request) throws ApiException {
        com.squareup.okhttp.Call call = updateWalletBalanceValidateBeforeCall(userId, currencyCode, request, null, null);
        Type localVarReturnType = new TypeToken<WalletTransactionResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates the balance for a user&#39;s wallet (asynchronously)
     * 
     * @param userId The ID of the user for whom wallet is being modified (required)
     * @param currencyCode Currency code of the user&#39;s wallet (required)
     * @param request The requested balance modification to be made to the user&#39;s wallet (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateWalletBalanceAsync(Integer userId, String currencyCode, WalletAlterRequest request, final ApiCallback<WalletTransactionResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateWalletBalanceValidateBeforeCall(userId, currencyCode, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WalletTransactionResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
