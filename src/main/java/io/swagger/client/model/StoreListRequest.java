/*
 * Knetik Platform API Documentation Latest
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * StoreListRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2016-12-19T17:19:27.430-05:00")
public class StoreListRequest {
  @SerializedName("ignore_location")
  private Boolean ignoreLocation = null;

  @SerializedName("in_stock_only")
  private Boolean inStockOnly = null;

  @SerializedName("limit")
  private Integer limit = null;

  @SerializedName("page")
  private Integer page = null;

  @SerializedName("use_catalog")
  private Boolean useCatalog = null;

  public StoreListRequest ignoreLocation(Boolean ignoreLocation) {
    this.ignoreLocation = ignoreLocation;
    return this;
  }

   /**
   * Whether the location is ignored
   * @return ignoreLocation
  **/
  @ApiModelProperty(example = "false", value = "Whether the location is ignored")
  public Boolean getIgnoreLocation() {
    return ignoreLocation;
  }

  public void setIgnoreLocation(Boolean ignoreLocation) {
    this.ignoreLocation = ignoreLocation;
  }

  public StoreListRequest inStockOnly(Boolean inStockOnly) {
    this.inStockOnly = inStockOnly;
    return this;
  }

   /**
   * Whether the item is in stock
   * @return inStockOnly
  **/
  @ApiModelProperty(example = "false", value = "Whether the item is in stock")
  public Boolean getInStockOnly() {
    return inStockOnly;
  }

  public void setInStockOnly(Boolean inStockOnly) {
    this.inStockOnly = inStockOnly;
  }

  public StoreListRequest limit(Integer limit) {
    this.limit = limit;
    return this;
  }

   /**
   * The amount of items returned
   * @return limit
  **/
  @ApiModelProperty(example = "null", value = "The amount of items returned")
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }

  public StoreListRequest page(Integer page) {
    this.page = page;
    return this;
  }

   /**
   * The page of the request
   * @return page
  **/
  @ApiModelProperty(example = "null", value = "The page of the request")
  public Integer getPage() {
    return page;
  }

  public void setPage(Integer page) {
    this.page = page;
  }

  public StoreListRequest useCatalog(Boolean useCatalog) {
    this.useCatalog = useCatalog;
    return this;
  }

   /**
   * Whether the catalog is used
   * @return useCatalog
  **/
  @ApiModelProperty(example = "false", value = "Whether the catalog is used")
  public Boolean getUseCatalog() {
    return useCatalog;
  }

  public void setUseCatalog(Boolean useCatalog) {
    this.useCatalog = useCatalog;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StoreListRequest storeListRequest = (StoreListRequest) o;
    return Objects.equals(this.ignoreLocation, storeListRequest.ignoreLocation) &&
        Objects.equals(this.inStockOnly, storeListRequest.inStockOnly) &&
        Objects.equals(this.limit, storeListRequest.limit) &&
        Objects.equals(this.page, storeListRequest.page) &&
        Objects.equals(this.useCatalog, storeListRequest.useCatalog);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ignoreLocation, inStockOnly, limit, page, useCatalog);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StoreListRequest {\n");
    
    sb.append("    ignoreLocation: ").append(toIndentedString(ignoreLocation)).append("\n");
    sb.append("    inStockOnly: ").append(toIndentedString(inStockOnly)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    useCatalog: ").append(toIndentedString(useCatalog)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

