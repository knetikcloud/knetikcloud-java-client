/*
 * Knetik Platform API Documentation Latest
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.InventorySubscriptionResource;
import io.swagger.client.model.InvoiceResource;
import io.swagger.client.model.ReactivateSubscriptionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersSubscriptionsApi {
    private ApiClient apiClient;

    public UsersSubscriptionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersSubscriptionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getSubscriptionDetailsUsingGET */
    private com.squareup.okhttp.Call getSubscriptionDetailsUsingGETCall(Integer userId, Integer inventoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/subscriptions/{inventory_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
        .replaceAll("\\{" + "inventory_id" + "\\}", apiClient.escapeString(inventoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSubscriptionDetailsUsingGETValidateBeforeCall(Integer userId, Integer inventoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getSubscriptionDetailsUsingGET(Async)");
        }
        
        // verify the required parameter 'inventoryId' is set
        if (inventoryId == null) {
            throw new ApiException("Missing the required parameter 'inventoryId' when calling getSubscriptionDetailsUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSubscriptionDetailsUsingGETCall(userId, inventoryId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get details about a user&#39;s subscription
     * 
     * @param userId The id of the user (required)
     * @param inventoryId The id of the user&#39;s inventory (required)
     * @return InventorySubscriptionResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InventorySubscriptionResource getSubscriptionDetailsUsingGET(Integer userId, Integer inventoryId) throws ApiException {
        ApiResponse<InventorySubscriptionResource> resp = getSubscriptionDetailsUsingGETWithHttpInfo(userId, inventoryId);
        return resp.getData();
    }

    /**
     * Get details about a user&#39;s subscription
     * 
     * @param userId The id of the user (required)
     * @param inventoryId The id of the user&#39;s inventory (required)
     * @return ApiResponse&lt;InventorySubscriptionResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InventorySubscriptionResource> getSubscriptionDetailsUsingGETWithHttpInfo(Integer userId, Integer inventoryId) throws ApiException {
        com.squareup.okhttp.Call call = getSubscriptionDetailsUsingGETValidateBeforeCall(userId, inventoryId, null, null);
        Type localVarReturnType = new TypeToken<InventorySubscriptionResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get details about a user&#39;s subscription (asynchronously)
     * 
     * @param userId The id of the user (required)
     * @param inventoryId The id of the user&#39;s inventory (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSubscriptionDetailsUsingGETAsync(Integer userId, Integer inventoryId, final ApiCallback<InventorySubscriptionResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSubscriptionDetailsUsingGETValidateBeforeCall(userId, inventoryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InventorySubscriptionResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getSubscriptionDetailsUsingGET1 */
    private com.squareup.okhttp.Call getSubscriptionDetailsUsingGET1Call(Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/subscriptions".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSubscriptionDetailsUsingGET1ValidateBeforeCall(Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getSubscriptionDetailsUsingGET1(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSubscriptionDetailsUsingGET1Call(userId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get details about a user&#39;s subscriptions
     * 
     * @param userId The id of the user (required)
     * @return List&lt;InventorySubscriptionResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InventorySubscriptionResource> getSubscriptionDetailsUsingGET1(Integer userId) throws ApiException {
        ApiResponse<List<InventorySubscriptionResource>> resp = getSubscriptionDetailsUsingGET1WithHttpInfo(userId);
        return resp.getData();
    }

    /**
     * Get details about a user&#39;s subscriptions
     * 
     * @param userId The id of the user (required)
     * @return ApiResponse&lt;List&lt;InventorySubscriptionResource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InventorySubscriptionResource>> getSubscriptionDetailsUsingGET1WithHttpInfo(Integer userId) throws ApiException {
        com.squareup.okhttp.Call call = getSubscriptionDetailsUsingGET1ValidateBeforeCall(userId, null, null);
        Type localVarReturnType = new TypeToken<List<InventorySubscriptionResource>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get details about a user&#39;s subscriptions (asynchronously)
     * 
     * @param userId The id of the user (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSubscriptionDetailsUsingGET1Async(Integer userId, final ApiCallback<List<InventorySubscriptionResource>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSubscriptionDetailsUsingGET1ValidateBeforeCall(userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InventorySubscriptionResource>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for reactivateUsingPOST */
    private com.squareup.okhttp.Call reactivateUsingPOSTCall(Integer userId, Integer inventoryId, ReactivateSubscriptionRequest reactivateSubscriptionRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reactivateSubscriptionRequest;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/subscriptions/{inventory_id}/reactivate".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
        .replaceAll("\\{" + "inventory_id" + "\\}", apiClient.escapeString(inventoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reactivateUsingPOSTValidateBeforeCall(Integer userId, Integer inventoryId, ReactivateSubscriptionRequest reactivateSubscriptionRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling reactivateUsingPOST(Async)");
        }
        
        // verify the required parameter 'inventoryId' is set
        if (inventoryId == null) {
            throw new ApiException("Missing the required parameter 'inventoryId' when calling reactivateUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = reactivateUsingPOSTCall(userId, inventoryId, reactivateSubscriptionRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Reactivate a subscription and charge fee
     * 
     * @param userId The id of the user (required)
     * @param inventoryId The id of the user&#39;s inventory (required)
     * @param reactivateSubscriptionRequest The reactivate subscription request object inventory (optional)
     * @return InvoiceResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InvoiceResource reactivateUsingPOST(Integer userId, Integer inventoryId, ReactivateSubscriptionRequest reactivateSubscriptionRequest) throws ApiException {
        ApiResponse<InvoiceResource> resp = reactivateUsingPOSTWithHttpInfo(userId, inventoryId, reactivateSubscriptionRequest);
        return resp.getData();
    }

    /**
     * Reactivate a subscription and charge fee
     * 
     * @param userId The id of the user (required)
     * @param inventoryId The id of the user&#39;s inventory (required)
     * @param reactivateSubscriptionRequest The reactivate subscription request object inventory (optional)
     * @return ApiResponse&lt;InvoiceResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InvoiceResource> reactivateUsingPOSTWithHttpInfo(Integer userId, Integer inventoryId, ReactivateSubscriptionRequest reactivateSubscriptionRequest) throws ApiException {
        com.squareup.okhttp.Call call = reactivateUsingPOSTValidateBeforeCall(userId, inventoryId, reactivateSubscriptionRequest, null, null);
        Type localVarReturnType = new TypeToken<InvoiceResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Reactivate a subscription and charge fee (asynchronously)
     * 
     * @param userId The id of the user (required)
     * @param inventoryId The id of the user&#39;s inventory (required)
     * @param reactivateSubscriptionRequest The reactivate subscription request object inventory (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reactivateUsingPOSTAsync(Integer userId, Integer inventoryId, ReactivateSubscriptionRequest reactivateSubscriptionRequest, final ApiCallback<InvoiceResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reactivateUsingPOSTValidateBeforeCall(userId, inventoryId, reactivateSubscriptionRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InvoiceResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for setBillDateUsingPUT */
    private com.squareup.okhttp.Call setBillDateUsingPUTCall(Integer userId, Integer inventoryId, Long billDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = billDate;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/subscriptions/{inventory_id}/bill-date".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
        .replaceAll("\\{" + "inventory_id" + "\\}", apiClient.escapeString(inventoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setBillDateUsingPUTValidateBeforeCall(Integer userId, Integer inventoryId, Long billDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling setBillDateUsingPUT(Async)");
        }
        
        // verify the required parameter 'inventoryId' is set
        if (inventoryId == null) {
            throw new ApiException("Missing the required parameter 'inventoryId' when calling setBillDateUsingPUT(Async)");
        }
        
        // verify the required parameter 'billDate' is set
        if (billDate == null) {
            throw new ApiException("Missing the required parameter 'billDate' when calling setBillDateUsingPUT(Async)");
        }
        
        
        com.squareup.okhttp.Call call = setBillDateUsingPUTCall(userId, inventoryId, billDate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set a new date to bill a subscription on
     * 
     * @param userId The id of the user (required)
     * @param inventoryId The id of the user&#39;s inventory (required)
     * @param billDate The new bill date. Unix timestamp in seconds (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setBillDateUsingPUT(Integer userId, Integer inventoryId, Long billDate) throws ApiException {
        setBillDateUsingPUTWithHttpInfo(userId, inventoryId, billDate);
    }

    /**
     * Set a new date to bill a subscription on
     * 
     * @param userId The id of the user (required)
     * @param inventoryId The id of the user&#39;s inventory (required)
     * @param billDate The new bill date. Unix timestamp in seconds (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setBillDateUsingPUTWithHttpInfo(Integer userId, Integer inventoryId, Long billDate) throws ApiException {
        com.squareup.okhttp.Call call = setBillDateUsingPUTValidateBeforeCall(userId, inventoryId, billDate, null, null);
        return apiClient.execute(call);
    }

    /**
     * Set a new date to bill a subscription on (asynchronously)
     * 
     * @param userId The id of the user (required)
     * @param inventoryId The id of the user&#39;s inventory (required)
     * @param billDate The new bill date. Unix timestamp in seconds (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setBillDateUsingPUTAsync(Integer userId, Integer inventoryId, Long billDate, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setBillDateUsingPUTValidateBeforeCall(userId, inventoryId, billDate, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for setPaymentMethodUsingPUT */
    private com.squareup.okhttp.Call setPaymentMethodUsingPUTCall(Integer userId, Integer inventoryId, Integer paymentMethodId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = paymentMethodId;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/subscriptions/{inventory_id}/payment-method".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
        .replaceAll("\\{" + "inventory_id" + "\\}", apiClient.escapeString(inventoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setPaymentMethodUsingPUTValidateBeforeCall(Integer userId, Integer inventoryId, Integer paymentMethodId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling setPaymentMethodUsingPUT(Async)");
        }
        
        // verify the required parameter 'inventoryId' is set
        if (inventoryId == null) {
            throw new ApiException("Missing the required parameter 'inventoryId' when calling setPaymentMethodUsingPUT(Async)");
        }
        
        
        com.squareup.okhttp.Call call = setPaymentMethodUsingPUTCall(userId, inventoryId, paymentMethodId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set the payment method to use for a subscription
     * May send null to use floating default
     * @param userId The id of the user (required)
     * @param inventoryId The id of the user&#39;s inventory (required)
     * @param paymentMethodId The id of the payment method (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setPaymentMethodUsingPUT(Integer userId, Integer inventoryId, Integer paymentMethodId) throws ApiException {
        setPaymentMethodUsingPUTWithHttpInfo(userId, inventoryId, paymentMethodId);
    }

    /**
     * Set the payment method to use for a subscription
     * May send null to use floating default
     * @param userId The id of the user (required)
     * @param inventoryId The id of the user&#39;s inventory (required)
     * @param paymentMethodId The id of the payment method (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setPaymentMethodUsingPUTWithHttpInfo(Integer userId, Integer inventoryId, Integer paymentMethodId) throws ApiException {
        com.squareup.okhttp.Call call = setPaymentMethodUsingPUTValidateBeforeCall(userId, inventoryId, paymentMethodId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Set the payment method to use for a subscription (asynchronously)
     * May send null to use floating default
     * @param userId The id of the user (required)
     * @param inventoryId The id of the user&#39;s inventory (required)
     * @param paymentMethodId The id of the payment method (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setPaymentMethodUsingPUTAsync(Integer userId, Integer inventoryId, Integer paymentMethodId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setPaymentMethodUsingPUTValidateBeforeCall(userId, inventoryId, paymentMethodId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for setStatusUsingPUT */
    private com.squareup.okhttp.Call setStatusUsingPUTCall(Integer userId, Integer inventoryId, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = status;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/subscriptions/{inventory_id}/status".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
        .replaceAll("\\{" + "inventory_id" + "\\}", apiClient.escapeString(inventoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setStatusUsingPUTValidateBeforeCall(Integer userId, Integer inventoryId, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling setStatusUsingPUT(Async)");
        }
        
        // verify the required parameter 'inventoryId' is set
        if (inventoryId == null) {
            throw new ApiException("Missing the required parameter 'inventoryId' when calling setStatusUsingPUT(Async)");
        }
        
        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling setStatusUsingPUT(Async)");
        }
        
        
        com.squareup.okhttp.Call call = setStatusUsingPUTCall(userId, inventoryId, status, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set the status of a subscription
     * The body is a json string (put in quotes) that should match a desired invoice status type. Note that the new status may be blocked if the system is not configured to allow the current status to be changed to the new, to enforce proper flow. The default options for statuses are shown below but may be altered for special use cases
     * @param userId The id of the user (required)
     * @param inventoryId The id of the user&#39;s inventory (required)
     * @param status The new status for the subscription. Actual options may differ from the indicated set if the invoice status type data has been altered.  Allowable values: (&#39;current&#39;, &#39;canceled&#39;, &#39;stopped&#39;, &#39;payment_failed&#39;, &#39;suspended&#39;) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setStatusUsingPUT(Integer userId, Integer inventoryId, String status) throws ApiException {
        setStatusUsingPUTWithHttpInfo(userId, inventoryId, status);
    }

    /**
     * Set the status of a subscription
     * The body is a json string (put in quotes) that should match a desired invoice status type. Note that the new status may be blocked if the system is not configured to allow the current status to be changed to the new, to enforce proper flow. The default options for statuses are shown below but may be altered for special use cases
     * @param userId The id of the user (required)
     * @param inventoryId The id of the user&#39;s inventory (required)
     * @param status The new status for the subscription. Actual options may differ from the indicated set if the invoice status type data has been altered.  Allowable values: (&#39;current&#39;, &#39;canceled&#39;, &#39;stopped&#39;, &#39;payment_failed&#39;, &#39;suspended&#39;) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setStatusUsingPUTWithHttpInfo(Integer userId, Integer inventoryId, String status) throws ApiException {
        com.squareup.okhttp.Call call = setStatusUsingPUTValidateBeforeCall(userId, inventoryId, status, null, null);
        return apiClient.execute(call);
    }

    /**
     * Set the status of a subscription (asynchronously)
     * The body is a json string (put in quotes) that should match a desired invoice status type. Note that the new status may be blocked if the system is not configured to allow the current status to be changed to the new, to enforce proper flow. The default options for statuses are shown below but may be altered for special use cases
     * @param userId The id of the user (required)
     * @param inventoryId The id of the user&#39;s inventory (required)
     * @param status The new status for the subscription. Actual options may differ from the indicated set if the invoice status type data has been altered.  Allowable values: (&#39;current&#39;, &#39;canceled&#39;, &#39;stopped&#39;, &#39;payment_failed&#39;, &#39;suspended&#39;) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setStatusUsingPUTAsync(Integer userId, Integer inventoryId, String status, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setStatusUsingPUTValidateBeforeCall(userId, inventoryId, status, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for setUserPlanUsingPUT */
    private com.squareup.okhttp.Call setUserPlanUsingPUTCall(Integer userId, Integer inventoryId, String planId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = planId;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/subscriptions/{inventory_id}/plan".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
        .replaceAll("\\{" + "inventory_id" + "\\}", apiClient.escapeString(inventoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setUserPlanUsingPUTValidateBeforeCall(Integer userId, Integer inventoryId, String planId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling setUserPlanUsingPUT(Async)");
        }
        
        // verify the required parameter 'inventoryId' is set
        if (inventoryId == null) {
            throw new ApiException("Missing the required parameter 'inventoryId' when calling setUserPlanUsingPUT(Async)");
        }
        
        
        com.squareup.okhttp.Call call = setUserPlanUsingPUTCall(userId, inventoryId, planId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set a new subscription plan for a user
     * 
     * @param userId The id of the user (required)
     * @param inventoryId The id of the user&#39;s inventory (required)
     * @param planId The id of the new plan. Must be from the same subscription (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setUserPlanUsingPUT(Integer userId, Integer inventoryId, String planId) throws ApiException {
        setUserPlanUsingPUTWithHttpInfo(userId, inventoryId, planId);
    }

    /**
     * Set a new subscription plan for a user
     * 
     * @param userId The id of the user (required)
     * @param inventoryId The id of the user&#39;s inventory (required)
     * @param planId The id of the new plan. Must be from the same subscription (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setUserPlanUsingPUTWithHttpInfo(Integer userId, Integer inventoryId, String planId) throws ApiException {
        com.squareup.okhttp.Call call = setUserPlanUsingPUTValidateBeforeCall(userId, inventoryId, planId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Set a new subscription plan for a user (asynchronously)
     * 
     * @param userId The id of the user (required)
     * @param inventoryId The id of the user&#39;s inventory (required)
     * @param planId The id of the new plan. Must be from the same subscription (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setUserPlanUsingPUTAsync(Integer userId, Integer inventoryId, String planId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setUserPlanUsingPUTValidateBeforeCall(userId, inventoryId, planId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
