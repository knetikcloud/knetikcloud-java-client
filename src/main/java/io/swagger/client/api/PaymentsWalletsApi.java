/*
 * Knetik Platform API Documentation Latest
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.PageResourceSimpleWallet;
import io.swagger.client.model.PageResourceWalletTotalResponse;
import io.swagger.client.model.PageResourceWalletTransactionResource;
import io.swagger.client.model.SimpleWallet;
import io.swagger.client.model.WalletAlterRequest;
import io.swagger.client.model.WalletTransactionResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PaymentsWalletsApi {
    private ApiClient apiClient;

    public PaymentsWalletsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentsWalletsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getWalletTotalsUsingGET */
    private com.squareup.okhttp.Call getWalletTotalsUsingGETCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wallets/totals".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "knetik_oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWalletTotalsUsingGETValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getWalletTotalsUsingGETCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieves a summation of wallet balances by currency code
     * 
     * @return PageResourceWalletTotalResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageResourceWalletTotalResponse getWalletTotalsUsingGET() throws ApiException {
        ApiResponse<PageResourceWalletTotalResponse> resp = getWalletTotalsUsingGETWithHttpInfo();
        return resp.getData();
    }

    /**
     * Retrieves a summation of wallet balances by currency code
     * 
     * @return ApiResponse&lt;PageResourceWalletTotalResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageResourceWalletTotalResponse> getWalletTotalsUsingGETWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getWalletTotalsUsingGETValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<PageResourceWalletTotalResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves a summation of wallet balances by currency code (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWalletTotalsUsingGETAsync(final ApiCallback<PageResourceWalletTotalResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWalletTotalsUsingGETValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageResourceWalletTotalResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getWalletUsingGET */
    private com.squareup.okhttp.Call getWalletUsingGETCall(Integer userId, String currencyCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/wallets/{currency_code}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
        .replaceAll("\\{" + "currency_code" + "\\}", apiClient.escapeString(currencyCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "knetik_oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWalletUsingGETValidateBeforeCall(Integer userId, String currencyCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getWalletUsingGET(Async)");
        }
        
        // verify the required parameter 'currencyCode' is set
        if (currencyCode == null) {
            throw new ApiException("Missing the required parameter 'currencyCode' when calling getWalletUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getWalletUsingGETCall(userId, currencyCode, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns the user&#39;s wallet for the given currency code
     * 
     * @param userId The ID of the user for whom wallet is being retrieved (required)
     * @param currencyCode Currency code of the user&#39;s wallet (required)
     * @return SimpleWallet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SimpleWallet getWalletUsingGET(Integer userId, String currencyCode) throws ApiException {
        ApiResponse<SimpleWallet> resp = getWalletUsingGETWithHttpInfo(userId, currencyCode);
        return resp.getData();
    }

    /**
     * Returns the user&#39;s wallet for the given currency code
     * 
     * @param userId The ID of the user for whom wallet is being retrieved (required)
     * @param currencyCode Currency code of the user&#39;s wallet (required)
     * @return ApiResponse&lt;SimpleWallet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SimpleWallet> getWalletUsingGETWithHttpInfo(Integer userId, String currencyCode) throws ApiException {
        com.squareup.okhttp.Call call = getWalletUsingGETValidateBeforeCall(userId, currencyCode, null, null);
        Type localVarReturnType = new TypeToken<SimpleWallet>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns the user&#39;s wallet for the given currency code (asynchronously)
     * 
     * @param userId The ID of the user for whom wallet is being retrieved (required)
     * @param currencyCode Currency code of the user&#39;s wallet (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWalletUsingGETAsync(Integer userId, String currencyCode, final ApiCallback<SimpleWallet> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWalletUsingGETValidateBeforeCall(userId, currencyCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SimpleWallet>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getWalletsUsingGET */
    private com.squareup.okhttp.Call getWalletsUsingGETCall(Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/wallets".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "knetik_oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWalletsUsingGETValidateBeforeCall(Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getWalletsUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getWalletsUsingGETCall(userId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List all of a user&#39;s wallets
     * 
     * @param userId The ID of the user for whom wallets are being retrieved (required)
     * @return List&lt;SimpleWallet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SimpleWallet> getWalletsUsingGET(Integer userId) throws ApiException {
        ApiResponse<List<SimpleWallet>> resp = getWalletsUsingGETWithHttpInfo(userId);
        return resp.getData();
    }

    /**
     * List all of a user&#39;s wallets
     * 
     * @param userId The ID of the user for whom wallets are being retrieved (required)
     * @return ApiResponse&lt;List&lt;SimpleWallet&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SimpleWallet>> getWalletsUsingGETWithHttpInfo(Integer userId) throws ApiException {
        com.squareup.okhttp.Call call = getWalletsUsingGETValidateBeforeCall(userId, null, null);
        Type localVarReturnType = new TypeToken<List<SimpleWallet>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all of a user&#39;s wallets (asynchronously)
     * 
     * @param userId The ID of the user for whom wallets are being retrieved (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWalletsUsingGETAsync(Integer userId, final ApiCallback<List<SimpleWallet>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWalletsUsingGETValidateBeforeCall(userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SimpleWallet>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getWalletsUsingGET1 */
    private com.squareup.okhttp.Call getWalletsUsingGET1Call(Integer size, Integer page, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wallets".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "knetik_oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWalletsUsingGET1ValidateBeforeCall(Integer size, Integer page, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getWalletsUsingGET1Call(size, page, order, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a list of wallets across the system
     * 
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @return PageResourceSimpleWallet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageResourceSimpleWallet getWalletsUsingGET1(Integer size, Integer page, String order) throws ApiException {
        ApiResponse<PageResourceSimpleWallet> resp = getWalletsUsingGET1WithHttpInfo(size, page, order);
        return resp.getData();
    }

    /**
     * Retrieve a list of wallets across the system
     * 
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @return ApiResponse&lt;PageResourceSimpleWallet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageResourceSimpleWallet> getWalletsUsingGET1WithHttpInfo(Integer size, Integer page, String order) throws ApiException {
        com.squareup.okhttp.Call call = getWalletsUsingGET1ValidateBeforeCall(size, page, order, null, null);
        Type localVarReturnType = new TypeToken<PageResourceSimpleWallet>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a list of wallets across the system (asynchronously)
     * 
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWalletsUsingGET1Async(Integer size, Integer page, String order, final ApiCallback<PageResourceSimpleWallet> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWalletsUsingGET1ValidateBeforeCall(size, page, order, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageResourceSimpleWallet>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for transactionHistoryUsingGET */
    private com.squareup.okhttp.Call transactionHistoryUsingGETCall(Integer filterInvoice, String filterType, Long filterMaxDate, Long filterMinDate, String filterSign, Integer filterUserId, String filterUsername, String filterDetails, String filterCurrencyCode, Integer size, Integer page, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/wallets/transactions".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (filterInvoice != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_invoice", filterInvoice));
        if (filterType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_type", filterType));
        if (filterMaxDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_max_date", filterMaxDate));
        if (filterMinDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_min_date", filterMinDate));
        if (filterSign != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_sign", filterSign));
        if (filterUserId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_user_id", filterUserId));
        if (filterUsername != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_username", filterUsername));
        if (filterDetails != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_details", filterDetails));
        if (filterCurrencyCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_currency_code", filterCurrencyCode));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "knetik_oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transactionHistoryUsingGETValidateBeforeCall(Integer filterInvoice, String filterType, Long filterMaxDate, Long filterMinDate, String filterSign, Integer filterUserId, String filterUsername, String filterDetails, String filterCurrencyCode, Integer size, Integer page, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = transactionHistoryUsingGETCall(filterInvoice, filterType, filterMaxDate, filterMinDate, filterSign, filterUserId, filterUsername, filterDetails, filterCurrencyCode, size, page, order, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve wallet transactions across the system
     * 
     * @param filterInvoice Filter for transactions from a specific invoice (optional)
     * @param filterType Filter for transactions with specified type (optional)
     * @param filterMaxDate Filter for transactions from no earlier than the specified date as a unix timestamp in seconds (optional)
     * @param filterMinDate Filter for transactions from no later than the specified date as a unix timestamp in seconds (optional)
     * @param filterSign Filter for transactions with amount with the given sign (optional)
     * @param filterUserId Filter for transactions for specific userId (optional)
     * @param filterUsername Filter for transactions for specific username that start with the given string (optional)
     * @param filterDetails Filter for transactions for specific details that start with the given string (optional)
     * @param filterCurrencyCode Filter for transactions for specific currency code (optional)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @return PageResourceWalletTransactionResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageResourceWalletTransactionResource transactionHistoryUsingGET(Integer filterInvoice, String filterType, Long filterMaxDate, Long filterMinDate, String filterSign, Integer filterUserId, String filterUsername, String filterDetails, String filterCurrencyCode, Integer size, Integer page, String order) throws ApiException {
        ApiResponse<PageResourceWalletTransactionResource> resp = transactionHistoryUsingGETWithHttpInfo(filterInvoice, filterType, filterMaxDate, filterMinDate, filterSign, filterUserId, filterUsername, filterDetails, filterCurrencyCode, size, page, order);
        return resp.getData();
    }

    /**
     * Retrieve wallet transactions across the system
     * 
     * @param filterInvoice Filter for transactions from a specific invoice (optional)
     * @param filterType Filter for transactions with specified type (optional)
     * @param filterMaxDate Filter for transactions from no earlier than the specified date as a unix timestamp in seconds (optional)
     * @param filterMinDate Filter for transactions from no later than the specified date as a unix timestamp in seconds (optional)
     * @param filterSign Filter for transactions with amount with the given sign (optional)
     * @param filterUserId Filter for transactions for specific userId (optional)
     * @param filterUsername Filter for transactions for specific username that start with the given string (optional)
     * @param filterDetails Filter for transactions for specific details that start with the given string (optional)
     * @param filterCurrencyCode Filter for transactions for specific currency code (optional)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @return ApiResponse&lt;PageResourceWalletTransactionResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageResourceWalletTransactionResource> transactionHistoryUsingGETWithHttpInfo(Integer filterInvoice, String filterType, Long filterMaxDate, Long filterMinDate, String filterSign, Integer filterUserId, String filterUsername, String filterDetails, String filterCurrencyCode, Integer size, Integer page, String order) throws ApiException {
        com.squareup.okhttp.Call call = transactionHistoryUsingGETValidateBeforeCall(filterInvoice, filterType, filterMaxDate, filterMinDate, filterSign, filterUserId, filterUsername, filterDetails, filterCurrencyCode, size, page, order, null, null);
        Type localVarReturnType = new TypeToken<PageResourceWalletTransactionResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve wallet transactions across the system (asynchronously)
     * 
     * @param filterInvoice Filter for transactions from a specific invoice (optional)
     * @param filterType Filter for transactions with specified type (optional)
     * @param filterMaxDate Filter for transactions from no earlier than the specified date as a unix timestamp in seconds (optional)
     * @param filterMinDate Filter for transactions from no later than the specified date as a unix timestamp in seconds (optional)
     * @param filterSign Filter for transactions with amount with the given sign (optional)
     * @param filterUserId Filter for transactions for specific userId (optional)
     * @param filterUsername Filter for transactions for specific username that start with the given string (optional)
     * @param filterDetails Filter for transactions for specific details that start with the given string (optional)
     * @param filterCurrencyCode Filter for transactions for specific currency code (optional)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transactionHistoryUsingGETAsync(Integer filterInvoice, String filterType, Long filterMaxDate, Long filterMinDate, String filterSign, Integer filterUserId, String filterUsername, String filterDetails, String filterCurrencyCode, Integer size, Integer page, String order, final ApiCallback<PageResourceWalletTransactionResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transactionHistoryUsingGETValidateBeforeCall(filterInvoice, filterType, filterMaxDate, filterMinDate, filterSign, filterUserId, filterUsername, filterDetails, filterCurrencyCode, size, page, order, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageResourceWalletTransactionResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateBalanceUsingPUT */
    private com.squareup.okhttp.Call updateBalanceUsingPUTCall(Integer userId, String currencyCode, WalletAlterRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/wallets/{currency_code}/balance".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
        .replaceAll("\\{" + "currency_code" + "\\}", apiClient.escapeString(currencyCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "knetik_oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBalanceUsingPUTValidateBeforeCall(Integer userId, String currencyCode, WalletAlterRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateBalanceUsingPUT(Async)");
        }
        
        // verify the required parameter 'currencyCode' is set
        if (currencyCode == null) {
            throw new ApiException("Missing the required parameter 'currencyCode' when calling updateBalanceUsingPUT(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateBalanceUsingPUTCall(userId, currencyCode, request, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates the balance for a user&#39;s wallet
     * 
     * @param userId The ID of the user for whom wallet is being modified (required)
     * @param currencyCode Currency code of the user&#39;s wallet (required)
     * @param request The requested balance modification to be made to the user&#39;s wallet (optional)
     * @return WalletTransactionResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WalletTransactionResource updateBalanceUsingPUT(Integer userId, String currencyCode, WalletAlterRequest request) throws ApiException {
        ApiResponse<WalletTransactionResource> resp = updateBalanceUsingPUTWithHttpInfo(userId, currencyCode, request);
        return resp.getData();
    }

    /**
     * Updates the balance for a user&#39;s wallet
     * 
     * @param userId The ID of the user for whom wallet is being modified (required)
     * @param currencyCode Currency code of the user&#39;s wallet (required)
     * @param request The requested balance modification to be made to the user&#39;s wallet (optional)
     * @return ApiResponse&lt;WalletTransactionResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WalletTransactionResource> updateBalanceUsingPUTWithHttpInfo(Integer userId, String currencyCode, WalletAlterRequest request) throws ApiException {
        com.squareup.okhttp.Call call = updateBalanceUsingPUTValidateBeforeCall(userId, currencyCode, request, null, null);
        Type localVarReturnType = new TypeToken<WalletTransactionResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates the balance for a user&#39;s wallet (asynchronously)
     * 
     * @param userId The ID of the user for whom wallet is being modified (required)
     * @param currencyCode Currency code of the user&#39;s wallet (required)
     * @param request The requested balance modification to be made to the user&#39;s wallet (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBalanceUsingPUTAsync(Integer userId, String currencyCode, WalletAlterRequest request, final ApiCallback<WalletTransactionResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBalanceUsingPUTValidateBeforeCall(userId, currencyCode, request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WalletTransactionResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for userTransactionHistoryUsingGET */
    private com.squareup.okhttp.Call userTransactionHistoryUsingGETCall(Integer userId, String currencyCode, String filterType, Long filterMaxDate, Long filterMinDate, String filterSign, Integer size, Integer page, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/wallets/{currency_code}/transactions".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
        .replaceAll("\\{" + "currency_code" + "\\}", apiClient.escapeString(currencyCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (filterType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_type", filterType));
        if (filterMaxDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_max_date", filterMaxDate));
        if (filterMinDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_min_date", filterMinDate));
        if (filterSign != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_sign", filterSign));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "knetik_oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userTransactionHistoryUsingGETValidateBeforeCall(Integer userId, String currencyCode, String filterType, Long filterMaxDate, Long filterMinDate, String filterSign, Integer size, Integer page, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling userTransactionHistoryUsingGET(Async)");
        }
        
        // verify the required parameter 'currencyCode' is set
        if (currencyCode == null) {
            throw new ApiException("Missing the required parameter 'currencyCode' when calling userTransactionHistoryUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = userTransactionHistoryUsingGETCall(userId, currencyCode, filterType, filterMaxDate, filterMinDate, filterSign, size, page, order, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a user&#39;s wallet transactions
     * 
     * @param userId The ID of the user for whom wallet transactions are being retrieved (required)
     * @param currencyCode Currency code of the user&#39;s wallet (required)
     * @param filterType Filter for transactions with specified type (optional)
     * @param filterMaxDate Filter for transactions from no earlier than the specified date as a unix timestamp in seconds (optional)
     * @param filterMinDate Filter for transactions from no later than the specified date as a unix timestamp in seconds (optional)
     * @param filterSign Filter for transactions with amount with the given sign.  Allowable values: (&#39;positive&#39;, &#39;negative&#39;) (optional)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @return PageResourceWalletTransactionResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageResourceWalletTransactionResource userTransactionHistoryUsingGET(Integer userId, String currencyCode, String filterType, Long filterMaxDate, Long filterMinDate, String filterSign, Integer size, Integer page, String order) throws ApiException {
        ApiResponse<PageResourceWalletTransactionResource> resp = userTransactionHistoryUsingGETWithHttpInfo(userId, currencyCode, filterType, filterMaxDate, filterMinDate, filterSign, size, page, order);
        return resp.getData();
    }

    /**
     * Retrieve a user&#39;s wallet transactions
     * 
     * @param userId The ID of the user for whom wallet transactions are being retrieved (required)
     * @param currencyCode Currency code of the user&#39;s wallet (required)
     * @param filterType Filter for transactions with specified type (optional)
     * @param filterMaxDate Filter for transactions from no earlier than the specified date as a unix timestamp in seconds (optional)
     * @param filterMinDate Filter for transactions from no later than the specified date as a unix timestamp in seconds (optional)
     * @param filterSign Filter for transactions with amount with the given sign.  Allowable values: (&#39;positive&#39;, &#39;negative&#39;) (optional)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @return ApiResponse&lt;PageResourceWalletTransactionResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageResourceWalletTransactionResource> userTransactionHistoryUsingGETWithHttpInfo(Integer userId, String currencyCode, String filterType, Long filterMaxDate, Long filterMinDate, String filterSign, Integer size, Integer page, String order) throws ApiException {
        com.squareup.okhttp.Call call = userTransactionHistoryUsingGETValidateBeforeCall(userId, currencyCode, filterType, filterMaxDate, filterMinDate, filterSign, size, page, order, null, null);
        Type localVarReturnType = new TypeToken<PageResourceWalletTransactionResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a user&#39;s wallet transactions (asynchronously)
     * 
     * @param userId The ID of the user for whom wallet transactions are being retrieved (required)
     * @param currencyCode Currency code of the user&#39;s wallet (required)
     * @param filterType Filter for transactions with specified type (optional)
     * @param filterMaxDate Filter for transactions from no earlier than the specified date as a unix timestamp in seconds (optional)
     * @param filterMinDate Filter for transactions from no later than the specified date as a unix timestamp in seconds (optional)
     * @param filterSign Filter for transactions with amount with the given sign.  Allowable values: (&#39;positive&#39;, &#39;negative&#39;) (optional)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userTransactionHistoryUsingGETAsync(Integer userId, String currencyCode, String filterType, Long filterMaxDate, Long filterMinDate, String filterSign, Integer size, Integer page, String order, final ApiCallback<PageResourceWalletTransactionResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userTransactionHistoryUsingGETValidateBeforeCall(userId, currencyCode, filterType, filterMaxDate, filterMinDate, filterSign, size, page, order, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageResourceWalletTransactionResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
