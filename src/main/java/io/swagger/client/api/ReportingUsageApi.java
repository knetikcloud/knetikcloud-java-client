/*
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.PageResourceUsageInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReportingUsageApi {
    private ApiClient apiClient;

    public ReportingUsageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReportingUsageApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getUsageByDayUsingGET */
    private com.squareup.okhttp.Call getUsageByDayUsingGETCall(Long startDate, Long endDate, Boolean combineEndpoints, Integer size, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/reporting/usage/day".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_date", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end_date", endDate));
        if (combineEndpoints != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "combine_endpoints", combineEndpoints));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "knetik_oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUsageByDayUsingGETValidateBeforeCall(Long startDate, Long endDate, Boolean combineEndpoints, Integer size, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling getUsageByDayUsingGET(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling getUsageByDayUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUsageByDayUsingGETCall(startDate, endDate, combineEndpoints, size, page, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns aggregated endpoint usage information by the day
     * 
     * @param startDate The beginning of the range being requested, unix timestamp in seconds (required)
     * @param endDate The ending of the range being requested, unix timestamp in seconds (required)
     * @param combineEndpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @return PageResourceUsageInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageResourceUsageInfo getUsageByDayUsingGET(Long startDate, Long endDate, Boolean combineEndpoints, Integer size, Integer page) throws ApiException {
        ApiResponse<PageResourceUsageInfo> resp = getUsageByDayUsingGETWithHttpInfo(startDate, endDate, combineEndpoints, size, page);
        return resp.getData();
    }

    /**
     * Returns aggregated endpoint usage information by the day
     * 
     * @param startDate The beginning of the range being requested, unix timestamp in seconds (required)
     * @param endDate The ending of the range being requested, unix timestamp in seconds (required)
     * @param combineEndpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @return ApiResponse&lt;PageResourceUsageInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageResourceUsageInfo> getUsageByDayUsingGETWithHttpInfo(Long startDate, Long endDate, Boolean combineEndpoints, Integer size, Integer page) throws ApiException {
        com.squareup.okhttp.Call call = getUsageByDayUsingGETValidateBeforeCall(startDate, endDate, combineEndpoints, size, page, null, null);
        Type localVarReturnType = new TypeToken<PageResourceUsageInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns aggregated endpoint usage information by the day (asynchronously)
     * 
     * @param startDate The beginning of the range being requested, unix timestamp in seconds (required)
     * @param endDate The ending of the range being requested, unix timestamp in seconds (required)
     * @param combineEndpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUsageByDayUsingGETAsync(Long startDate, Long endDate, Boolean combineEndpoints, Integer size, Integer page, final ApiCallback<PageResourceUsageInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUsageByDayUsingGETValidateBeforeCall(startDate, endDate, combineEndpoints, size, page, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageResourceUsageInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUsageByHourUsingGET */
    private com.squareup.okhttp.Call getUsageByHourUsingGETCall(Long startDate, Long endDate, Boolean combineEndpoints, Integer size, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/reporting/usage/hour".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_date", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end_date", endDate));
        if (combineEndpoints != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "combine_endpoints", combineEndpoints));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "knetik_oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUsageByHourUsingGETValidateBeforeCall(Long startDate, Long endDate, Boolean combineEndpoints, Integer size, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling getUsageByHourUsingGET(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling getUsageByHourUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUsageByHourUsingGETCall(startDate, endDate, combineEndpoints, size, page, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns aggregated endpoint usage information by hour
     * 
     * @param startDate The beginning of the range being requested, unix timestamp in seconds (required)
     * @param endDate The ending of the range being requested, unix timestamp in seconds (required)
     * @param combineEndpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @return PageResourceUsageInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageResourceUsageInfo getUsageByHourUsingGET(Long startDate, Long endDate, Boolean combineEndpoints, Integer size, Integer page) throws ApiException {
        ApiResponse<PageResourceUsageInfo> resp = getUsageByHourUsingGETWithHttpInfo(startDate, endDate, combineEndpoints, size, page);
        return resp.getData();
    }

    /**
     * Returns aggregated endpoint usage information by hour
     * 
     * @param startDate The beginning of the range being requested, unix timestamp in seconds (required)
     * @param endDate The ending of the range being requested, unix timestamp in seconds (required)
     * @param combineEndpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @return ApiResponse&lt;PageResourceUsageInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageResourceUsageInfo> getUsageByHourUsingGETWithHttpInfo(Long startDate, Long endDate, Boolean combineEndpoints, Integer size, Integer page) throws ApiException {
        com.squareup.okhttp.Call call = getUsageByHourUsingGETValidateBeforeCall(startDate, endDate, combineEndpoints, size, page, null, null);
        Type localVarReturnType = new TypeToken<PageResourceUsageInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns aggregated endpoint usage information by hour (asynchronously)
     * 
     * @param startDate The beginning of the range being requested, unix timestamp in seconds (required)
     * @param endDate The ending of the range being requested, unix timestamp in seconds (required)
     * @param combineEndpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUsageByHourUsingGETAsync(Long startDate, Long endDate, Boolean combineEndpoints, Integer size, Integer page, final ApiCallback<PageResourceUsageInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUsageByHourUsingGETValidateBeforeCall(startDate, endDate, combineEndpoints, size, page, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageResourceUsageInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUsageByMinuteUsingGET */
    private com.squareup.okhttp.Call getUsageByMinuteUsingGETCall(Long startDate, Long endDate, Boolean combineEndpoints, Integer size, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/reporting/usage/minute".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_date", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end_date", endDate));
        if (combineEndpoints != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "combine_endpoints", combineEndpoints));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "knetik_oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUsageByMinuteUsingGETValidateBeforeCall(Long startDate, Long endDate, Boolean combineEndpoints, Integer size, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling getUsageByMinuteUsingGET(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling getUsageByMinuteUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUsageByMinuteUsingGETCall(startDate, endDate, combineEndpoints, size, page, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns aggregated endpoint usage information by minute
     * 
     * @param startDate The beginning of the range being requested, unix timestamp in seconds (required)
     * @param endDate The ending of the range being requested, unix timestamp in seconds (required)
     * @param combineEndpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @return PageResourceUsageInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageResourceUsageInfo getUsageByMinuteUsingGET(Long startDate, Long endDate, Boolean combineEndpoints, Integer size, Integer page) throws ApiException {
        ApiResponse<PageResourceUsageInfo> resp = getUsageByMinuteUsingGETWithHttpInfo(startDate, endDate, combineEndpoints, size, page);
        return resp.getData();
    }

    /**
     * Returns aggregated endpoint usage information by minute
     * 
     * @param startDate The beginning of the range being requested, unix timestamp in seconds (required)
     * @param endDate The ending of the range being requested, unix timestamp in seconds (required)
     * @param combineEndpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @return ApiResponse&lt;PageResourceUsageInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageResourceUsageInfo> getUsageByMinuteUsingGETWithHttpInfo(Long startDate, Long endDate, Boolean combineEndpoints, Integer size, Integer page) throws ApiException {
        com.squareup.okhttp.Call call = getUsageByMinuteUsingGETValidateBeforeCall(startDate, endDate, combineEndpoints, size, page, null, null);
        Type localVarReturnType = new TypeToken<PageResourceUsageInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns aggregated endpoint usage information by minute (asynchronously)
     * 
     * @param startDate The beginning of the range being requested, unix timestamp in seconds (required)
     * @param endDate The ending of the range being requested, unix timestamp in seconds (required)
     * @param combineEndpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUsageByMinuteUsingGETAsync(Long startDate, Long endDate, Boolean combineEndpoints, Integer size, Integer page, final ApiCallback<PageResourceUsageInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUsageByMinuteUsingGETValidateBeforeCall(startDate, endDate, combineEndpoints, size, page, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageResourceUsageInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUsageByMonthUsingGET */
    private com.squareup.okhttp.Call getUsageByMonthUsingGETCall(Long startDate, Long endDate, Boolean combineEndpoints, Integer size, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/reporting/usage/month".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_date", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end_date", endDate));
        if (combineEndpoints != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "combine_endpoints", combineEndpoints));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "knetik_oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUsageByMonthUsingGETValidateBeforeCall(Long startDate, Long endDate, Boolean combineEndpoints, Integer size, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling getUsageByMonthUsingGET(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling getUsageByMonthUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUsageByMonthUsingGETCall(startDate, endDate, combineEndpoints, size, page, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns aggregated endpoint usage information by month
     * 
     * @param startDate The beginning of the range being requested, unix timestamp in seconds (required)
     * @param endDate The ending of the range being requested, unix timestamp in seconds (required)
     * @param combineEndpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @return PageResourceUsageInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageResourceUsageInfo getUsageByMonthUsingGET(Long startDate, Long endDate, Boolean combineEndpoints, Integer size, Integer page) throws ApiException {
        ApiResponse<PageResourceUsageInfo> resp = getUsageByMonthUsingGETWithHttpInfo(startDate, endDate, combineEndpoints, size, page);
        return resp.getData();
    }

    /**
     * Returns aggregated endpoint usage information by month
     * 
     * @param startDate The beginning of the range being requested, unix timestamp in seconds (required)
     * @param endDate The ending of the range being requested, unix timestamp in seconds (required)
     * @param combineEndpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @return ApiResponse&lt;PageResourceUsageInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageResourceUsageInfo> getUsageByMonthUsingGETWithHttpInfo(Long startDate, Long endDate, Boolean combineEndpoints, Integer size, Integer page) throws ApiException {
        com.squareup.okhttp.Call call = getUsageByMonthUsingGETValidateBeforeCall(startDate, endDate, combineEndpoints, size, page, null, null);
        Type localVarReturnType = new TypeToken<PageResourceUsageInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns aggregated endpoint usage information by month (asynchronously)
     * 
     * @param startDate The beginning of the range being requested, unix timestamp in seconds (required)
     * @param endDate The ending of the range being requested, unix timestamp in seconds (required)
     * @param combineEndpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUsageByMonthUsingGETAsync(Long startDate, Long endDate, Boolean combineEndpoints, Integer size, Integer page, final ApiCallback<PageResourceUsageInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUsageByMonthUsingGETValidateBeforeCall(startDate, endDate, combineEndpoints, size, page, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageResourceUsageInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUsageByYearUsingGET */
    private com.squareup.okhttp.Call getUsageByYearUsingGETCall(Long startDate, Long endDate, Boolean combineEndpoints, Integer size, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/reporting/usage/year".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_date", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end_date", endDate));
        if (combineEndpoints != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "combine_endpoints", combineEndpoints));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "knetik_oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUsageByYearUsingGETValidateBeforeCall(Long startDate, Long endDate, Boolean combineEndpoints, Integer size, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling getUsageByYearUsingGET(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling getUsageByYearUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUsageByYearUsingGETCall(startDate, endDate, combineEndpoints, size, page, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns aggregated endpoint usage information by year
     * 
     * @param startDate The beginning of the range being requested, unix timestamp in seconds (required)
     * @param endDate The ending of the range being requested, unix timestamp in seconds (required)
     * @param combineEndpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @return PageResourceUsageInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageResourceUsageInfo getUsageByYearUsingGET(Long startDate, Long endDate, Boolean combineEndpoints, Integer size, Integer page) throws ApiException {
        ApiResponse<PageResourceUsageInfo> resp = getUsageByYearUsingGETWithHttpInfo(startDate, endDate, combineEndpoints, size, page);
        return resp.getData();
    }

    /**
     * Returns aggregated endpoint usage information by year
     * 
     * @param startDate The beginning of the range being requested, unix timestamp in seconds (required)
     * @param endDate The ending of the range being requested, unix timestamp in seconds (required)
     * @param combineEndpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @return ApiResponse&lt;PageResourceUsageInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageResourceUsageInfo> getUsageByYearUsingGETWithHttpInfo(Long startDate, Long endDate, Boolean combineEndpoints, Integer size, Integer page) throws ApiException {
        com.squareup.okhttp.Call call = getUsageByYearUsingGETValidateBeforeCall(startDate, endDate, combineEndpoints, size, page, null, null);
        Type localVarReturnType = new TypeToken<PageResourceUsageInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns aggregated endpoint usage information by year (asynchronously)
     * 
     * @param startDate The beginning of the range being requested, unix timestamp in seconds (required)
     * @param endDate The ending of the range being requested, unix timestamp in seconds (required)
     * @param combineEndpoints Whether to combine counts from different endpoint. Removes the url and method from the result object (optional, default to false)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUsageByYearUsingGETAsync(Long startDate, Long endDate, Boolean combineEndpoints, Integer size, Integer page, final ApiCallback<PageResourceUsageInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUsageByYearUsingGETValidateBeforeCall(startDate, endDate, combineEndpoints, size, page, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageResourceUsageInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
