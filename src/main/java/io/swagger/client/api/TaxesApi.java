/**
 * Knetik Platform API Documentation latest 
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.StateTaxResource;
import io.swagger.client.model.PageStateTaxResource;
import io.swagger.client.model.CountryTaxResource;
import io.swagger.client.model.PageCountryTaxResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaxesApi {
    private ApiClient apiClient;

    public TaxesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaxesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createTaxUsingPOST */
    private com.squareup.okhttp.Call createTaxUsingPOSTCall(String countryCodeIso3, StateTaxResource taxResource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taxResource;
        
        // verify the required parameter 'countryCodeIso3' is set
        if (countryCodeIso3 == null) {
            throw new ApiException("Missing the required parameter 'countryCodeIso3' when calling createTaxUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/tax/countries/{country_code_iso3}/states".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "country_code_iso3" + "\\}", apiClient.escapeString(countryCodeIso3.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create a tax
     * 
     * @param countryCodeIso3 The iso3 code of the country (required)
     * @param taxResource The tax object (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createTaxUsingPOST(String countryCodeIso3, StateTaxResource taxResource) throws ApiException {
        createTaxUsingPOSTWithHttpInfo(countryCodeIso3, taxResource);
    }

    /**
     * Create a tax
     * 
     * @param countryCodeIso3 The iso3 code of the country (required)
     * @param taxResource The tax object (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createTaxUsingPOSTWithHttpInfo(String countryCodeIso3, StateTaxResource taxResource) throws ApiException {
        com.squareup.okhttp.Call call = createTaxUsingPOSTCall(countryCodeIso3, taxResource, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create a tax (asynchronously)
     * 
     * @param countryCodeIso3 The iso3 code of the country (required)
     * @param taxResource The tax object (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTaxUsingPOSTAsync(String countryCodeIso3, StateTaxResource taxResource, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTaxUsingPOSTCall(countryCodeIso3, taxResource, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteTaxUsingDELETE */
    private com.squareup.okhttp.Call deleteTaxUsingDELETECall(String countryCodeIso3, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'countryCodeIso3' is set
        if (countryCodeIso3 == null) {
            throw new ApiException("Missing the required parameter 'countryCodeIso3' when calling deleteTaxUsingDELETE(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/tax/countries/{country_code_iso3}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "country_code_iso3" + "\\}", apiClient.escapeString(countryCodeIso3.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete an existing tax
     * 
     * @param countryCodeIso3 The iso3 code of the country (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTaxUsingDELETE(String countryCodeIso3) throws ApiException {
        deleteTaxUsingDELETEWithHttpInfo(countryCodeIso3);
    }

    /**
     * Delete an existing tax
     * 
     * @param countryCodeIso3 The iso3 code of the country (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTaxUsingDELETEWithHttpInfo(String countryCodeIso3) throws ApiException {
        com.squareup.okhttp.Call call = deleteTaxUsingDELETECall(countryCodeIso3, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an existing tax (asynchronously)
     * 
     * @param countryCodeIso3 The iso3 code of the country (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTaxUsingDELETEAsync(String countryCodeIso3, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTaxUsingDELETECall(countryCodeIso3, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteTaxUsingDELETE1 */
    private com.squareup.okhttp.Call deleteTaxUsingDELETE1Call(String countryCodeIso3, String stateCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'countryCodeIso3' is set
        if (countryCodeIso3 == null) {
            throw new ApiException("Missing the required parameter 'countryCodeIso3' when calling deleteTaxUsingDELETE1(Async)");
        }
        
        // verify the required parameter 'stateCode' is set
        if (stateCode == null) {
            throw new ApiException("Missing the required parameter 'stateCode' when calling deleteTaxUsingDELETE1(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/tax/countries/{country_code_iso3}/states/{state_code}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "country_code_iso3" + "\\}", apiClient.escapeString(countryCodeIso3.toString()))
        .replaceAll("\\{" + "state_code" + "\\}", apiClient.escapeString(stateCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete an existing tax
     * 
     * @param countryCodeIso3 The iso3 code of the country (required)
     * @param stateCode The code of the state (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTaxUsingDELETE1(String countryCodeIso3, String stateCode) throws ApiException {
        deleteTaxUsingDELETE1WithHttpInfo(countryCodeIso3, stateCode);
    }

    /**
     * Delete an existing tax
     * 
     * @param countryCodeIso3 The iso3 code of the country (required)
     * @param stateCode The code of the state (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTaxUsingDELETE1WithHttpInfo(String countryCodeIso3, String stateCode) throws ApiException {
        com.squareup.okhttp.Call call = deleteTaxUsingDELETE1Call(countryCodeIso3, stateCode, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an existing tax (asynchronously)
     * 
     * @param countryCodeIso3 The iso3 code of the country (required)
     * @param stateCode The code of the state (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTaxUsingDELETE1Async(String countryCodeIso3, String stateCode, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTaxUsingDELETE1Call(countryCodeIso3, stateCode, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getAllTaxesUsingGET */
    private com.squareup.okhttp.Call getAllTaxesUsingGETCall(Integer size, Integer page, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/tax/states".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * List and search taxes across all countries
     * Get a list of taxes
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     * @return PageStateTaxResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageStateTaxResource getAllTaxesUsingGET(Integer size, Integer page, String order) throws ApiException {
        ApiResponse<PageStateTaxResource> resp = getAllTaxesUsingGETWithHttpInfo(size, page, order);
        return resp.getData();
    }

    /**
     * List and search taxes across all countries
     * Get a list of taxes
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     * @return ApiResponse&lt;PageStateTaxResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageStateTaxResource> getAllTaxesUsingGETWithHttpInfo(Integer size, Integer page, String order) throws ApiException {
        com.squareup.okhttp.Call call = getAllTaxesUsingGETCall(size, page, order, null, null);
        Type localVarReturnType = new TypeToken<PageStateTaxResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List and search taxes across all countries (asynchronously)
     * Get a list of taxes
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllTaxesUsingGETAsync(Integer size, Integer page, String order, final ApiCallback<PageStateTaxResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllTaxesUsingGETCall(size, page, order, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageStateTaxResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTaxUsingGET */
    private com.squareup.okhttp.Call getTaxUsingGETCall(String countryCodeIso3, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'countryCodeIso3' is set
        if (countryCodeIso3 == null) {
            throw new ApiException("Missing the required parameter 'countryCodeIso3' when calling getTaxUsingGET(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/tax/countries/{country_code_iso3}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "country_code_iso3" + "\\}", apiClient.escapeString(countryCodeIso3.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get a single tax
     * 
     * @param countryCodeIso3 The iso3 code of the country (required)
     * @return CountryTaxResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CountryTaxResource getTaxUsingGET(String countryCodeIso3) throws ApiException {
        ApiResponse<CountryTaxResource> resp = getTaxUsingGETWithHttpInfo(countryCodeIso3);
        return resp.getData();
    }

    /**
     * Get a single tax
     * 
     * @param countryCodeIso3 The iso3 code of the country (required)
     * @return ApiResponse&lt;CountryTaxResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CountryTaxResource> getTaxUsingGETWithHttpInfo(String countryCodeIso3) throws ApiException {
        com.squareup.okhttp.Call call = getTaxUsingGETCall(countryCodeIso3, null, null);
        Type localVarReturnType = new TypeToken<CountryTaxResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a single tax (asynchronously)
     * 
     * @param countryCodeIso3 The iso3 code of the country (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTaxUsingGETAsync(String countryCodeIso3, final ApiCallback<CountryTaxResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTaxUsingGETCall(countryCodeIso3, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CountryTaxResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTaxUsingGET1 */
    private com.squareup.okhttp.Call getTaxUsingGET1Call(String countryCodeIso3, String stateCode, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'countryCodeIso3' is set
        if (countryCodeIso3 == null) {
            throw new ApiException("Missing the required parameter 'countryCodeIso3' when calling getTaxUsingGET1(Async)");
        }
        
        // verify the required parameter 'stateCode' is set
        if (stateCode == null) {
            throw new ApiException("Missing the required parameter 'stateCode' when calling getTaxUsingGET1(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/tax/countries/{country_code_iso3}/states/{state_code}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "country_code_iso3" + "\\}", apiClient.escapeString(countryCodeIso3.toString()))
        .replaceAll("\\{" + "state_code" + "\\}", apiClient.escapeString(stateCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get a single tax
     * 
     * @param countryCodeIso3 The iso3 code of the country (required)
     * @param stateCode The code of the state (required)
     * @return StateTaxResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StateTaxResource getTaxUsingGET1(String countryCodeIso3, String stateCode) throws ApiException {
        ApiResponse<StateTaxResource> resp = getTaxUsingGET1WithHttpInfo(countryCodeIso3, stateCode);
        return resp.getData();
    }

    /**
     * Get a single tax
     * 
     * @param countryCodeIso3 The iso3 code of the country (required)
     * @param stateCode The code of the state (required)
     * @return ApiResponse&lt;StateTaxResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StateTaxResource> getTaxUsingGET1WithHttpInfo(String countryCodeIso3, String stateCode) throws ApiException {
        com.squareup.okhttp.Call call = getTaxUsingGET1Call(countryCodeIso3, stateCode, null, null);
        Type localVarReturnType = new TypeToken<StateTaxResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a single tax (asynchronously)
     * 
     * @param countryCodeIso3 The iso3 code of the country (required)
     * @param stateCode The code of the state (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTaxUsingGET1Async(String countryCodeIso3, String stateCode, final ApiCallback<StateTaxResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTaxUsingGET1Call(countryCodeIso3, stateCode, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StateTaxResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTaxesUsingGET */
    private com.squareup.okhttp.Call getTaxesUsingGETCall(Integer size, Integer page, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/tax/countries".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * List and search taxes
     * Get a list of taxes
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     * @return PageCountryTaxResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageCountryTaxResource getTaxesUsingGET(Integer size, Integer page, String order) throws ApiException {
        ApiResponse<PageCountryTaxResource> resp = getTaxesUsingGETWithHttpInfo(size, page, order);
        return resp.getData();
    }

    /**
     * List and search taxes
     * Get a list of taxes
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     * @return ApiResponse&lt;PageCountryTaxResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageCountryTaxResource> getTaxesUsingGETWithHttpInfo(Integer size, Integer page, String order) throws ApiException {
        com.squareup.okhttp.Call call = getTaxesUsingGETCall(size, page, order, null, null);
        Type localVarReturnType = new TypeToken<PageCountryTaxResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List and search taxes (asynchronously)
     * Get a list of taxes
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTaxesUsingGETAsync(Integer size, Integer page, String order, final ApiCallback<PageCountryTaxResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTaxesUsingGETCall(size, page, order, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageCountryTaxResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getTaxesUsingGET1 */
    private com.squareup.okhttp.Call getTaxesUsingGET1Call(String countryCodeIso3, Integer size, Integer page, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'countryCodeIso3' is set
        if (countryCodeIso3 == null) {
            throw new ApiException("Missing the required parameter 'countryCodeIso3' when calling getTaxesUsingGET1(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/tax/countries/{country_code_iso3}/states".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "country_code_iso3" + "\\}", apiClient.escapeString(countryCodeIso3.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * List and search taxes within a country
     * Get a list of taxes
     * @param countryCodeIso3 The iso3 code of the country (required)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     * @return PageStateTaxResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageStateTaxResource getTaxesUsingGET1(String countryCodeIso3, Integer size, Integer page, String order) throws ApiException {
        ApiResponse<PageStateTaxResource> resp = getTaxesUsingGET1WithHttpInfo(countryCodeIso3, size, page, order);
        return resp.getData();
    }

    /**
     * List and search taxes within a country
     * Get a list of taxes
     * @param countryCodeIso3 The iso3 code of the country (required)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     * @return ApiResponse&lt;PageStateTaxResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageStateTaxResource> getTaxesUsingGET1WithHttpInfo(String countryCodeIso3, Integer size, Integer page, String order) throws ApiException {
        com.squareup.okhttp.Call call = getTaxesUsingGET1Call(countryCodeIso3, size, page, order, null, null);
        Type localVarReturnType = new TypeToken<PageStateTaxResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List and search taxes within a country (asynchronously)
     * Get a list of taxes
     * @param countryCodeIso3 The iso3 code of the country (required)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTaxesUsingGET1Async(String countryCodeIso3, Integer size, Integer page, String order, final ApiCallback<PageStateTaxResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTaxesUsingGET1Call(countryCodeIso3, size, page, order, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageStateTaxResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateTaxUsingPOST */
    private com.squareup.okhttp.Call updateTaxUsingPOSTCall(CountryTaxResource taxResource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taxResource;
        

        // create path and map variables
        String localVarPath = "/tax/countries".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create a tax
     * 
     * @param taxResource The tax object (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateTaxUsingPOST(CountryTaxResource taxResource) throws ApiException {
        updateTaxUsingPOSTWithHttpInfo(taxResource);
    }

    /**
     * Create a tax
     * 
     * @param taxResource The tax object (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateTaxUsingPOSTWithHttpInfo(CountryTaxResource taxResource) throws ApiException {
        com.squareup.okhttp.Call call = updateTaxUsingPOSTCall(taxResource, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create a tax (asynchronously)
     * 
     * @param taxResource The tax object (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTaxUsingPOSTAsync(CountryTaxResource taxResource, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTaxUsingPOSTCall(taxResource, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateTaxUsingPUT */
    private com.squareup.okhttp.Call updateTaxUsingPUTCall(String countryCodeIso3, CountryTaxResource taxResource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taxResource;
        
        // verify the required parameter 'countryCodeIso3' is set
        if (countryCodeIso3 == null) {
            throw new ApiException("Missing the required parameter 'countryCodeIso3' when calling updateTaxUsingPUT(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/tax/countries/{country_code_iso3}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "country_code_iso3" + "\\}", apiClient.escapeString(countryCodeIso3.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create or update a tax
     * 
     * @param countryCodeIso3 The iso3 code of the country (required)
     * @param taxResource The tax object (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateTaxUsingPUT(String countryCodeIso3, CountryTaxResource taxResource) throws ApiException {
        updateTaxUsingPUTWithHttpInfo(countryCodeIso3, taxResource);
    }

    /**
     * Create or update a tax
     * 
     * @param countryCodeIso3 The iso3 code of the country (required)
     * @param taxResource The tax object (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateTaxUsingPUTWithHttpInfo(String countryCodeIso3, CountryTaxResource taxResource) throws ApiException {
        com.squareup.okhttp.Call call = updateTaxUsingPUTCall(countryCodeIso3, taxResource, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create or update a tax (asynchronously)
     * 
     * @param countryCodeIso3 The iso3 code of the country (required)
     * @param taxResource The tax object (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTaxUsingPUTAsync(String countryCodeIso3, CountryTaxResource taxResource, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTaxUsingPUTCall(countryCodeIso3, taxResource, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateTaxUsingPUT1 */
    private com.squareup.okhttp.Call updateTaxUsingPUT1Call(String countryCodeIso3, String stateCode, StateTaxResource taxResource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = taxResource;
        
        // verify the required parameter 'countryCodeIso3' is set
        if (countryCodeIso3 == null) {
            throw new ApiException("Missing the required parameter 'countryCodeIso3' when calling updateTaxUsingPUT1(Async)");
        }
        
        // verify the required parameter 'stateCode' is set
        if (stateCode == null) {
            throw new ApiException("Missing the required parameter 'stateCode' when calling updateTaxUsingPUT1(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/tax/countries/{country_code_iso3}/states/{state_code}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "country_code_iso3" + "\\}", apiClient.escapeString(countryCodeIso3.toString()))
        .replaceAll("\\{" + "state_code" + "\\}", apiClient.escapeString(stateCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create or update a tax
     * 
     * @param countryCodeIso3 The iso3 code of the country (required)
     * @param stateCode The code of the state (required)
     * @param taxResource The tax object (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateTaxUsingPUT1(String countryCodeIso3, String stateCode, StateTaxResource taxResource) throws ApiException {
        updateTaxUsingPUT1WithHttpInfo(countryCodeIso3, stateCode, taxResource);
    }

    /**
     * Create or update a tax
     * 
     * @param countryCodeIso3 The iso3 code of the country (required)
     * @param stateCode The code of the state (required)
     * @param taxResource The tax object (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateTaxUsingPUT1WithHttpInfo(String countryCodeIso3, String stateCode, StateTaxResource taxResource) throws ApiException {
        com.squareup.okhttp.Call call = updateTaxUsingPUT1Call(countryCodeIso3, stateCode, taxResource, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create or update a tax (asynchronously)
     * 
     * @param countryCodeIso3 The iso3 code of the country (required)
     * @param stateCode The code of the state (required)
     * @param taxResource The tax object (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTaxUsingPUT1Async(String countryCodeIso3, String stateCode, StateTaxResource taxResource, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTaxUsingPUT1Call(countryCodeIso3, stateCode, taxResource, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
