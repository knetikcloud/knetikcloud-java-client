/**
 * Knetik Platform API Documentation latest 
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.ChallengeActivityResource;
import io.swagger.client.model.TemplateResource;
import io.swagger.client.model.ChallengeResource;
import io.swagger.client.model.PageBareChallengeActivityResource;
import io.swagger.client.model.ChallengeEventResource;
import io.swagger.client.model.PageChallengeEventResource;
import io.swagger.client.model.PageTemplateResource;
import io.swagger.client.model.PageChallengeResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CampaignsChallengesApi {
    private ApiClient apiClient;

    public CampaignsChallengesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CampaignsChallengesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createChallengeActivityUsingPOST */
    private com.squareup.okhttp.Call createChallengeActivityUsingPOSTCall(Long challengeId, ChallengeActivityResource challengeActivityResource, Boolean validateSettings, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = challengeActivityResource;
        
        // verify the required parameter 'challengeId' is set
        if (challengeId == null) {
            throw new ApiException("Missing the required parameter 'challengeId' when calling createChallengeActivityUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/challenges/{challenge_id}/activities".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "challenge_id" + "\\}", apiClient.escapeString(challengeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (validateSettings != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "validateSettings", validateSettings));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create a challenge activity
     * 
     * @param challengeId The challenge id (required)
     * @param challengeActivityResource The challenge activity resource object (optional)
     * @param validateSettings Whether to validate the settings being sent against the available settings on the base activity. (optional, default to false)
     * @return ChallengeActivityResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChallengeActivityResource createChallengeActivityUsingPOST(Long challengeId, ChallengeActivityResource challengeActivityResource, Boolean validateSettings) throws ApiException {
        ApiResponse<ChallengeActivityResource> resp = createChallengeActivityUsingPOSTWithHttpInfo(challengeId, challengeActivityResource, validateSettings);
        return resp.getData();
    }

    /**
     * Create a challenge activity
     * 
     * @param challengeId The challenge id (required)
     * @param challengeActivityResource The challenge activity resource object (optional)
     * @param validateSettings Whether to validate the settings being sent against the available settings on the base activity. (optional, default to false)
     * @return ApiResponse&lt;ChallengeActivityResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChallengeActivityResource> createChallengeActivityUsingPOSTWithHttpInfo(Long challengeId, ChallengeActivityResource challengeActivityResource, Boolean validateSettings) throws ApiException {
        com.squareup.okhttp.Call call = createChallengeActivityUsingPOSTCall(challengeId, challengeActivityResource, validateSettings, null, null);
        Type localVarReturnType = new TypeToken<ChallengeActivityResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a challenge activity (asynchronously)
     * 
     * @param challengeId The challenge id (required)
     * @param challengeActivityResource The challenge activity resource object (optional)
     * @param validateSettings Whether to validate the settings being sent against the available settings on the base activity. (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createChallengeActivityUsingPOSTAsync(Long challengeId, ChallengeActivityResource challengeActivityResource, Boolean validateSettings, final ApiCallback<ChallengeActivityResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createChallengeActivityUsingPOSTCall(challengeId, challengeActivityResource, validateSettings, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChallengeActivityResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createChallengeTemplateUsingPOST */
    private com.squareup.okhttp.Call createChallengeTemplateUsingPOSTCall(TemplateResource challengeTemplateResource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = challengeTemplateResource;
        

        // create path and map variables
        String localVarPath = "/challenges/templates".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create a challenge template
     * Challenge Templates define a type of challenge and the properties they have
     * @param challengeTemplateResource The challenge template resource object (optional)
     * @return TemplateResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TemplateResource createChallengeTemplateUsingPOST(TemplateResource challengeTemplateResource) throws ApiException {
        ApiResponse<TemplateResource> resp = createChallengeTemplateUsingPOSTWithHttpInfo(challengeTemplateResource);
        return resp.getData();
    }

    /**
     * Create a challenge template
     * Challenge Templates define a type of challenge and the properties they have
     * @param challengeTemplateResource The challenge template resource object (optional)
     * @return ApiResponse&lt;TemplateResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TemplateResource> createChallengeTemplateUsingPOSTWithHttpInfo(TemplateResource challengeTemplateResource) throws ApiException {
        com.squareup.okhttp.Call call = createChallengeTemplateUsingPOSTCall(challengeTemplateResource, null, null);
        Type localVarReturnType = new TypeToken<TemplateResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a challenge template (asynchronously)
     * Challenge Templates define a type of challenge and the properties they have
     * @param challengeTemplateResource The challenge template resource object (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createChallengeTemplateUsingPOSTAsync(TemplateResource challengeTemplateResource, final ApiCallback<TemplateResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createChallengeTemplateUsingPOSTCall(challengeTemplateResource, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TemplateResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createChallengeUsingPOST */
    private com.squareup.okhttp.Call createChallengeUsingPOSTCall(ChallengeResource challengeResource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = challengeResource;
        

        // create path and map variables
        String localVarPath = "/challenges".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Create a challenge
     * Challenges do not run on their own.  They must be added to a campaign before events will spawn.
     * @param challengeResource The challenge resource object (optional)
     * @return ChallengeResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChallengeResource createChallengeUsingPOST(ChallengeResource challengeResource) throws ApiException {
        ApiResponse<ChallengeResource> resp = createChallengeUsingPOSTWithHttpInfo(challengeResource);
        return resp.getData();
    }

    /**
     * Create a challenge
     * Challenges do not run on their own.  They must be added to a campaign before events will spawn.
     * @param challengeResource The challenge resource object (optional)
     * @return ApiResponse&lt;ChallengeResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChallengeResource> createChallengeUsingPOSTWithHttpInfo(ChallengeResource challengeResource) throws ApiException {
        com.squareup.okhttp.Call call = createChallengeUsingPOSTCall(challengeResource, null, null);
        Type localVarReturnType = new TypeToken<ChallengeResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a challenge (asynchronously)
     * Challenges do not run on their own.  They must be added to a campaign before events will spawn.
     * @param challengeResource The challenge resource object (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createChallengeUsingPOSTAsync(ChallengeResource challengeResource, final ApiCallback<ChallengeResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createChallengeUsingPOSTCall(challengeResource, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChallengeResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteChallengeActivityUsingDELETE */
    private com.squareup.okhttp.Call deleteChallengeActivityUsingDELETECall(Long activityId, Long challengeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'activityId' is set
        if (activityId == null) {
            throw new ApiException("Missing the required parameter 'activityId' when calling deleteChallengeActivityUsingDELETE(Async)");
        }
        
        // verify the required parameter 'challengeId' is set
        if (challengeId == null) {
            throw new ApiException("Missing the required parameter 'challengeId' when calling deleteChallengeActivityUsingDELETE(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/challenges/{challenge_id}/activities/{activity_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "activity_id" + "\\}", apiClient.escapeString(activityId.toString()))
        .replaceAll("\\{" + "challenge_id" + "\\}", apiClient.escapeString(challengeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete a challenge activity
     * 
     * @param activityId The activity id (required)
     * @param challengeId The challenge id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteChallengeActivityUsingDELETE(Long activityId, Long challengeId) throws ApiException {
        deleteChallengeActivityUsingDELETEWithHttpInfo(activityId, challengeId);
    }

    /**
     * Delete a challenge activity
     * 
     * @param activityId The activity id (required)
     * @param challengeId The challenge id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteChallengeActivityUsingDELETEWithHttpInfo(Long activityId, Long challengeId) throws ApiException {
        com.squareup.okhttp.Call call = deleteChallengeActivityUsingDELETECall(activityId, challengeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a challenge activity (asynchronously)
     * 
     * @param activityId The activity id (required)
     * @param challengeId The challenge id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteChallengeActivityUsingDELETEAsync(Long activityId, Long challengeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteChallengeActivityUsingDELETECall(activityId, challengeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteChallengeEventUsingDELETE */
    private com.squareup.okhttp.Call deleteChallengeEventUsingDELETECall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteChallengeEventUsingDELETE(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/challenges/events/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete a challenge event
     * 
     * @param id The challenge event id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteChallengeEventUsingDELETE(Long id) throws ApiException {
        deleteChallengeEventUsingDELETEWithHttpInfo(id);
    }

    /**
     * Delete a challenge event
     * 
     * @param id The challenge event id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteChallengeEventUsingDELETEWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = deleteChallengeEventUsingDELETECall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a challenge event (asynchronously)
     * 
     * @param id The challenge event id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteChallengeEventUsingDELETEAsync(Long id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteChallengeEventUsingDELETECall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteChallengeTemplateUsingDELETE */
    private com.squareup.okhttp.Call deleteChallengeTemplateUsingDELETECall(String id, String cascade, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteChallengeTemplateUsingDELETE(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/challenges/templates/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (cascade != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cascade", cascade));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete a challenge template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
     * @param id The id of the template (required)
     * @param cascade The value needed to delete used templates (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteChallengeTemplateUsingDELETE(String id, String cascade) throws ApiException {
        deleteChallengeTemplateUsingDELETEWithHttpInfo(id, cascade);
    }

    /**
     * Delete a challenge template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
     * @param id The id of the template (required)
     * @param cascade The value needed to delete used templates (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteChallengeTemplateUsingDELETEWithHttpInfo(String id, String cascade) throws ApiException {
        com.squareup.okhttp.Call call = deleteChallengeTemplateUsingDELETECall(id, cascade, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a challenge template (asynchronously)
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
     * @param id The id of the template (required)
     * @param cascade The value needed to delete used templates (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteChallengeTemplateUsingDELETEAsync(String id, String cascade, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteChallengeTemplateUsingDELETECall(id, cascade, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteChallengeUsingDELETE */
    private com.squareup.okhttp.Call deleteChallengeUsingDELETECall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteChallengeUsingDELETE(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/challenges/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Delete a challenge
     * 
     * @param id The challenge id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteChallengeUsingDELETE(Long id) throws ApiException {
        deleteChallengeUsingDELETEWithHttpInfo(id);
    }

    /**
     * Delete a challenge
     * 
     * @param id The challenge id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteChallengeUsingDELETEWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = deleteChallengeUsingDELETECall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a challenge (asynchronously)
     * 
     * @param id The challenge id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteChallengeUsingDELETEAsync(Long id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteChallengeUsingDELETECall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getActivitiesUsingGET1 */
    private com.squareup.okhttp.Call getActivitiesUsingGET1Call(Long challengeId, Integer size, Integer page, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'challengeId' is set
        if (challengeId == null) {
            throw new ApiException("Missing the required parameter 'challengeId' when calling getActivitiesUsingGET1(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/challenges/{challenge_id}/activities".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "challenge_id" + "\\}", apiClient.escapeString(challengeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * List and search challenge activities
     * 
     * @param challengeId The challenge id (required)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     * @return PageBareChallengeActivityResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageBareChallengeActivityResource getActivitiesUsingGET1(Long challengeId, Integer size, Integer page, String order) throws ApiException {
        ApiResponse<PageBareChallengeActivityResource> resp = getActivitiesUsingGET1WithHttpInfo(challengeId, size, page, order);
        return resp.getData();
    }

    /**
     * List and search challenge activities
     * 
     * @param challengeId The challenge id (required)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     * @return ApiResponse&lt;PageBareChallengeActivityResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageBareChallengeActivityResource> getActivitiesUsingGET1WithHttpInfo(Long challengeId, Integer size, Integer page, String order) throws ApiException {
        com.squareup.okhttp.Call call = getActivitiesUsingGET1Call(challengeId, size, page, order, null, null);
        Type localVarReturnType = new TypeToken<PageBareChallengeActivityResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List and search challenge activities (asynchronously)
     * 
     * @param challengeId The challenge id (required)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getActivitiesUsingGET1Async(Long challengeId, Integer size, Integer page, String order, final ApiCallback<PageBareChallengeActivityResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getActivitiesUsingGET1Call(challengeId, size, page, order, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageBareChallengeActivityResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getChallengeActivityUsingGET */
    private com.squareup.okhttp.Call getChallengeActivityUsingGETCall(Long activityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'activityId' is set
        if (activityId == null) {
            throw new ApiException("Missing the required parameter 'activityId' when calling getChallengeActivityUsingGET(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/challenges/{challenge_id}/activities/{activity_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "activity_id" + "\\}", apiClient.escapeString(activityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get a single challenge activity
     * 
     * @param activityId The activity id (required)
     * @return ChallengeActivityResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChallengeActivityResource getChallengeActivityUsingGET(Long activityId) throws ApiException {
        ApiResponse<ChallengeActivityResource> resp = getChallengeActivityUsingGETWithHttpInfo(activityId);
        return resp.getData();
    }

    /**
     * Get a single challenge activity
     * 
     * @param activityId The activity id (required)
     * @return ApiResponse&lt;ChallengeActivityResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChallengeActivityResource> getChallengeActivityUsingGETWithHttpInfo(Long activityId) throws ApiException {
        com.squareup.okhttp.Call call = getChallengeActivityUsingGETCall(activityId, null, null);
        Type localVarReturnType = new TypeToken<ChallengeActivityResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a single challenge activity (asynchronously)
     * 
     * @param activityId The activity id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChallengeActivityUsingGETAsync(Long activityId, final ApiCallback<ChallengeActivityResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChallengeActivityUsingGETCall(activityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChallengeActivityResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getChallengeEventUsingGET */
    private com.squareup.okhttp.Call getChallengeEventUsingGETCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getChallengeEventUsingGET(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/challenges/events/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve a single challenge event details
     * 
     * @param id The challenge event id (required)
     * @return ChallengeEventResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChallengeEventResource getChallengeEventUsingGET(Long id) throws ApiException {
        ApiResponse<ChallengeEventResource> resp = getChallengeEventUsingGETWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Retrieve a single challenge event details
     * 
     * @param id The challenge event id (required)
     * @return ApiResponse&lt;ChallengeEventResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChallengeEventResource> getChallengeEventUsingGETWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = getChallengeEventUsingGETCall(id, null, null);
        Type localVarReturnType = new TypeToken<ChallengeEventResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a single challenge event details (asynchronously)
     * 
     * @param id The challenge event id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChallengeEventUsingGETAsync(Long id, final ApiCallback<ChallengeEventResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChallengeEventUsingGETCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChallengeEventResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getChallengeEventssUsingGET */
    private com.squareup.okhttp.Call getChallengeEventssUsingGETCall(String filterStartDate, String filterEndDate, Boolean filterCampaigns, Long filterChallenge, Integer size, Integer page, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/challenges/events".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (filterStartDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_start_date", filterStartDate));
        if (filterEndDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_end_date", filterEndDate));
        if (filterCampaigns != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_campaigns", filterCampaigns));
        if (filterChallenge != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_challenge", filterChallenge));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve a list of challenge events
     * 
     * @param filterStartDate A comma separated string without spaces.  First value is the operator to search on, second value is the event start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
     * @param filterEndDate A comma separated string without spaces.  First value is the operator to search on, second value is the event end date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
     * @param filterCampaigns check only for events from currently running campaigns (optional)
     * @param filterChallenge check only for events from the challenge specified by id (optional)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     * @return PageChallengeEventResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageChallengeEventResource getChallengeEventssUsingGET(String filterStartDate, String filterEndDate, Boolean filterCampaigns, Long filterChallenge, Integer size, Integer page, String order) throws ApiException {
        ApiResponse<PageChallengeEventResource> resp = getChallengeEventssUsingGETWithHttpInfo(filterStartDate, filterEndDate, filterCampaigns, filterChallenge, size, page, order);
        return resp.getData();
    }

    /**
     * Retrieve a list of challenge events
     * 
     * @param filterStartDate A comma separated string without spaces.  First value is the operator to search on, second value is the event start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
     * @param filterEndDate A comma separated string without spaces.  First value is the operator to search on, second value is the event end date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
     * @param filterCampaigns check only for events from currently running campaigns (optional)
     * @param filterChallenge check only for events from the challenge specified by id (optional)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     * @return ApiResponse&lt;PageChallengeEventResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageChallengeEventResource> getChallengeEventssUsingGETWithHttpInfo(String filterStartDate, String filterEndDate, Boolean filterCampaigns, Long filterChallenge, Integer size, Integer page, String order) throws ApiException {
        com.squareup.okhttp.Call call = getChallengeEventssUsingGETCall(filterStartDate, filterEndDate, filterCampaigns, filterChallenge, size, page, order, null, null);
        Type localVarReturnType = new TypeToken<PageChallengeEventResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a list of challenge events (asynchronously)
     * 
     * @param filterStartDate A comma separated string without spaces.  First value is the operator to search on, second value is the event start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
     * @param filterEndDate A comma separated string without spaces.  First value is the operator to search on, second value is the event end date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
     * @param filterCampaigns check only for events from currently running campaigns (optional)
     * @param filterChallenge check only for events from the challenge specified by id (optional)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChallengeEventssUsingGETAsync(String filterStartDate, String filterEndDate, Boolean filterCampaigns, Long filterChallenge, Integer size, Integer page, String order, final ApiCallback<PageChallengeEventResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChallengeEventssUsingGETCall(filterStartDate, filterEndDate, filterCampaigns, filterChallenge, size, page, order, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageChallengeEventResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getChallengeTemplateUsingGET */
    private com.squareup.okhttp.Call getChallengeTemplateUsingGETCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getChallengeTemplateUsingGET(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/challenges/templates/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get a single challenge template
     * 
     * @param id The id of the template (required)
     * @return TemplateResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TemplateResource getChallengeTemplateUsingGET(String id) throws ApiException {
        ApiResponse<TemplateResource> resp = getChallengeTemplateUsingGETWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get a single challenge template
     * 
     * @param id The id of the template (required)
     * @return ApiResponse&lt;TemplateResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TemplateResource> getChallengeTemplateUsingGETWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getChallengeTemplateUsingGETCall(id, null, null);
        Type localVarReturnType = new TypeToken<TemplateResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a single challenge template (asynchronously)
     * 
     * @param id The id of the template (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChallengeTemplateUsingGETAsync(String id, final ApiCallback<TemplateResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChallengeTemplateUsingGETCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TemplateResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getChallengeTemplatesUsingGET */
    private com.squareup.okhttp.Call getChallengeTemplatesUsingGETCall(Integer size, Integer page, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/challenges/templates".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * List and search challenge templates
     * 
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     * @return PageTemplateResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageTemplateResource getChallengeTemplatesUsingGET(Integer size, Integer page, String order) throws ApiException {
        ApiResponse<PageTemplateResource> resp = getChallengeTemplatesUsingGETWithHttpInfo(size, page, order);
        return resp.getData();
    }

    /**
     * List and search challenge templates
     * 
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     * @return ApiResponse&lt;PageTemplateResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageTemplateResource> getChallengeTemplatesUsingGETWithHttpInfo(Integer size, Integer page, String order) throws ApiException {
        com.squareup.okhttp.Call call = getChallengeTemplatesUsingGETCall(size, page, order, null, null);
        Type localVarReturnType = new TypeToken<PageTemplateResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List and search challenge templates (asynchronously)
     * 
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChallengeTemplatesUsingGETAsync(Integer size, Integer page, String order, final ApiCallback<PageTemplateResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChallengeTemplatesUsingGETCall(size, page, order, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageTemplateResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getChallengeUsingGET */
    private com.squareup.okhttp.Call getChallengeUsingGETCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getChallengeUsingGET(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/challenges/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve a single challenge details
     * 
     * @param id The challenge id (required)
     * @return ChallengeResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChallengeResource getChallengeUsingGET(Long id) throws ApiException {
        ApiResponse<ChallengeResource> resp = getChallengeUsingGETWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Retrieve a single challenge details
     * 
     * @param id The challenge id (required)
     * @return ApiResponse&lt;ChallengeResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChallengeResource> getChallengeUsingGETWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = getChallengeUsingGETCall(id, null, null);
        Type localVarReturnType = new TypeToken<ChallengeResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a single challenge details (asynchronously)
     * 
     * @param id The challenge id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChallengeUsingGETAsync(Long id, final ApiCallback<ChallengeResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChallengeUsingGETCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChallengeResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getChallengesUsingGET1 */
    private com.squareup.okhttp.Call getChallengesUsingGET1Call(Boolean filterTemplate, Boolean filterActiveCampaign, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/challenges".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (filterTemplate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_template", filterTemplate));
        if (filterActiveCampaign != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_active_campaign", filterActiveCampaign));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Retrieve a list of challenges
     * 
     * @param filterTemplate Filter for challenges that are not tied to campaigns (templates) (optional)
     * @param filterActiveCampaign Filter for challenges that are tied to active campaigns (optional)
     * @return PageChallengeResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageChallengeResource getChallengesUsingGET1(Boolean filterTemplate, Boolean filterActiveCampaign) throws ApiException {
        ApiResponse<PageChallengeResource> resp = getChallengesUsingGET1WithHttpInfo(filterTemplate, filterActiveCampaign);
        return resp.getData();
    }

    /**
     * Retrieve a list of challenges
     * 
     * @param filterTemplate Filter for challenges that are not tied to campaigns (templates) (optional)
     * @param filterActiveCampaign Filter for challenges that are tied to active campaigns (optional)
     * @return ApiResponse&lt;PageChallengeResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageChallengeResource> getChallengesUsingGET1WithHttpInfo(Boolean filterTemplate, Boolean filterActiveCampaign) throws ApiException {
        com.squareup.okhttp.Call call = getChallengesUsingGET1Call(filterTemplate, filterActiveCampaign, null, null);
        Type localVarReturnType = new TypeToken<PageChallengeResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a list of challenges (asynchronously)
     * 
     * @param filterTemplate Filter for challenges that are not tied to campaigns (templates) (optional)
     * @param filterActiveCampaign Filter for challenges that are tied to active campaigns (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChallengesUsingGET1Async(Boolean filterTemplate, Boolean filterActiveCampaign, final ApiCallback<PageChallengeResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChallengesUsingGET1Call(filterTemplate, filterActiveCampaign, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageChallengeResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateChallengeActivityUsingPUT */
    private com.squareup.okhttp.Call updateChallengeActivityUsingPUTCall(Long activityId, Long challengeId, ChallengeActivityResource challengeActivityResource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = challengeActivityResource;
        
        // verify the required parameter 'activityId' is set
        if (activityId == null) {
            throw new ApiException("Missing the required parameter 'activityId' when calling updateChallengeActivityUsingPUT(Async)");
        }
        
        // verify the required parameter 'challengeId' is set
        if (challengeId == null) {
            throw new ApiException("Missing the required parameter 'challengeId' when calling updateChallengeActivityUsingPUT(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/challenges/{challenge_id}/activities/{activity_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "activity_id" + "\\}", apiClient.escapeString(activityId.toString()))
        .replaceAll("\\{" + "challenge_id" + "\\}", apiClient.escapeString(challengeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update a challenge activity
     * 
     * @param activityId The activity id (required)
     * @param challengeId The challenge id (required)
     * @param challengeActivityResource The challenge activity resource object (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateChallengeActivityUsingPUT(Long activityId, Long challengeId, ChallengeActivityResource challengeActivityResource) throws ApiException {
        updateChallengeActivityUsingPUTWithHttpInfo(activityId, challengeId, challengeActivityResource);
    }

    /**
     * Update a challenge activity
     * 
     * @param activityId The activity id (required)
     * @param challengeId The challenge id (required)
     * @param challengeActivityResource The challenge activity resource object (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateChallengeActivityUsingPUTWithHttpInfo(Long activityId, Long challengeId, ChallengeActivityResource challengeActivityResource) throws ApiException {
        com.squareup.okhttp.Call call = updateChallengeActivityUsingPUTCall(activityId, challengeId, challengeActivityResource, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a challenge activity (asynchronously)
     * 
     * @param activityId The activity id (required)
     * @param challengeId The challenge id (required)
     * @param challengeActivityResource The challenge activity resource object (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateChallengeActivityUsingPUTAsync(Long activityId, Long challengeId, ChallengeActivityResource challengeActivityResource, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateChallengeActivityUsingPUTCall(activityId, challengeId, challengeActivityResource, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateChallengeTemplateUsingPUT */
    private com.squareup.okhttp.Call updateChallengeTemplateUsingPUTCall(String id, TemplateResource challengeTemplateResource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = challengeTemplateResource;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateChallengeTemplateUsingPUT(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/challenges/templates/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update a challenge template
     * 
     * @param id The id of the template (required)
     * @param challengeTemplateResource The challenge template resource object (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateChallengeTemplateUsingPUT(String id, TemplateResource challengeTemplateResource) throws ApiException {
        updateChallengeTemplateUsingPUTWithHttpInfo(id, challengeTemplateResource);
    }

    /**
     * Update a challenge template
     * 
     * @param id The id of the template (required)
     * @param challengeTemplateResource The challenge template resource object (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateChallengeTemplateUsingPUTWithHttpInfo(String id, TemplateResource challengeTemplateResource) throws ApiException {
        com.squareup.okhttp.Call call = updateChallengeTemplateUsingPUTCall(id, challengeTemplateResource, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a challenge template (asynchronously)
     * 
     * @param id The id of the template (required)
     * @param challengeTemplateResource The challenge template resource object (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateChallengeTemplateUsingPUTAsync(String id, TemplateResource challengeTemplateResource, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateChallengeTemplateUsingPUTCall(id, challengeTemplateResource, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateChallengeUsingPUT */
    private com.squareup.okhttp.Call updateChallengeUsingPUTCall(Long id, ChallengeResource challengeResource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = challengeResource;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateChallengeUsingPUT(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/challenges/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Update a challenge&#39;s information
     * If the challenge is a copy, changes will propagate to all the related challenges
     * @param id The challenge id (required)
     * @param challengeResource The challenge resource object (optional)
     * @return ChallengeResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChallengeResource updateChallengeUsingPUT(Long id, ChallengeResource challengeResource) throws ApiException {
        ApiResponse<ChallengeResource> resp = updateChallengeUsingPUTWithHttpInfo(id, challengeResource);
        return resp.getData();
    }

    /**
     * Update a challenge&#39;s information
     * If the challenge is a copy, changes will propagate to all the related challenges
     * @param id The challenge id (required)
     * @param challengeResource The challenge resource object (optional)
     * @return ApiResponse&lt;ChallengeResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChallengeResource> updateChallengeUsingPUTWithHttpInfo(Long id, ChallengeResource challengeResource) throws ApiException {
        com.squareup.okhttp.Call call = updateChallengeUsingPUTCall(id, challengeResource, null, null);
        Type localVarReturnType = new TypeToken<ChallengeResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a challenge&#39;s information (asynchronously)
     * If the challenge is a copy, changes will propagate to all the related challenges
     * @param id The challenge id (required)
     * @param challengeResource The challenge resource object (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateChallengeUsingPUTAsync(Long id, ChallengeResource challengeResource, final ApiCallback<ChallengeResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateChallengeUsingPUTCall(id, challengeResource, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChallengeResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
