/*
 * Knetik Platform API Documentation Latest
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.EntitlementItem;
import io.swagger.client.model.InvoiceResource;
import io.swagger.client.model.ItemTemplateResource;
import io.swagger.client.model.PageResourceEntitlementItem;
import io.swagger.client.model.PageResourceItemTemplateResource;
import io.swagger.client.model.PageResourceUserInventoryResource;
import io.swagger.client.model.PageResourceUserItemLogResource;
import io.swagger.client.model.UserInventoryAddRequest;
import io.swagger.client.model.UserInventoryResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersInventoryApi {
    private ApiClient apiClient;

    public UsersInventoryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersInventoryApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for addItemUsingPOST1 */
    private com.squareup.okhttp.Call addItemUsingPOST1Call(Integer id, UserInventoryAddRequest userInventoryAddRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = userInventoryAddRequest;
        
        // create path and map variables
        String localVarPath = "/users/{id}/inventory".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addItemUsingPOST1ValidateBeforeCall(Integer id, UserInventoryAddRequest userInventoryAddRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addItemUsingPOST1(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addItemUsingPOST1Call(id, userInventoryAddRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Adds an item to the user inventory
     * The inventory is fulfilled asynchronously UNLESS the invoice is explicitely skipped. Depending on the use case, it might require the client to verify that the entitlement was added after the fact or configure a BRE rule to get a notification in real time
     * @param id The id of the user (required)
     * @param userInventoryAddRequest The user inventory add request object (optional)
     * @return InvoiceResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InvoiceResource addItemUsingPOST1(Integer id, UserInventoryAddRequest userInventoryAddRequest) throws ApiException {
        ApiResponse<InvoiceResource> resp = addItemUsingPOST1WithHttpInfo(id, userInventoryAddRequest);
        return resp.getData();
    }

    /**
     * Adds an item to the user inventory
     * The inventory is fulfilled asynchronously UNLESS the invoice is explicitely skipped. Depending on the use case, it might require the client to verify that the entitlement was added after the fact or configure a BRE rule to get a notification in real time
     * @param id The id of the user (required)
     * @param userInventoryAddRequest The user inventory add request object (optional)
     * @return ApiResponse&lt;InvoiceResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InvoiceResource> addItemUsingPOST1WithHttpInfo(Integer id, UserInventoryAddRequest userInventoryAddRequest) throws ApiException {
        com.squareup.okhttp.Call call = addItemUsingPOST1ValidateBeforeCall(id, userInventoryAddRequest, null, null);
        Type localVarReturnType = new TypeToken<InvoiceResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds an item to the user inventory (asynchronously)
     * The inventory is fulfilled asynchronously UNLESS the invoice is explicitely skipped. Depending on the use case, it might require the client to verify that the entitlement was added after the fact or configure a BRE rule to get a notification in real time
     * @param id The id of the user (required)
     * @param userInventoryAddRequest The user inventory add request object (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addItemUsingPOST1Async(Integer id, UserInventoryAddRequest userInventoryAddRequest, final ApiCallback<InvoiceResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addItemUsingPOST1ValidateBeforeCall(id, userInventoryAddRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InvoiceResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createItemUsingPOST */
    private com.squareup.okhttp.Call createItemUsingPOSTCall(EntitlementItem entitlementItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = entitlementItem;
        
        // create path and map variables
        String localVarPath = "/entitlements".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createItemUsingPOSTValidateBeforeCall(EntitlementItem entitlementItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = createItemUsingPOSTCall(entitlementItem, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create an entitlement item
     * 
     * @param entitlementItem The entitlement item object (optional)
     * @return EntitlementItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntitlementItem createItemUsingPOST(EntitlementItem entitlementItem) throws ApiException {
        ApiResponse<EntitlementItem> resp = createItemUsingPOSTWithHttpInfo(entitlementItem);
        return resp.getData();
    }

    /**
     * Create an entitlement item
     * 
     * @param entitlementItem The entitlement item object (optional)
     * @return ApiResponse&lt;EntitlementItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntitlementItem> createItemUsingPOSTWithHttpInfo(EntitlementItem entitlementItem) throws ApiException {
        com.squareup.okhttp.Call call = createItemUsingPOSTValidateBeforeCall(entitlementItem, null, null);
        Type localVarReturnType = new TypeToken<EntitlementItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an entitlement item (asynchronously)
     * 
     * @param entitlementItem The entitlement item object (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createItemUsingPOSTAsync(EntitlementItem entitlementItem, final ApiCallback<EntitlementItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createItemUsingPOSTValidateBeforeCall(entitlementItem, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntitlementItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for createTemplateUsingPOST3 */
    private com.squareup.okhttp.Call createTemplateUsingPOST3Call(ItemTemplateResource template, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = template;
        
        // create path and map variables
        String localVarPath = "/entitlements/templates".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTemplateUsingPOST3ValidateBeforeCall(ItemTemplateResource template, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = createTemplateUsingPOST3Call(template, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create an entitlement template
     * Entitlement templates define a type of entitlement and the properties they have
     * @param template The entitlement template to be created (optional)
     * @return ItemTemplateResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemTemplateResource createTemplateUsingPOST3(ItemTemplateResource template) throws ApiException {
        ApiResponse<ItemTemplateResource> resp = createTemplateUsingPOST3WithHttpInfo(template);
        return resp.getData();
    }

    /**
     * Create an entitlement template
     * Entitlement templates define a type of entitlement and the properties they have
     * @param template The entitlement template to be created (optional)
     * @return ApiResponse&lt;ItemTemplateResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemTemplateResource> createTemplateUsingPOST3WithHttpInfo(ItemTemplateResource template) throws ApiException {
        com.squareup.okhttp.Call call = createTemplateUsingPOST3ValidateBeforeCall(template, null, null);
        Type localVarReturnType = new TypeToken<ItemTemplateResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an entitlement template (asynchronously)
     * Entitlement templates define a type of entitlement and the properties they have
     * @param template The entitlement template to be created (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTemplateUsingPOST3Async(ItemTemplateResource template, final ApiCallback<ItemTemplateResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTemplateUsingPOST3ValidateBeforeCall(template, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemTemplateResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteEntitlementTemplateUsingDELETE */
    private com.squareup.okhttp.Call deleteEntitlementTemplateUsingDELETECall(String id, String cascade, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/entitlements/templates/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (cascade != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cascade", cascade));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteEntitlementTemplateUsingDELETEValidateBeforeCall(String id, String cascade, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteEntitlementTemplateUsingDELETE(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteEntitlementTemplateUsingDELETECall(id, cascade, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an entitlement template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
     * @param id The id of the template (required)
     * @param cascade The value needed to delete used templates (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteEntitlementTemplateUsingDELETE(String id, String cascade) throws ApiException {
        deleteEntitlementTemplateUsingDELETEWithHttpInfo(id, cascade);
    }

    /**
     * Delete an entitlement template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
     * @param id The id of the template (required)
     * @param cascade The value needed to delete used templates (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteEntitlementTemplateUsingDELETEWithHttpInfo(String id, String cascade) throws ApiException {
        com.squareup.okhttp.Call call = deleteEntitlementTemplateUsingDELETEValidateBeforeCall(id, cascade, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an entitlement template (asynchronously)
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
     * @param id The id of the template (required)
     * @param cascade The value needed to delete used templates (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEntitlementTemplateUsingDELETEAsync(String id, String cascade, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEntitlementTemplateUsingDELETEValidateBeforeCall(id, cascade, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteItemUsingDELETE */
    private com.squareup.okhttp.Call deleteItemUsingDELETECall(Integer entitlementId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/entitlements/{entitlement_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "entitlement_id" + "\\}", apiClient.escapeString(entitlementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteItemUsingDELETEValidateBeforeCall(Integer entitlementId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entitlementId' is set
        if (entitlementId == null) {
            throw new ApiException("Missing the required parameter 'entitlementId' when calling deleteItemUsingDELETE(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteItemUsingDELETECall(entitlementId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an entitlement item
     * 
     * @param entitlementId The id of the entitlement (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteItemUsingDELETE(Integer entitlementId) throws ApiException {
        deleteItemUsingDELETEWithHttpInfo(entitlementId);
    }

    /**
     * Delete an entitlement item
     * 
     * @param entitlementId The id of the entitlement (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteItemUsingDELETEWithHttpInfo(Integer entitlementId) throws ApiException {
        com.squareup.okhttp.Call call = deleteItemUsingDELETEValidateBeforeCall(entitlementId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an entitlement item (asynchronously)
     * 
     * @param entitlementId The id of the entitlement (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteItemUsingDELETEAsync(Integer entitlementId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteItemUsingDELETEValidateBeforeCall(entitlementId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for entitlementCheckUsingGET */
    private com.squareup.okhttp.Call entitlementCheckUsingGETCall(String userId, Integer itemId, String sku, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/entitlements/{item_id}/check".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
        .replaceAll("\\{" + "item_id" + "\\}", apiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (sku != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sku", sku));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call entitlementCheckUsingGETValidateBeforeCall(String userId, Integer itemId, String sku, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling entitlementCheckUsingGET(Async)");
        }
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling entitlementCheckUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = entitlementCheckUsingGETCall(userId, itemId, sku, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Check for access to an item without consuming
     * Useful for pre-check and accounts for all various buisness rules
     * @param userId The id of the user to check for or &#39;me&#39; for logged in user (required)
     * @param itemId The id of the item (required)
     * @param sku The specific sku of an entitlement list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void entitlementCheckUsingGET(String userId, Integer itemId, String sku) throws ApiException {
        entitlementCheckUsingGETWithHttpInfo(userId, itemId, sku);
    }

    /**
     * Check for access to an item without consuming
     * Useful for pre-check and accounts for all various buisness rules
     * @param userId The id of the user to check for or &#39;me&#39; for logged in user (required)
     * @param itemId The id of the item (required)
     * @param sku The specific sku of an entitlement list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> entitlementCheckUsingGETWithHttpInfo(String userId, Integer itemId, String sku) throws ApiException {
        com.squareup.okhttp.Call call = entitlementCheckUsingGETValidateBeforeCall(userId, itemId, sku, null, null);
        return apiClient.execute(call);
    }

    /**
     * Check for access to an item without consuming (asynchronously)
     * Useful for pre-check and accounts for all various buisness rules
     * @param userId The id of the user to check for or &#39;me&#39; for logged in user (required)
     * @param itemId The id of the item (required)
     * @param sku The specific sku of an entitlement list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call entitlementCheckUsingGETAsync(String userId, Integer itemId, String sku, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = entitlementCheckUsingGETValidateBeforeCall(userId, itemId, sku, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for entitlementUseUsingPOST */
    private com.squareup.okhttp.Call entitlementUseUsingPOSTCall(String userId, Integer itemId, String sku, String info, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/entitlements/{item_id}/use".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
        .replaceAll("\\{" + "item_id" + "\\}", apiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (sku != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sku", sku));
        if (info != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "info", info));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call entitlementUseUsingPOSTValidateBeforeCall(String userId, Integer itemId, String sku, String info, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling entitlementUseUsingPOST(Async)");
        }
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling entitlementUseUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = entitlementUseUsingPOSTCall(userId, itemId, sku, info, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Use an item
     * 
     * @param userId The id of the user to check for or &#39;me&#39; for logged in user (required)
     * @param itemId The id of the item (required)
     * @param sku The specific sku of an entitlement_list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)
     * @param info Any additional info to add to the log about this use (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void entitlementUseUsingPOST(String userId, Integer itemId, String sku, String info) throws ApiException {
        entitlementUseUsingPOSTWithHttpInfo(userId, itemId, sku, info);
    }

    /**
     * Use an item
     * 
     * @param userId The id of the user to check for or &#39;me&#39; for logged in user (required)
     * @param itemId The id of the item (required)
     * @param sku The specific sku of an entitlement_list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)
     * @param info Any additional info to add to the log about this use (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> entitlementUseUsingPOSTWithHttpInfo(String userId, Integer itemId, String sku, String info) throws ApiException {
        com.squareup.okhttp.Call call = entitlementUseUsingPOSTValidateBeforeCall(userId, itemId, sku, info, null, null);
        return apiClient.execute(call);
    }

    /**
     * Use an item (asynchronously)
     * 
     * @param userId The id of the user to check for or &#39;me&#39; for logged in user (required)
     * @param itemId The id of the item (required)
     * @param sku The specific sku of an entitlement_list addition to check entitlement for. This is of very limited and specific use and should generally be left out (optional)
     * @param info Any additional info to add to the log about this use (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call entitlementUseUsingPOSTAsync(String userId, Integer itemId, String sku, String info, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = entitlementUseUsingPOSTValidateBeforeCall(userId, itemId, sku, info, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getCurrenciesUsingGET1 */
    private com.squareup.okhttp.Call getCurrenciesUsingGET1Call(Integer size, Integer page, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/entitlements".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCurrenciesUsingGET1ValidateBeforeCall(Integer size, Integer page, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getCurrenciesUsingGET1Call(size, page, order, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List and search entitlement items
     * 
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @return PageResourceEntitlementItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageResourceEntitlementItem getCurrenciesUsingGET1(Integer size, Integer page, String order) throws ApiException {
        ApiResponse<PageResourceEntitlementItem> resp = getCurrenciesUsingGET1WithHttpInfo(size, page, order);
        return resp.getData();
    }

    /**
     * List and search entitlement items
     * 
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @return ApiResponse&lt;PageResourceEntitlementItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageResourceEntitlementItem> getCurrenciesUsingGET1WithHttpInfo(Integer size, Integer page, String order) throws ApiException {
        com.squareup.okhttp.Call call = getCurrenciesUsingGET1ValidateBeforeCall(size, page, order, null, null);
        Type localVarReturnType = new TypeToken<PageResourceEntitlementItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List and search entitlement items (asynchronously)
     * 
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCurrenciesUsingGET1Async(Integer size, Integer page, String order, final ApiCallback<PageResourceEntitlementItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCurrenciesUsingGET1ValidateBeforeCall(size, page, order, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageResourceEntitlementItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getEntitlementTemplateUsingGET */
    private com.squareup.okhttp.Call getEntitlementTemplateUsingGETCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/entitlements/templates/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEntitlementTemplateUsingGETValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getEntitlementTemplateUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getEntitlementTemplateUsingGETCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a single entitlement template
     * 
     * @param id The id of the template (required)
     * @return ItemTemplateResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemTemplateResource getEntitlementTemplateUsingGET(String id) throws ApiException {
        ApiResponse<ItemTemplateResource> resp = getEntitlementTemplateUsingGETWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get a single entitlement template
     * 
     * @param id The id of the template (required)
     * @return ApiResponse&lt;ItemTemplateResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemTemplateResource> getEntitlementTemplateUsingGETWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = getEntitlementTemplateUsingGETValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<ItemTemplateResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a single entitlement template (asynchronously)
     * 
     * @param id The id of the template (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEntitlementTemplateUsingGETAsync(String id, final ApiCallback<ItemTemplateResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEntitlementTemplateUsingGETValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemTemplateResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getEntitlementTemplatesUsingGET */
    private com.squareup.okhttp.Call getEntitlementTemplatesUsingGETCall(Integer size, Integer page, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/entitlements/templates".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEntitlementTemplatesUsingGETValidateBeforeCall(Integer size, Integer page, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getEntitlementTemplatesUsingGETCall(size, page, order, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List and search entitlement templates
     * 
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @return PageResourceItemTemplateResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageResourceItemTemplateResource getEntitlementTemplatesUsingGET(Integer size, Integer page, String order) throws ApiException {
        ApiResponse<PageResourceItemTemplateResource> resp = getEntitlementTemplatesUsingGETWithHttpInfo(size, page, order);
        return resp.getData();
    }

    /**
     * List and search entitlement templates
     * 
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @return ApiResponse&lt;PageResourceItemTemplateResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageResourceItemTemplateResource> getEntitlementTemplatesUsingGETWithHttpInfo(Integer size, Integer page, String order) throws ApiException {
        com.squareup.okhttp.Call call = getEntitlementTemplatesUsingGETValidateBeforeCall(size, page, order, null, null);
        Type localVarReturnType = new TypeToken<PageResourceItemTemplateResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List and search entitlement templates (asynchronously)
     * 
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEntitlementTemplatesUsingGETAsync(Integer size, Integer page, String order, final ApiCallback<PageResourceItemTemplateResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEntitlementTemplatesUsingGETValidateBeforeCall(size, page, order, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageResourceItemTemplateResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getInventoryListUsingGET */
    private com.squareup.okhttp.Call getInventoryListUsingGETCall(Boolean inactive, Integer size, Integer page, String filterItemName, String filterUsername, String filterGroup, String filterDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/inventories".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (inactive != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "inactive", inactive));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (filterItemName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_item_name", filterItemName));
        if (filterUsername != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_username", filterUsername));
        if (filterGroup != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_group", filterGroup));
        if (filterDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_date", filterDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInventoryListUsingGETValidateBeforeCall(Boolean inactive, Integer size, Integer page, String filterItemName, String filterUsername, String filterGroup, String filterDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getInventoryListUsingGETCall(inactive, size, page, filterItemName, filterUsername, filterGroup, filterDate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List the user inventory entries for all users
     * 
     * @param inactive If true, accepts inactive user inventories (optional, default to false)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param filterItemName Filter by items whose name starts with a string (optional)
     * @param filterUsername Filter by entries owned by the user with the specified username (optional)
     * @param filterGroup Filter by entries owned by the users in a given group, by unique name (optional)
     * @param filterDate A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
     * @return PageResourceUserInventoryResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageResourceUserInventoryResource getInventoryListUsingGET(Boolean inactive, Integer size, Integer page, String filterItemName, String filterUsername, String filterGroup, String filterDate) throws ApiException {
        ApiResponse<PageResourceUserInventoryResource> resp = getInventoryListUsingGETWithHttpInfo(inactive, size, page, filterItemName, filterUsername, filterGroup, filterDate);
        return resp.getData();
    }

    /**
     * List the user inventory entries for all users
     * 
     * @param inactive If true, accepts inactive user inventories (optional, default to false)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param filterItemName Filter by items whose name starts with a string (optional)
     * @param filterUsername Filter by entries owned by the user with the specified username (optional)
     * @param filterGroup Filter by entries owned by the users in a given group, by unique name (optional)
     * @param filterDate A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
     * @return ApiResponse&lt;PageResourceUserInventoryResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageResourceUserInventoryResource> getInventoryListUsingGETWithHttpInfo(Boolean inactive, Integer size, Integer page, String filterItemName, String filterUsername, String filterGroup, String filterDate) throws ApiException {
        com.squareup.okhttp.Call call = getInventoryListUsingGETValidateBeforeCall(inactive, size, page, filterItemName, filterUsername, filterGroup, filterDate, null, null);
        Type localVarReturnType = new TypeToken<PageResourceUserInventoryResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List the user inventory entries for all users (asynchronously)
     * 
     * @param inactive If true, accepts inactive user inventories (optional, default to false)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param filterItemName Filter by items whose name starts with a string (optional)
     * @param filterUsername Filter by entries owned by the user with the specified username (optional)
     * @param filterGroup Filter by entries owned by the users in a given group, by unique name (optional)
     * @param filterDate A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInventoryListUsingGETAsync(Boolean inactive, Integer size, Integer page, String filterItemName, String filterUsername, String filterGroup, String filterDate, final ApiCallback<PageResourceUserInventoryResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInventoryListUsingGETValidateBeforeCall(inactive, size, page, filterItemName, filterUsername, filterGroup, filterDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageResourceUserInventoryResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getInventoryUsingGET */
    private com.squareup.okhttp.Call getInventoryUsingGETCall(Integer userId, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/inventory/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInventoryUsingGETValidateBeforeCall(Integer userId, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getInventoryUsingGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getInventoryUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getInventoryUsingGETCall(userId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get an inventory entry
     * 
     * @param userId The id of the inventory owner or &#39;me&#39; for the logged in user (required)
     * @param id The id of the user inventory (required)
     * @return UserInventoryResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserInventoryResource getInventoryUsingGET(Integer userId, Integer id) throws ApiException {
        ApiResponse<UserInventoryResource> resp = getInventoryUsingGETWithHttpInfo(userId, id);
        return resp.getData();
    }

    /**
     * Get an inventory entry
     * 
     * @param userId The id of the inventory owner or &#39;me&#39; for the logged in user (required)
     * @param id The id of the user inventory (required)
     * @return ApiResponse&lt;UserInventoryResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserInventoryResource> getInventoryUsingGETWithHttpInfo(Integer userId, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = getInventoryUsingGETValidateBeforeCall(userId, id, null, null);
        Type localVarReturnType = new TypeToken<UserInventoryResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an inventory entry (asynchronously)
     * 
     * @param userId The id of the inventory owner or &#39;me&#39; for the logged in user (required)
     * @param id The id of the user inventory (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInventoryUsingGETAsync(Integer userId, Integer id, final ApiCallback<UserInventoryResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInventoryUsingGETValidateBeforeCall(userId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserInventoryResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getItemUsingGET */
    private com.squareup.okhttp.Call getItemUsingGETCall(Integer entitlementId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/entitlements/{entitlement_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "entitlement_id" + "\\}", apiClient.escapeString(entitlementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getItemUsingGETValidateBeforeCall(Integer entitlementId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entitlementId' is set
        if (entitlementId == null) {
            throw new ApiException("Missing the required parameter 'entitlementId' when calling getItemUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getItemUsingGETCall(entitlementId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a single entitlement item
     * 
     * @param entitlementId The id of the entitlement (required)
     * @return EntitlementItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntitlementItem getItemUsingGET(Integer entitlementId) throws ApiException {
        ApiResponse<EntitlementItem> resp = getItemUsingGETWithHttpInfo(entitlementId);
        return resp.getData();
    }

    /**
     * Get a single entitlement item
     * 
     * @param entitlementId The id of the entitlement (required)
     * @return ApiResponse&lt;EntitlementItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntitlementItem> getItemUsingGETWithHttpInfo(Integer entitlementId) throws ApiException {
        com.squareup.okhttp.Call call = getItemUsingGETValidateBeforeCall(entitlementId, null, null);
        Type localVarReturnType = new TypeToken<EntitlementItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a single entitlement item (asynchronously)
     * 
     * @param entitlementId The id of the entitlement (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getItemUsingGETAsync(Integer entitlementId, final ApiCallback<EntitlementItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getItemUsingGETValidateBeforeCall(entitlementId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EntitlementItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUserInventoryListUsingGET */
    private com.squareup.okhttp.Call getUserInventoryListUsingGETCall(Integer id, Boolean inactive, Integer size, Integer page, String filterItemName, Long filterMinDate, Long filterMaxDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{id}/inventory".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (inactive != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "inactive", inactive));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (filterItemName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_item_name", filterItemName));
        if (filterMinDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_min_date", filterMinDate));
        if (filterMaxDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_max_date", filterMaxDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserInventoryListUsingGETValidateBeforeCall(Integer id, Boolean inactive, Integer size, Integer page, String filterItemName, Long filterMinDate, Long filterMaxDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getUserInventoryListUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUserInventoryListUsingGETCall(id, inactive, size, page, filterItemName, filterMinDate, filterMaxDate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List the user inventory entries for a given user
     * 
     * @param id The id of the user (required)
     * @param inactive If true, accepts inactive user inventories (optional, default to false)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param filterItemName Filter by items whose name starts with a string (optional)
     * @param filterMinDate Filter for inventory added after the specified date, unix timestamp in seconds (optional)
     * @param filterMaxDate Filter for inventory added before the specified date, unix timestamp in seconds (optional)
     * @return PageResourceUserInventoryResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageResourceUserInventoryResource getUserInventoryListUsingGET(Integer id, Boolean inactive, Integer size, Integer page, String filterItemName, Long filterMinDate, Long filterMaxDate) throws ApiException {
        ApiResponse<PageResourceUserInventoryResource> resp = getUserInventoryListUsingGETWithHttpInfo(id, inactive, size, page, filterItemName, filterMinDate, filterMaxDate);
        return resp.getData();
    }

    /**
     * List the user inventory entries for a given user
     * 
     * @param id The id of the user (required)
     * @param inactive If true, accepts inactive user inventories (optional, default to false)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param filterItemName Filter by items whose name starts with a string (optional)
     * @param filterMinDate Filter for inventory added after the specified date, unix timestamp in seconds (optional)
     * @param filterMaxDate Filter for inventory added before the specified date, unix timestamp in seconds (optional)
     * @return ApiResponse&lt;PageResourceUserInventoryResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageResourceUserInventoryResource> getUserInventoryListUsingGETWithHttpInfo(Integer id, Boolean inactive, Integer size, Integer page, String filterItemName, Long filterMinDate, Long filterMaxDate) throws ApiException {
        com.squareup.okhttp.Call call = getUserInventoryListUsingGETValidateBeforeCall(id, inactive, size, page, filterItemName, filterMinDate, filterMaxDate, null, null);
        Type localVarReturnType = new TypeToken<PageResourceUserInventoryResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List the user inventory entries for a given user (asynchronously)
     * 
     * @param id The id of the user (required)
     * @param inactive If true, accepts inactive user inventories (optional, default to false)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param filterItemName Filter by items whose name starts with a string (optional)
     * @param filterMinDate Filter for inventory added after the specified date, unix timestamp in seconds (optional)
     * @param filterMaxDate Filter for inventory added before the specified date, unix timestamp in seconds (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserInventoryListUsingGETAsync(Integer id, Boolean inactive, Integer size, Integer page, String filterItemName, Long filterMinDate, Long filterMaxDate, final ApiCallback<PageResourceUserInventoryResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserInventoryListUsingGETValidateBeforeCall(id, inactive, size, page, filterItemName, filterMinDate, filterMaxDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageResourceUserInventoryResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUserInventoryLogUsingGET */
    private com.squareup.okhttp.Call getUserInventoryLogUsingGETCall(String userId, Integer id, Integer size, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/inventory/{id}/log".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserInventoryLogUsingGETValidateBeforeCall(String userId, Integer id, Integer size, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserInventoryLogUsingGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getUserInventoryLogUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUserInventoryLogUsingGETCall(userId, id, size, page, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List the log entries for this inventory entry.
     * 
     * @param userId The id of the inventory owner or &#39;me&#39; for the logged in user (required)
     * @param id The id of the user inventory (required)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @return PageResourceUserItemLogResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageResourceUserItemLogResource getUserInventoryLogUsingGET(String userId, Integer id, Integer size, Integer page) throws ApiException {
        ApiResponse<PageResourceUserItemLogResource> resp = getUserInventoryLogUsingGETWithHttpInfo(userId, id, size, page);
        return resp.getData();
    }

    /**
     * List the log entries for this inventory entry.
     * 
     * @param userId The id of the inventory owner or &#39;me&#39; for the logged in user (required)
     * @param id The id of the user inventory (required)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @return ApiResponse&lt;PageResourceUserItemLogResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageResourceUserItemLogResource> getUserInventoryLogUsingGETWithHttpInfo(String userId, Integer id, Integer size, Integer page) throws ApiException {
        com.squareup.okhttp.Call call = getUserInventoryLogUsingGETValidateBeforeCall(userId, id, size, page, null, null);
        Type localVarReturnType = new TypeToken<PageResourceUserItemLogResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List the log entries for this inventory entry. (asynchronously)
     * 
     * @param userId The id of the inventory owner or &#39;me&#39; for the logged in user (required)
     * @param id The id of the user inventory (required)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserInventoryLogUsingGETAsync(String userId, Integer id, Integer size, Integer page, final ApiCallback<PageResourceUserItemLogResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserInventoryLogUsingGETValidateBeforeCall(userId, id, size, page, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageResourceUserItemLogResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateItemUsingPUT1 */
    private com.squareup.okhttp.Call updateItemUsingPUT1Call(Integer entitlementId, EntitlementItem entitlementItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = entitlementItem;
        
        // create path and map variables
        String localVarPath = "/entitlements/{entitlement_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "entitlement_id" + "\\}", apiClient.escapeString(entitlementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateItemUsingPUT1ValidateBeforeCall(Integer entitlementId, EntitlementItem entitlementItem, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entitlementId' is set
        if (entitlementId == null) {
            throw new ApiException("Missing the required parameter 'entitlementId' when calling updateItemUsingPUT1(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateItemUsingPUT1Call(entitlementId, entitlementItem, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an entitlement item
     * 
     * @param entitlementId The id of the entitlement (required)
     * @param entitlementItem The entitlement item object (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateItemUsingPUT1(Integer entitlementId, EntitlementItem entitlementItem) throws ApiException {
        updateItemUsingPUT1WithHttpInfo(entitlementId, entitlementItem);
    }

    /**
     * Update an entitlement item
     * 
     * @param entitlementId The id of the entitlement (required)
     * @param entitlementItem The entitlement item object (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateItemUsingPUT1WithHttpInfo(Integer entitlementId, EntitlementItem entitlementItem) throws ApiException {
        com.squareup.okhttp.Call call = updateItemUsingPUT1ValidateBeforeCall(entitlementId, entitlementItem, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update an entitlement item (asynchronously)
     * 
     * @param entitlementId The id of the entitlement (required)
     * @param entitlementItem The entitlement item object (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateItemUsingPUT1Async(Integer entitlementId, EntitlementItem entitlementItem, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateItemUsingPUT1ValidateBeforeCall(entitlementId, entitlementItem, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateTemplateUsingPUT3 */
    private com.squareup.okhttp.Call updateTemplateUsingPUT3Call(String id, ItemTemplateResource template, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = template;
        
        // create path and map variables
        String localVarPath = "/entitlements/templates/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTemplateUsingPUT3ValidateBeforeCall(String id, ItemTemplateResource template, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateTemplateUsingPUT3(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateTemplateUsingPUT3Call(id, template, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an entitlement template
     * 
     * @param id The id of the template (required)
     * @param template The updated template (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateTemplateUsingPUT3(String id, ItemTemplateResource template) throws ApiException {
        updateTemplateUsingPUT3WithHttpInfo(id, template);
    }

    /**
     * Update an entitlement template
     * 
     * @param id The id of the template (required)
     * @param template The updated template (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateTemplateUsingPUT3WithHttpInfo(String id, ItemTemplateResource template) throws ApiException {
        com.squareup.okhttp.Call call = updateTemplateUsingPUT3ValidateBeforeCall(id, template, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update an entitlement template (asynchronously)
     * 
     * @param id The id of the template (required)
     * @param template The updated template (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTemplateUsingPUT3Async(String id, ItemTemplateResource template, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTemplateUsingPUT3ValidateBeforeCall(id, template, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateUserInventoryBehaviorDataUsingPUT */
    private com.squareup.okhttp.Call updateUserInventoryBehaviorDataUsingPUTCall(Integer userId, Integer id, Object data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/inventory/{id}/behavior-data".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateUserInventoryBehaviorDataUsingPUTValidateBeforeCall(Integer userId, Integer id, Object data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateUserInventoryBehaviorDataUsingPUT(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateUserInventoryBehaviorDataUsingPUT(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateUserInventoryBehaviorDataUsingPUTCall(userId, id, data, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set the behavior data for an inventory entry
     * 
     * @param userId The id of the user (required)
     * @param id The id of the user inventory (required)
     * @param data The data map (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateUserInventoryBehaviorDataUsingPUT(Integer userId, Integer id, Object data) throws ApiException {
        updateUserInventoryBehaviorDataUsingPUTWithHttpInfo(userId, id, data);
    }

    /**
     * Set the behavior data for an inventory entry
     * 
     * @param userId The id of the user (required)
     * @param id The id of the user inventory (required)
     * @param data The data map (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateUserInventoryBehaviorDataUsingPUTWithHttpInfo(Integer userId, Integer id, Object data) throws ApiException {
        com.squareup.okhttp.Call call = updateUserInventoryBehaviorDataUsingPUTValidateBeforeCall(userId, id, data, null, null);
        return apiClient.execute(call);
    }

    /**
     * Set the behavior data for an inventory entry (asynchronously)
     * 
     * @param userId The id of the user (required)
     * @param id The id of the user inventory (required)
     * @param data The data map (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUserInventoryBehaviorDataUsingPUTAsync(Integer userId, Integer id, Object data, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUserInventoryBehaviorDataUsingPUTValidateBeforeCall(userId, id, data, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateUserInventoryExpiresUsingPUT */
    private com.squareup.okhttp.Call updateUserInventoryExpiresUsingPUTCall(Integer userId, Integer id, Long timestamp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = timestamp;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/inventory/{id}/expires".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateUserInventoryExpiresUsingPUTValidateBeforeCall(Integer userId, Integer id, Long timestamp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateUserInventoryExpiresUsingPUT(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateUserInventoryExpiresUsingPUT(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateUserInventoryExpiresUsingPUTCall(userId, id, timestamp, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set the expiration date
     * Will change the current grace period for a subscription but not the bill date (possibly even ending before having the chance to re-bill)
     * @param userId user_id (required)
     * @param id The id of the user inventory (required)
     * @param timestamp The new expiration date as a unix timestamp in seconds. May be null (no body). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateUserInventoryExpiresUsingPUT(Integer userId, Integer id, Long timestamp) throws ApiException {
        updateUserInventoryExpiresUsingPUTWithHttpInfo(userId, id, timestamp);
    }

    /**
     * Set the expiration date
     * Will change the current grace period for a subscription but not the bill date (possibly even ending before having the chance to re-bill)
     * @param userId user_id (required)
     * @param id The id of the user inventory (required)
     * @param timestamp The new expiration date as a unix timestamp in seconds. May be null (no body). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateUserInventoryExpiresUsingPUTWithHttpInfo(Integer userId, Integer id, Long timestamp) throws ApiException {
        com.squareup.okhttp.Call call = updateUserInventoryExpiresUsingPUTValidateBeforeCall(userId, id, timestamp, null, null);
        return apiClient.execute(call);
    }

    /**
     * Set the expiration date (asynchronously)
     * Will change the current grace period for a subscription but not the bill date (possibly even ending before having the chance to re-bill)
     * @param userId user_id (required)
     * @param id The id of the user inventory (required)
     * @param timestamp The new expiration date as a unix timestamp in seconds. May be null (no body). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUserInventoryExpiresUsingPUTAsync(Integer userId, Integer id, Long timestamp, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUserInventoryExpiresUsingPUTValidateBeforeCall(userId, id, timestamp, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateUserInventoryStatusUsingPUT */
    private com.squareup.okhttp.Call updateUserInventoryStatusUsingPUTCall(Integer userId, Integer id, String inventoryStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = inventoryStatus;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/inventory/{id}/status".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()))
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateUserInventoryStatusUsingPUTValidateBeforeCall(Integer userId, Integer id, String inventoryStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateUserInventoryStatusUsingPUT(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateUserInventoryStatusUsingPUT(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateUserInventoryStatusUsingPUTCall(userId, id, inventoryStatus, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set the status for an inventory entry
     * 
     * @param userId The id of the user (required)
     * @param id The id of the user inventory (required)
     * @param inventoryStatus The inventory status object (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateUserInventoryStatusUsingPUT(Integer userId, Integer id, String inventoryStatus) throws ApiException {
        updateUserInventoryStatusUsingPUTWithHttpInfo(userId, id, inventoryStatus);
    }

    /**
     * Set the status for an inventory entry
     * 
     * @param userId The id of the user (required)
     * @param id The id of the user inventory (required)
     * @param inventoryStatus The inventory status object (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateUserInventoryStatusUsingPUTWithHttpInfo(Integer userId, Integer id, String inventoryStatus) throws ApiException {
        com.squareup.okhttp.Call call = updateUserInventoryStatusUsingPUTValidateBeforeCall(userId, id, inventoryStatus, null, null);
        return apiClient.execute(call);
    }

    /**
     * Set the status for an inventory entry (asynchronously)
     * 
     * @param userId The id of the user (required)
     * @param id The id of the user inventory (required)
     * @param inventoryStatus The inventory status object (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUserInventoryStatusUsingPUTAsync(Integer userId, Integer id, String inventoryStatus, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUserInventoryStatusUsingPUTValidateBeforeCall(userId, id, inventoryStatus, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
