/*
 * Knetik Platform API Documentation Latest
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CommentResource;
import io.swagger.client.model.ContributionResource;
import io.swagger.client.model.DispositionResource;
import io.swagger.client.model.FlagResource;
import io.swagger.client.model.PageCommentResource;
import io.swagger.client.model.PageDispositionResource;
import io.swagger.client.model.PageVideoRelationshipResource;
import io.swagger.client.model.PageVideoResource;
import io.swagger.client.model.VideoRelationshipResource;
import io.swagger.client.model.VideoResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MediaVideosApi {
    private ApiClient apiClient;

    public MediaVideosApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MediaVideosApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for addCommentUsingPOST1 */
    private com.squareup.okhttp.Call addCommentUsingPOST1Call(Integer videoId, CommentResource commentResource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = commentResource;
        
        // create path and map variables
        String localVarPath = "/media/videos/{video_id}/comments".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "video_id" + "\\}", apiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addCommentUsingPOST1ValidateBeforeCall(Integer videoId, CommentResource commentResource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addCommentUsingPOST1(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addCommentUsingPOST1Call(videoId, commentResource, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a new video comment
     * 
     * @param videoId The video id  (required)
     * @param commentResource The comment object (optional)
     * @return CommentResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommentResource addCommentUsingPOST1(Integer videoId, CommentResource commentResource) throws ApiException {
        ApiResponse<CommentResource> resp = addCommentUsingPOST1WithHttpInfo(videoId, commentResource);
        return resp.getData();
    }

    /**
     * Add a new video comment
     * 
     * @param videoId The video id  (required)
     * @param commentResource The comment object (optional)
     * @return ApiResponse&lt;CommentResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommentResource> addCommentUsingPOST1WithHttpInfo(Integer videoId, CommentResource commentResource) throws ApiException {
        com.squareup.okhttp.Call call = addCommentUsingPOST1ValidateBeforeCall(videoId, commentResource, null, null);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a new video comment (asynchronously)
     * 
     * @param videoId The video id  (required)
     * @param commentResource The comment object (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addCommentUsingPOST1Async(Integer videoId, CommentResource commentResource, final ApiCallback<CommentResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addCommentUsingPOST1ValidateBeforeCall(videoId, commentResource, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addContributorUsingPOST */
    private com.squareup.okhttp.Call addContributorUsingPOSTCall(Long videoId, ContributionResource contributionResource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = contributionResource;
        
        // create path and map variables
        String localVarPath = "/media/videos/{video_id}/contributors".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "video_id" + "\\}", apiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addContributorUsingPOSTValidateBeforeCall(Long videoId, ContributionResource contributionResource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addContributorUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addContributorUsingPOSTCall(videoId, contributionResource, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Adds a contributor to a video
     * 
     * @param videoId The video id (required)
     * @param contributionResource The contribution object (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addContributorUsingPOST(Long videoId, ContributionResource contributionResource) throws ApiException {
        addContributorUsingPOSTWithHttpInfo(videoId, contributionResource);
    }

    /**
     * Adds a contributor to a video
     * 
     * @param videoId The video id (required)
     * @param contributionResource The contribution object (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addContributorUsingPOSTWithHttpInfo(Long videoId, ContributionResource contributionResource) throws ApiException {
        com.squareup.okhttp.Call call = addContributorUsingPOSTValidateBeforeCall(videoId, contributionResource, null, null);
        return apiClient.execute(call);
    }

    /**
     * Adds a contributor to a video (asynchronously)
     * 
     * @param videoId The video id (required)
     * @param contributionResource The contribution object (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addContributorUsingPOSTAsync(Long videoId, ContributionResource contributionResource, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addContributorUsingPOSTValidateBeforeCall(videoId, contributionResource, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for addDispositionUsingPOST1 */
    private com.squareup.okhttp.Call addDispositionUsingPOST1Call(Integer videoId, DispositionResource dispositionResource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = dispositionResource;
        
        // create path and map variables
        String localVarPath = "/media/videos/{video_id}/dispositions".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "video_id" + "\\}", apiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addDispositionUsingPOST1ValidateBeforeCall(Integer videoId, DispositionResource dispositionResource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addDispositionUsingPOST1(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addDispositionUsingPOST1Call(videoId, dispositionResource, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a new Video disposition
     * 
     * @param videoId The video id (required)
     * @param dispositionResource The disposition object (optional)
     * @return DispositionResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DispositionResource addDispositionUsingPOST1(Integer videoId, DispositionResource dispositionResource) throws ApiException {
        ApiResponse<DispositionResource> resp = addDispositionUsingPOST1WithHttpInfo(videoId, dispositionResource);
        return resp.getData();
    }

    /**
     * Add a new Video disposition
     * 
     * @param videoId The video id (required)
     * @param dispositionResource The disposition object (optional)
     * @return ApiResponse&lt;DispositionResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DispositionResource> addDispositionUsingPOST1WithHttpInfo(Integer videoId, DispositionResource dispositionResource) throws ApiException {
        com.squareup.okhttp.Call call = addDispositionUsingPOST1ValidateBeforeCall(videoId, dispositionResource, null, null);
        Type localVarReturnType = new TypeToken<DispositionResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a new Video disposition (asynchronously)
     * 
     * @param videoId The video id (required)
     * @param dispositionResource The disposition object (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addDispositionUsingPOST1Async(Integer videoId, DispositionResource dispositionResource, final ApiCallback<DispositionResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addDispositionUsingPOST1ValidateBeforeCall(videoId, dispositionResource, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DispositionResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addFlagUsingPOST */
    private com.squareup.okhttp.Call addFlagUsingPOSTCall(Long videoId, String reason, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reason;
        
        // create path and map variables
        String localVarPath = "/media/videos/{video_id}/moderation".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "video_id" + "\\}", apiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFlagUsingPOSTValidateBeforeCall(Long videoId, String reason, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addFlagUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addFlagUsingPOSTCall(videoId, reason, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a new flag
     * 
     * @param videoId The video id (required)
     * @param reason The flag reason (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addFlagUsingPOST(Long videoId, String reason) throws ApiException {
        addFlagUsingPOSTWithHttpInfo(videoId, reason);
    }

    /**
     * Add a new flag
     * 
     * @param videoId The video id (required)
     * @param reason The flag reason (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addFlagUsingPOSTWithHttpInfo(Long videoId, String reason) throws ApiException {
        com.squareup.okhttp.Call call = addFlagUsingPOSTValidateBeforeCall(videoId, reason, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add a new flag (asynchronously)
     * 
     * @param videoId The video id (required)
     * @param reason The flag reason (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFlagUsingPOSTAsync(Long videoId, String reason, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFlagUsingPOSTValidateBeforeCall(videoId, reason, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for addRelatedUsingPOST */
    private com.squareup.okhttp.Call addRelatedUsingPOSTCall(Long videoId, VideoRelationshipResource videoRelationshipResource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = videoRelationshipResource;
        
        // create path and map variables
        String localVarPath = "/media/videos/{video_id}/related".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "video_id" + "\\}", apiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addRelatedUsingPOSTValidateBeforeCall(Long videoId, VideoRelationshipResource videoRelationshipResource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling addRelatedUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addRelatedUsingPOSTCall(videoId, videoRelationshipResource, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Adds one or more existing videos as related to this one
     * 
     * @param videoId The video id (required)
     * @param videoRelationshipResource The video relationship object  (optional)
     * @return VideoRelationshipResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VideoRelationshipResource addRelatedUsingPOST(Long videoId, VideoRelationshipResource videoRelationshipResource) throws ApiException {
        ApiResponse<VideoRelationshipResource> resp = addRelatedUsingPOSTWithHttpInfo(videoId, videoRelationshipResource);
        return resp.getData();
    }

    /**
     * Adds one or more existing videos as related to this one
     * 
     * @param videoId The video id (required)
     * @param videoRelationshipResource The video relationship object  (optional)
     * @return ApiResponse&lt;VideoRelationshipResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VideoRelationshipResource> addRelatedUsingPOSTWithHttpInfo(Long videoId, VideoRelationshipResource videoRelationshipResource) throws ApiException {
        com.squareup.okhttp.Call call = addRelatedUsingPOSTValidateBeforeCall(videoId, videoRelationshipResource, null, null);
        Type localVarReturnType = new TypeToken<VideoRelationshipResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds one or more existing videos as related to this one (asynchronously)
     * 
     * @param videoId The video id (required)
     * @param videoRelationshipResource The video relationship object  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addRelatedUsingPOSTAsync(Long videoId, VideoRelationshipResource videoRelationshipResource, final ApiCallback<VideoRelationshipResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addRelatedUsingPOSTValidateBeforeCall(videoId, videoRelationshipResource, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VideoRelationshipResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addVideoUsingPOST */
    private com.squareup.okhttp.Call addVideoUsingPOSTCall(VideoResource videoResource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = videoResource;
        
        // create path and map variables
        String localVarPath = "/media/videos".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addVideoUsingPOSTValidateBeforeCall(VideoResource videoResource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = addVideoUsingPOSTCall(videoResource, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Adds a new video in the system
     * 
     * @param videoResource The video object (optional)
     * @return VideoResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VideoResource addVideoUsingPOST(VideoResource videoResource) throws ApiException {
        ApiResponse<VideoResource> resp = addVideoUsingPOSTWithHttpInfo(videoResource);
        return resp.getData();
    }

    /**
     * Adds a new video in the system
     * 
     * @param videoResource The video object (optional)
     * @return ApiResponse&lt;VideoResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VideoResource> addVideoUsingPOSTWithHttpInfo(VideoResource videoResource) throws ApiException {
        com.squareup.okhttp.Call call = addVideoUsingPOSTValidateBeforeCall(videoResource, null, null);
        Type localVarReturnType = new TypeToken<VideoResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds a new video in the system (asynchronously)
     * 
     * @param videoResource The video object (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addVideoUsingPOSTAsync(VideoResource videoResource, final ApiCallback<VideoResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addVideoUsingPOSTValidateBeforeCall(videoResource, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VideoResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for addWhitelistUsingPOST */
    private com.squareup.okhttp.Call addWhitelistUsingPOSTCall(Long id, Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = userId;
        
        // create path and map variables
        String localVarPath = "/media/videos/{id}/whitelist".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addWhitelistUsingPOSTValidateBeforeCall(Long id, Integer userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addWhitelistUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addWhitelistUsingPOSTCall(id, userId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Adds a user to a video&#39;s whitelist
     * Whitelisted users can view video regardless of privacy setting.
     * @param id The video id (required)
     * @param userId The user id (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addWhitelistUsingPOST(Long id, Integer userId) throws ApiException {
        addWhitelistUsingPOSTWithHttpInfo(id, userId);
    }

    /**
     * Adds a user to a video&#39;s whitelist
     * Whitelisted users can view video regardless of privacy setting.
     * @param id The video id (required)
     * @param userId The user id (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addWhitelistUsingPOSTWithHttpInfo(Long id, Integer userId) throws ApiException {
        com.squareup.okhttp.Call call = addWhitelistUsingPOSTValidateBeforeCall(id, userId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Adds a user to a video&#39;s whitelist (asynchronously)
     * Whitelisted users can view video regardless of privacy setting.
     * @param id The video id (required)
     * @param userId The user id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addWhitelistUsingPOSTAsync(Long id, Integer userId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addWhitelistUsingPOSTValidateBeforeCall(id, userId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteCommentUsingDELETE1 */
    private com.squareup.okhttp.Call deleteCommentUsingDELETE1Call(Long videoId, Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/media/videos/{video_id}/comments/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "video_id" + "\\}", apiClient.escapeString(videoId.toString()))
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCommentUsingDELETE1ValidateBeforeCall(Long videoId, Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling deleteCommentUsingDELETE1(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteCommentUsingDELETE1(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteCommentUsingDELETE1Call(videoId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a video comment
     * 
     * @param videoId The video id (required)
     * @param id The comment id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCommentUsingDELETE1(Long videoId, Long id) throws ApiException {
        deleteCommentUsingDELETE1WithHttpInfo(videoId, id);
    }

    /**
     * Delete a video comment
     * 
     * @param videoId The video id (required)
     * @param id The comment id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCommentUsingDELETE1WithHttpInfo(Long videoId, Long id) throws ApiException {
        com.squareup.okhttp.Call call = deleteCommentUsingDELETE1ValidateBeforeCall(videoId, id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a video comment (asynchronously)
     * 
     * @param videoId The video id (required)
     * @param id The comment id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCommentUsingDELETE1Async(Long videoId, Long id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCommentUsingDELETE1ValidateBeforeCall(videoId, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteDispositionUsingDELETE1 */
    private com.squareup.okhttp.Call deleteDispositionUsingDELETE1Call(Long dispositionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/media/videos/{video_id}/dispositions/{disposition_id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "disposition_id" + "\\}", apiClient.escapeString(dispositionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDispositionUsingDELETE1ValidateBeforeCall(Long dispositionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dispositionId' is set
        if (dispositionId == null) {
            throw new ApiException("Missing the required parameter 'dispositionId' when calling deleteDispositionUsingDELETE1(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteDispositionUsingDELETE1Call(dispositionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a video comment
     * 
     * @param dispositionId The disposition id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteDispositionUsingDELETE1(Long dispositionId) throws ApiException {
        deleteDispositionUsingDELETE1WithHttpInfo(dispositionId);
    }

    /**
     * Delete a video comment
     * 
     * @param dispositionId The disposition id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteDispositionUsingDELETE1WithHttpInfo(Long dispositionId) throws ApiException {
        com.squareup.okhttp.Call call = deleteDispositionUsingDELETE1ValidateBeforeCall(dispositionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a video comment (asynchronously)
     * 
     * @param dispositionId The disposition id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDispositionUsingDELETE1Async(Long dispositionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDispositionUsingDELETE1ValidateBeforeCall(dispositionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteFlagUsingDELETE */
    private com.squareup.okhttp.Call deleteFlagUsingDELETECall(Long videoId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/media/videos/{video_id}/moderation".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "video_id" + "\\}", apiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFlagUsingDELETEValidateBeforeCall(Long videoId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling deleteFlagUsingDELETE(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteFlagUsingDELETECall(videoId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a flag
     * 
     * @param videoId The video id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFlagUsingDELETE(Long videoId) throws ApiException {
        deleteFlagUsingDELETEWithHttpInfo(videoId);
    }

    /**
     * Delete a flag
     * 
     * @param videoId The video id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFlagUsingDELETEWithHttpInfo(Long videoId) throws ApiException {
        com.squareup.okhttp.Call call = deleteFlagUsingDELETEValidateBeforeCall(videoId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a flag (asynchronously)
     * 
     * @param videoId The video id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFlagUsingDELETEAsync(Long videoId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFlagUsingDELETEValidateBeforeCall(videoId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteRelationshipUsingDELETE1 */
    private com.squareup.okhttp.Call deleteRelationshipUsingDELETE1Call(Long videoId, Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/media/videos/{video_id}/related/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "video_id" + "\\}", apiClient.escapeString(videoId.toString()))
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRelationshipUsingDELETE1ValidateBeforeCall(Long videoId, Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling deleteRelationshipUsingDELETE1(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteRelationshipUsingDELETE1(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteRelationshipUsingDELETE1Call(videoId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a video&#39;s relationship
     * 
     * @param videoId The video id (required)
     * @param id The relationship id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteRelationshipUsingDELETE1(Long videoId, Long id) throws ApiException {
        deleteRelationshipUsingDELETE1WithHttpInfo(videoId, id);
    }

    /**
     * Delete a video&#39;s relationship
     * 
     * @param videoId The video id (required)
     * @param id The relationship id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteRelationshipUsingDELETE1WithHttpInfo(Long videoId, Long id) throws ApiException {
        com.squareup.okhttp.Call call = deleteRelationshipUsingDELETE1ValidateBeforeCall(videoId, id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a video&#39;s relationship (asynchronously)
     * 
     * @param videoId The video id (required)
     * @param id The relationship id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRelationshipUsingDELETE1Async(Long videoId, Long id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRelationshipUsingDELETE1ValidateBeforeCall(videoId, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for deleteVideoUsingDELETE */
    private com.squareup.okhttp.Call deleteVideoUsingDELETECall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/media/videos/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteVideoUsingDELETEValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteVideoUsingDELETE(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteVideoUsingDELETECall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Removes a video from the system if no resources are attached to it
     * 
     * @param id The video id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteVideoUsingDELETE(Long id) throws ApiException {
        deleteVideoUsingDELETEWithHttpInfo(id);
    }

    /**
     * Removes a video from the system if no resources are attached to it
     * 
     * @param id The video id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteVideoUsingDELETEWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = deleteVideoUsingDELETEValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Removes a video from the system if no resources are attached to it (asynchronously)
     * 
     * @param id The video id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteVideoUsingDELETEAsync(Long id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteVideoUsingDELETEValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getCommentsUsingGET1 */
    private com.squareup.okhttp.Call getCommentsUsingGET1Call(Integer videoId, Integer size, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/media/videos/{video_id}/comments".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "video_id" + "\\}", apiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCommentsUsingGET1ValidateBeforeCall(Integer videoId, Integer size, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getCommentsUsingGET1(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getCommentsUsingGET1Call(videoId, size, page, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns a page of comments for a video
     * 
     * @param videoId The video id (required)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @return PageCommentResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageCommentResource getCommentsUsingGET1(Integer videoId, Integer size, Integer page) throws ApiException {
        ApiResponse<PageCommentResource> resp = getCommentsUsingGET1WithHttpInfo(videoId, size, page);
        return resp.getData();
    }

    /**
     * Returns a page of comments for a video
     * 
     * @param videoId The video id (required)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @return ApiResponse&lt;PageCommentResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageCommentResource> getCommentsUsingGET1WithHttpInfo(Integer videoId, Integer size, Integer page) throws ApiException {
        com.squareup.okhttp.Call call = getCommentsUsingGET1ValidateBeforeCall(videoId, size, page, null, null);
        Type localVarReturnType = new TypeToken<PageCommentResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a page of comments for a video (asynchronously)
     * 
     * @param videoId The video id (required)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCommentsUsingGET1Async(Integer videoId, Integer size, Integer page, final ApiCallback<PageCommentResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCommentsUsingGET1ValidateBeforeCall(videoId, size, page, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageCommentResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getDispositionsUsingGET1 */
    private com.squareup.okhttp.Call getDispositionsUsingGET1Call(Integer videoId, Integer size, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/media/videos/{video_id}/dispositions".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "video_id" + "\\}", apiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDispositionsUsingGET1ValidateBeforeCall(Integer videoId, Integer size, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getDispositionsUsingGET1(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getDispositionsUsingGET1Call(videoId, size, page, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns a page of dispositions for a video
     * 
     * @param videoId The video id (required)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @return PageDispositionResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageDispositionResource getDispositionsUsingGET1(Integer videoId, Integer size, Integer page) throws ApiException {
        ApiResponse<PageDispositionResource> resp = getDispositionsUsingGET1WithHttpInfo(videoId, size, page);
        return resp.getData();
    }

    /**
     * Returns a page of dispositions for a video
     * 
     * @param videoId The video id (required)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @return ApiResponse&lt;PageDispositionResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageDispositionResource> getDispositionsUsingGET1WithHttpInfo(Integer videoId, Integer size, Integer page) throws ApiException {
        com.squareup.okhttp.Call call = getDispositionsUsingGET1ValidateBeforeCall(videoId, size, page, null, null);
        Type localVarReturnType = new TypeToken<PageDispositionResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a page of dispositions for a video (asynchronously)
     * 
     * @param videoId The video id (required)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDispositionsUsingGET1Async(Integer videoId, Integer size, Integer page, final ApiCallback<PageDispositionResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDispositionsUsingGET1ValidateBeforeCall(videoId, size, page, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageDispositionResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getRelatedUsingGET */
    private com.squareup.okhttp.Call getRelatedUsingGETCall(Long videoId, Integer size, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/media/videos/{video_id}/related".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "video_id" + "\\}", apiClient.escapeString(videoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRelatedUsingGETValidateBeforeCall(Long videoId, Integer size, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling getRelatedUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getRelatedUsingGETCall(videoId, size, page, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns a page of video relationships
     * 
     * @param videoId The video id (required)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @return PageVideoRelationshipResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageVideoRelationshipResource getRelatedUsingGET(Long videoId, Integer size, Integer page) throws ApiException {
        ApiResponse<PageVideoRelationshipResource> resp = getRelatedUsingGETWithHttpInfo(videoId, size, page);
        return resp.getData();
    }

    /**
     * Returns a page of video relationships
     * 
     * @param videoId The video id (required)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @return ApiResponse&lt;PageVideoRelationshipResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageVideoRelationshipResource> getRelatedUsingGETWithHttpInfo(Long videoId, Integer size, Integer page) throws ApiException {
        com.squareup.okhttp.Call call = getRelatedUsingGETValidateBeforeCall(videoId, size, page, null, null);
        Type localVarReturnType = new TypeToken<PageVideoRelationshipResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a page of video relationships (asynchronously)
     * 
     * @param videoId The video id (required)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRelatedUsingGETAsync(Long videoId, Integer size, Integer page, final ApiCallback<PageVideoRelationshipResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRelatedUsingGETValidateBeforeCall(videoId, size, page, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageVideoRelationshipResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUserVideosUsingGET */
    private com.squareup.okhttp.Call getUserVideosUsingGETCall(Integer userId, Boolean excludeFlagged, Integer size, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/{user_id}/videos".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "user_id" + "\\}", apiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (excludeFlagged != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "exclude_flagged", excludeFlagged));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserVideosUsingGETValidateBeforeCall(Integer userId, Boolean excludeFlagged, Integer size, Integer page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserVideosUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUserVideosUsingGETCall(userId, excludeFlagged, size, page, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get user videos
     * 
     * @param userId The user id (required)
     * @param excludeFlagged Skip videos that have been flagged by the current user (optional, default to true)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @return PageVideoResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageVideoResource getUserVideosUsingGET(Integer userId, Boolean excludeFlagged, Integer size, Integer page) throws ApiException {
        ApiResponse<PageVideoResource> resp = getUserVideosUsingGETWithHttpInfo(userId, excludeFlagged, size, page);
        return resp.getData();
    }

    /**
     * Get user videos
     * 
     * @param userId The user id (required)
     * @param excludeFlagged Skip videos that have been flagged by the current user (optional, default to true)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @return ApiResponse&lt;PageVideoResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageVideoResource> getUserVideosUsingGETWithHttpInfo(Integer userId, Boolean excludeFlagged, Integer size, Integer page) throws ApiException {
        com.squareup.okhttp.Call call = getUserVideosUsingGETValidateBeforeCall(userId, excludeFlagged, size, page, null, null);
        Type localVarReturnType = new TypeToken<PageVideoResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get user videos (asynchronously)
     * 
     * @param userId The user id (required)
     * @param excludeFlagged Skip videos that have been flagged by the current user (optional, default to true)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserVideosUsingGETAsync(Integer userId, Boolean excludeFlagged, Integer size, Integer page, final ApiCallback<PageVideoResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserVideosUsingGETValidateBeforeCall(userId, excludeFlagged, size, page, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageVideoResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getVideoUsingGET */
    private com.squareup.okhttp.Call getVideoUsingGETCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/media/videos/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVideoUsingGETValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getVideoUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getVideoUsingGETCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Loads a specific video details
     * 
     * @param id The video id (required)
     * @return VideoResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VideoResource getVideoUsingGET(Long id) throws ApiException {
        ApiResponse<VideoResource> resp = getVideoUsingGETWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Loads a specific video details
     * 
     * @param id The video id (required)
     * @return ApiResponse&lt;VideoResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VideoResource> getVideoUsingGETWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = getVideoUsingGETValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<VideoResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Loads a specific video details (asynchronously)
     * 
     * @param id The video id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVideoUsingGETAsync(Long id, final ApiCallback<VideoResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVideoUsingGETValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VideoResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for removeContributorUsingDELETE */
    private com.squareup.okhttp.Call removeContributorUsingDELETECall(Long videoId, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/media/videos/{video_id}/contributors/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "video_id" + "\\}", apiClient.escapeString(videoId.toString()))
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeContributorUsingDELETEValidateBeforeCall(Long videoId, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling removeContributorUsingDELETE(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeContributorUsingDELETE(Async)");
        }
        
        
        com.squareup.okhttp.Call call = removeContributorUsingDELETECall(videoId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Removes a contributor from a video
     * 
     * @param videoId The video id (required)
     * @param id The contributor id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeContributorUsingDELETE(Long videoId, Integer id) throws ApiException {
        removeContributorUsingDELETEWithHttpInfo(videoId, id);
    }

    /**
     * Removes a contributor from a video
     * 
     * @param videoId The video id (required)
     * @param id The contributor id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeContributorUsingDELETEWithHttpInfo(Long videoId, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = removeContributorUsingDELETEValidateBeforeCall(videoId, id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Removes a contributor from a video (asynchronously)
     * 
     * @param videoId The video id (required)
     * @param id The contributor id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeContributorUsingDELETEAsync(Long videoId, Integer id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeContributorUsingDELETEValidateBeforeCall(videoId, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for removeWhitelistUsingDELETE */
    private com.squareup.okhttp.Call removeWhitelistUsingDELETECall(Long videoId, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/media/videos/{video_id}/whitelist/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "video_id" + "\\}", apiClient.escapeString(videoId.toString()))
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeWhitelistUsingDELETEValidateBeforeCall(Long videoId, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling removeWhitelistUsingDELETE(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeWhitelistUsingDELETE(Async)");
        }
        
        
        com.squareup.okhttp.Call call = removeWhitelistUsingDELETECall(videoId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Removes a user from a video&#39;s whitelist
     * Remove the user with the id given in the path from the whitelist of users that can view this video regardless of privacy setting.
     * @param videoId The video id (required)
     * @param id The user id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeWhitelistUsingDELETE(Long videoId, Integer id) throws ApiException {
        removeWhitelistUsingDELETEWithHttpInfo(videoId, id);
    }

    /**
     * Removes a user from a video&#39;s whitelist
     * Remove the user with the id given in the path from the whitelist of users that can view this video regardless of privacy setting.
     * @param videoId The video id (required)
     * @param id The user id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeWhitelistUsingDELETEWithHttpInfo(Long videoId, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = removeWhitelistUsingDELETEValidateBeforeCall(videoId, id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Removes a user from a video&#39;s whitelist (asynchronously)
     * Remove the user with the id given in the path from the whitelist of users that can view this video regardless of privacy setting.
     * @param videoId The video id (required)
     * @param id The user id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeWhitelistUsingDELETEAsync(Long videoId, Integer id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeWhitelistUsingDELETEValidateBeforeCall(videoId, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for searchVideosUsingGET */
    private com.squareup.okhttp.Call searchVideosUsingGETCall(Boolean excludeFlagged, String filterVideosByUploader, String filterCategory, String filterTagset, String filterVideosByName, String filterVideosByContributor, String filterVideosByAuthor, Boolean filterHasAuthor, Boolean filterHasUploader, String filterRelatedTo, Boolean filterFriends, String filterDisposition, Integer size, Integer page, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/media/videos".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (excludeFlagged != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "exclude_flagged", excludeFlagged));
        if (filterVideosByUploader != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_videos_by_uploader", filterVideosByUploader));
        if (filterCategory != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_category", filterCategory));
        if (filterTagset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_tagset", filterTagset));
        if (filterVideosByName != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_videos_by_name", filterVideosByName));
        if (filterVideosByContributor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_videos_by_contributor", filterVideosByContributor));
        if (filterVideosByAuthor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_videos_by_author", filterVideosByAuthor));
        if (filterHasAuthor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_has_author", filterHasAuthor));
        if (filterHasUploader != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_has_uploader", filterHasUploader));
        if (filterRelatedTo != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_related_to", filterRelatedTo));
        if (filterFriends != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_friends", filterFriends));
        if (filterDisposition != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter_disposition", filterDisposition));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (order != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchVideosUsingGETValidateBeforeCall(Boolean excludeFlagged, String filterVideosByUploader, String filterCategory, String filterTagset, String filterVideosByName, String filterVideosByContributor, String filterVideosByAuthor, Boolean filterHasAuthor, Boolean filterHasUploader, String filterRelatedTo, Boolean filterFriends, String filterDisposition, Integer size, Integer page, String order, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = searchVideosUsingGETCall(excludeFlagged, filterVideosByUploader, filterCategory, filterTagset, filterVideosByName, filterVideosByContributor, filterVideosByAuthor, filterHasAuthor, filterHasUploader, filterRelatedTo, filterFriends, filterDisposition, size, page, order, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search videos using the documented filters
     * 
     * @param excludeFlagged Skip videos that have been flagged by the current user (optional, default to true)
     * @param filterVideosByUploader Filter for videos by uploader id (optional)
     * @param filterCategory Filter for videos from a specific category by id (optional)
     * @param filterTagset Filter for videos with specified tags (separated by comma) (optional)
     * @param filterVideosByName Filter for videos which name *STARTS* with the given string (optional)
     * @param filterVideosByContributor Filter for videos with contribution from the artist specified by ID (optional)
     * @param filterVideosByAuthor Filter for videos with an artist as author specified by ID (optional)
     * @param filterHasAuthor Filter for videos that have an author set if true, or that have no author if false (optional)
     * @param filterHasUploader Filter for videos that have an uploader set if true, or that have no uploader if false (optional)
     * @param filterRelatedTo Filter for videos that have designated a particular video as the TO of a relationship. Pattern should match VIDEO_ID or VIDEO_ID:DETAILS to match with a specific details string as well (optional)
     * @param filterFriends Filter for videos uploaded by friends. &#39;true&#39; for friends of the caller (requires user token) or a user id for a specific user&#39;s friends (requires VIDEOS_ADMIN permission) (optional)
     * @param filterDisposition Filter for videos a given user has a given disposition towards. USER_ID:DISPOSITION where USER_ID is the id of the user who has this disposition or &#39;me&#39; for the caller (requires user token for &#39;me&#39;) and DISPOSITION is the name of the disposition. E.G. filter_disposition&#x3D;123:like or filter_disposition&#x3D;me:favorite (optional)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to author:ASC)
     * @return PageVideoResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageVideoResource searchVideosUsingGET(Boolean excludeFlagged, String filterVideosByUploader, String filterCategory, String filterTagset, String filterVideosByName, String filterVideosByContributor, String filterVideosByAuthor, Boolean filterHasAuthor, Boolean filterHasUploader, String filterRelatedTo, Boolean filterFriends, String filterDisposition, Integer size, Integer page, String order) throws ApiException {
        ApiResponse<PageVideoResource> resp = searchVideosUsingGETWithHttpInfo(excludeFlagged, filterVideosByUploader, filterCategory, filterTagset, filterVideosByName, filterVideosByContributor, filterVideosByAuthor, filterHasAuthor, filterHasUploader, filterRelatedTo, filterFriends, filterDisposition, size, page, order);
        return resp.getData();
    }

    /**
     * Search videos using the documented filters
     * 
     * @param excludeFlagged Skip videos that have been flagged by the current user (optional, default to true)
     * @param filterVideosByUploader Filter for videos by uploader id (optional)
     * @param filterCategory Filter for videos from a specific category by id (optional)
     * @param filterTagset Filter for videos with specified tags (separated by comma) (optional)
     * @param filterVideosByName Filter for videos which name *STARTS* with the given string (optional)
     * @param filterVideosByContributor Filter for videos with contribution from the artist specified by ID (optional)
     * @param filterVideosByAuthor Filter for videos with an artist as author specified by ID (optional)
     * @param filterHasAuthor Filter for videos that have an author set if true, or that have no author if false (optional)
     * @param filterHasUploader Filter for videos that have an uploader set if true, or that have no uploader if false (optional)
     * @param filterRelatedTo Filter for videos that have designated a particular video as the TO of a relationship. Pattern should match VIDEO_ID or VIDEO_ID:DETAILS to match with a specific details string as well (optional)
     * @param filterFriends Filter for videos uploaded by friends. &#39;true&#39; for friends of the caller (requires user token) or a user id for a specific user&#39;s friends (requires VIDEOS_ADMIN permission) (optional)
     * @param filterDisposition Filter for videos a given user has a given disposition towards. USER_ID:DISPOSITION where USER_ID is the id of the user who has this disposition or &#39;me&#39; for the caller (requires user token for &#39;me&#39;) and DISPOSITION is the name of the disposition. E.G. filter_disposition&#x3D;123:like or filter_disposition&#x3D;me:favorite (optional)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to author:ASC)
     * @return ApiResponse&lt;PageVideoResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageVideoResource> searchVideosUsingGETWithHttpInfo(Boolean excludeFlagged, String filterVideosByUploader, String filterCategory, String filterTagset, String filterVideosByName, String filterVideosByContributor, String filterVideosByAuthor, Boolean filterHasAuthor, Boolean filterHasUploader, String filterRelatedTo, Boolean filterFriends, String filterDisposition, Integer size, Integer page, String order) throws ApiException {
        com.squareup.okhttp.Call call = searchVideosUsingGETValidateBeforeCall(excludeFlagged, filterVideosByUploader, filterCategory, filterTagset, filterVideosByName, filterVideosByContributor, filterVideosByAuthor, filterHasAuthor, filterHasUploader, filterRelatedTo, filterFriends, filterDisposition, size, page, order, null, null);
        Type localVarReturnType = new TypeToken<PageVideoResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search videos using the documented filters (asynchronously)
     * 
     * @param excludeFlagged Skip videos that have been flagged by the current user (optional, default to true)
     * @param filterVideosByUploader Filter for videos by uploader id (optional)
     * @param filterCategory Filter for videos from a specific category by id (optional)
     * @param filterTagset Filter for videos with specified tags (separated by comma) (optional)
     * @param filterVideosByName Filter for videos which name *STARTS* with the given string (optional)
     * @param filterVideosByContributor Filter for videos with contribution from the artist specified by ID (optional)
     * @param filterVideosByAuthor Filter for videos with an artist as author specified by ID (optional)
     * @param filterHasAuthor Filter for videos that have an author set if true, or that have no author if false (optional)
     * @param filterHasUploader Filter for videos that have an uploader set if true, or that have no uploader if false (optional)
     * @param filterRelatedTo Filter for videos that have designated a particular video as the TO of a relationship. Pattern should match VIDEO_ID or VIDEO_ID:DETAILS to match with a specific details string as well (optional)
     * @param filterFriends Filter for videos uploaded by friends. &#39;true&#39; for friends of the caller (requires user token) or a user id for a specific user&#39;s friends (requires VIDEOS_ADMIN permission) (optional)
     * @param filterDisposition Filter for videos a given user has a given disposition towards. USER_ID:DISPOSITION where USER_ID is the id of the user who has this disposition or &#39;me&#39; for the caller (requires user token for &#39;me&#39;) and DISPOSITION is the name of the disposition. E.G. filter_disposition&#x3D;123:like or filter_disposition&#x3D;me:favorite (optional)
     * @param size The number of objects returned per page (optional, default to 25)
     * @param page The number of the page returned, starting with 1 (optional, default to 1)
     * @param order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to author:ASC)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchVideosUsingGETAsync(Boolean excludeFlagged, String filterVideosByUploader, String filterCategory, String filterTagset, String filterVideosByName, String filterVideosByContributor, String filterVideosByAuthor, Boolean filterHasAuthor, Boolean filterHasUploader, String filterRelatedTo, Boolean filterFriends, String filterDisposition, Integer size, Integer page, String order, final ApiCallback<PageVideoResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchVideosUsingGETValidateBeforeCall(excludeFlagged, filterVideosByUploader, filterCategory, filterTagset, filterVideosByName, filterVideosByContributor, filterVideosByAuthor, filterHasAuthor, filterHasUploader, filterRelatedTo, filterFriends, filterDisposition, size, page, order, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageVideoResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateCommentUsingPUT1 */
    private com.squareup.okhttp.Call updateCommentUsingPUT1Call(Long videoId, Long id, String content, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = content;
        
        // create path and map variables
        String localVarPath = "/media/videos/{video_id}/comments/{id}/content".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "video_id" + "\\}", apiClient.escapeString(videoId.toString()))
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCommentUsingPUT1ValidateBeforeCall(Long videoId, Long id, String content, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling updateCommentUsingPUT1(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateCommentUsingPUT1(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateCommentUsingPUT1Call(videoId, id, content, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update video comment content 
     * 
     * @param videoId The video id (required)
     * @param id The comment id (required)
     * @param content The comment content (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateCommentUsingPUT1(Long videoId, Long id, String content) throws ApiException {
        updateCommentUsingPUT1WithHttpInfo(videoId, id, content);
    }

    /**
     * Update video comment content 
     * 
     * @param videoId The video id (required)
     * @param id The comment id (required)
     * @param content The comment content (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateCommentUsingPUT1WithHttpInfo(Long videoId, Long id, String content) throws ApiException {
        com.squareup.okhttp.Call call = updateCommentUsingPUT1ValidateBeforeCall(videoId, id, content, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update video comment content  (asynchronously)
     * 
     * @param videoId The video id (required)
     * @param id The comment id (required)
     * @param content The comment content (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCommentUsingPUT1Async(Long videoId, Long id, String content, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCommentUsingPUT1ValidateBeforeCall(videoId, id, content, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateRelationshipUsingPUT1 */
    private com.squareup.okhttp.Call updateRelationshipUsingPUT1Call(Long videoId, Long relationshipId, String details, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = details;
        
        // create path and map variables
        String localVarPath = "/media/videos/{video_id}/related/{id}/relationship_details".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "video_id" + "\\}", apiClient.escapeString(videoId.toString()))
        .replaceAll("\\{" + "relationship_id" + "\\}", apiClient.escapeString(relationshipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRelationshipUsingPUT1ValidateBeforeCall(Long videoId, Long relationshipId, String details, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'videoId' is set
        if (videoId == null) {
            throw new ApiException("Missing the required parameter 'videoId' when calling updateRelationshipUsingPUT1(Async)");
        }
        
        // verify the required parameter 'relationshipId' is set
        if (relationshipId == null) {
            throw new ApiException("Missing the required parameter 'relationshipId' when calling updateRelationshipUsingPUT1(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateRelationshipUsingPUT1Call(videoId, relationshipId, details, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a video&#39;s relationship details
     * 
     * @param videoId The video id (required)
     * @param relationshipId The relationship id (required)
     * @param details The video relationship details (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateRelationshipUsingPUT1(Long videoId, Long relationshipId, String details) throws ApiException {
        updateRelationshipUsingPUT1WithHttpInfo(videoId, relationshipId, details);
    }

    /**
     * Update a video&#39;s relationship details
     * 
     * @param videoId The video id (required)
     * @param relationshipId The relationship id (required)
     * @param details The video relationship details (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateRelationshipUsingPUT1WithHttpInfo(Long videoId, Long relationshipId, String details) throws ApiException {
        com.squareup.okhttp.Call call = updateRelationshipUsingPUT1ValidateBeforeCall(videoId, relationshipId, details, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a video&#39;s relationship details (asynchronously)
     * 
     * @param videoId The video id (required)
     * @param relationshipId The relationship id (required)
     * @param details The video relationship details (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateRelationshipUsingPUT1Async(Long videoId, Long relationshipId, String details, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRelationshipUsingPUT1ValidateBeforeCall(videoId, relationshipId, details, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for updateVideoUsingPUT */
    private com.squareup.okhttp.Call updateVideoUsingPUTCall(Long id, VideoResource videoResource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = videoResource;
        
        // create path and map variables
        String localVarPath = "/media/videos/{id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateVideoUsingPUTValidateBeforeCall(Long id, VideoResource videoResource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateVideoUsingPUT(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateVideoUsingPUTCall(id, videoResource, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Modifies a video&#39;s details
     * 
     * @param id The video id (required)
     * @param videoResource The video object (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateVideoUsingPUT(Long id, VideoResource videoResource) throws ApiException {
        updateVideoUsingPUTWithHttpInfo(id, videoResource);
    }

    /**
     * Modifies a video&#39;s details
     * 
     * @param id The video id (required)
     * @param videoResource The video object (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateVideoUsingPUTWithHttpInfo(Long id, VideoResource videoResource) throws ApiException {
        com.squareup.okhttp.Call call = updateVideoUsingPUTValidateBeforeCall(id, videoResource, null, null);
        return apiClient.execute(call);
    }

    /**
     * Modifies a video&#39;s details (asynchronously)
     * 
     * @param id The video id (required)
     * @param videoResource The video object (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateVideoUsingPUTAsync(Long id, VideoResource videoResource, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateVideoUsingPUTValidateBeforeCall(id, videoResource, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for viewVideoUsingPOST */
    private com.squareup.okhttp.Call viewVideoUsingPOSTCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/media/videos/{id}/views".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call viewVideoUsingPOSTValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling viewVideoUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = viewVideoUsingPOSTCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Increment a video&#39;s view count
     * 
     * @param id The video id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void viewVideoUsingPOST(Long id) throws ApiException {
        viewVideoUsingPOSTWithHttpInfo(id);
    }

    /**
     * Increment a video&#39;s view count
     * 
     * @param id The video id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> viewVideoUsingPOSTWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = viewVideoUsingPOSTValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Increment a video&#39;s view count (asynchronously)
     * 
     * @param id The video id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call viewVideoUsingPOSTAsync(Long id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = viewVideoUsingPOSTValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
