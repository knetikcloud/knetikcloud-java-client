/*
 * Knetik Platform API Documentation Latest
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AddressResource;
import io.swagger.client.model.InvoiceCreateRequest;
import io.swagger.client.model.InvoicePaymentStatusRequest;
import io.swagger.client.model.InvoiceResource;
import io.swagger.client.model.PageInvoiceLogEntry;
import io.swagger.client.model.PageInvoiceResource;
import io.swagger.client.model.PayBySavedMethodRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InvoicesApi
 */
@Ignore
public class InvoicesApiTest {

    private final InvoicesApi api = new InvoicesApi();

    
    /**
     * Create an invoice
     *
     * Create an invoice(s) by providing a cart GUID. Note that there may be multiple invoices created, one per vendor.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createInvoiceUsingPOSTTest() throws ApiException {
        InvoiceCreateRequest req = null;
        List<InvoiceResource> response = api.createInvoiceUsingPOST(req);

        // TODO: test validations
    }
    
    /**
     * Retrieve invoices
     *
     * Without INVOICES_ADMIN permission the results are automatically filtered for only the logged in user&#39;s invoices. It is recomended however that filter_user be added to avoid issues for admin users accidentally getting additional invoices.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInvoiceHistoryUsingGETTest() throws ApiException {
        Integer filterUser = null;
        String filterEmail = null;
        String filterFulfillmentStatus = null;
        String filterPaymentStatus = null;
        String filterItemName = null;
        String filterCreatedDate = null;
        Integer size = null;
        Integer page = null;
        String order = null;
        PageInvoiceResource response = api.getInvoiceHistoryUsingGET(filterUser, filterEmail, filterFulfillmentStatus, filterPaymentStatus, filterItemName, filterCreatedDate, size, page, order);

        // TODO: test validations
    }
    
    /**
     * Retrieve an invoice
     *
     * The postal code associated with the invoice may be required for security purposes if the invoice has one set and the config postal_code_required is set to true. Send &#39;none&#39; if the invoice has no postal code.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInvoiceUsingGETTest() throws ApiException {
        Integer id = null;
        String postalCode = null;
        InvoiceResource response = api.getInvoiceUsingGET(id, postalCode);

        // TODO: test validations
    }
    
    /**
     * List invoice logs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLogsUsingGETTest() throws ApiException {
        Integer id = null;
        Integer size = null;
        Integer page = null;
        PageInvoiceLogEntry response = api.getLogsUsingGET(id, size, page);

        // TODO: test validations
    }
    
    /**
     * Lists available fulfillment statuses
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listFulFillmentStatusesUsingGETTest() throws ApiException {
        List<String> response = api.listFulFillmentStatusesUsingGET();

        // TODO: test validations
    }
    
    /**
     * Lists available payment statuses
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPaymentStatusesUsingGETTest() throws ApiException {
        List<String> response = api.listPaymentStatusesUsingGET();

        // TODO: test validations
    }
    
    /**
     * Trigger payment of an invoice
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void payInvoiceUsingPOSTTest() throws ApiException {
        Integer id = null;
        PayBySavedMethodRequest request = null;
        api.payInvoiceUsingPOST(id, request);

        // TODO: test validations
    }
    
    /**
     * Set the fulfillment status of an invoice item
     *
     * This allows external fulfillment systems to report success or failure. Fulfillment status changes are restricted by a specific flow determining which status can lead to which.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setItemFulfillmentStatusUsingPUTTest() throws ApiException {
        Integer id = null;
        String sku = null;
        String status = null;
        api.setItemFulfillmentStatusUsingPUT(id, sku, status);

        // TODO: test validations
    }
    
    /**
     * Set the order notes of an invoice
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setOrderNotesUsingPUTTest() throws ApiException {
        Integer id = null;
        String orderNotes = null;
        api.setOrderNotesUsingPUT(id, orderNotes);

        // TODO: test validations
    }
    
    /**
     * Set the payment status of an invoice
     *
     * This may trigger fulfillment if setting the status to &#39;paid&#39;. This is mainly intended to support external payment systems that cannot be incorporated into the payment method system. Payment status changes are restricted by a specific flow determining which status can lead to which.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setPaymentStatusUsingPUTTest() throws ApiException {
        Integer id = null;
        InvoicePaymentStatusRequest request = null;
        api.setPaymentStatusUsingPUT(id, request);

        // TODO: test validations
    }
    
    /**
     * Set or update billing info
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBillingInfoUsingPUTTest() throws ApiException {
        Integer id = null;
        AddressResource billingInfoRequest = null;
        api.updateBillingInfoUsingPUT(id, billingInfoRequest);

        // TODO: test validations
    }
    
}
