/**
 * Knetik Platform API Documentation latest 
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ClientResource;
import io.swagger.client.model.RoleResource;
import io.swagger.client.model.UserResource;
import io.swagger.client.model.PageRoleResource;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthRolesApi
 */
public class AuthRolesApiTest {

    private final AuthRolesApi api = new AuthRolesApi();

    
    /**
     * Set roles for a client
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void assignClientRolesUsingPUTTest() throws ApiException {
        String clientKey = null;
        List<String> rolesList = null;
        // api.assignClientRolesUsingPUT(clientKey, rolesList);

        // TODO: test validations
    }
    
    /**
     * Set permissions for a role
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void assignPermissionsUsingPUTTest() throws ApiException {
        String role = null;
        List<String> permissionsList = null;
        // api.assignPermissionsUsingPUT(role, permissionsList);

        // TODO: test validations
    }
    
    /**
     * Set roles for a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void assignUserRolesExternalUsingPUTTest() throws ApiException {
        Integer userId = null;
        List<String> rolesList = null;
        // api.assignUserRolesExternalUsingPUT(userId, rolesList);

        // TODO: test validations
    }
    
    /**
     * Create a new role
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRoleUsingPOSTTest() throws ApiException {
        RoleResource roleResource = null;
        // RoleResource response = api.createRoleUsingPOST(roleResource);

        // TODO: test validations
    }
    
    /**
     * Delete a role
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRoleUsingDELETETest() throws ApiException {
        String role = null;
        Boolean force = null;
        // api.deleteRoleUsingDELETE(role, force);

        // TODO: test validations
    }
    
    /**
     * Get roles for a client
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClientRolesUsingGETTest() throws ApiException {
        String clientKey = null;
        // List<RoleResource> response = api.getClientRolesUsingGET(clientKey);

        // TODO: test validations
    }
    
    /**
     * Get a single role
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRoleUsingGETTest() throws ApiException {
        String role = null;
        // RoleResource response = api.getRoleUsingGET(role);

        // TODO: test validations
    }
    
    /**
     * List and search roles
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRolesUsingGETTest() throws ApiException {
        Integer size = null;
        Integer page = null;
        String order = null;
        // PageRoleResource response = api.getRolesUsingGET(size, page, order);

        // TODO: test validations
    }
    
    /**
     * Get roles for a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserRolesUsingGETTest() throws ApiException {
        Integer userId = null;
        // List<RoleResource> response = api.getUserRolesUsingGET(userId);

        // TODO: test validations
    }
    
    /**
     * Update a role
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRoleUsingPUTTest() throws ApiException {
        String role = null;
        RoleResource roleResource = null;
        // api.updateRoleUsingPUT(role, roleResource);

        // TODO: test validations
    }
    
}
