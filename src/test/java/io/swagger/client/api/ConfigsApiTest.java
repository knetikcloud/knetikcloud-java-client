/**
 * Knetik Platform API Documentation latest 
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Config;
import io.swagger.client.model.PageConfig;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConfigsApi
 */
public class ConfigsApiTest {

    private final ConfigsApi api = new ConfigsApi();

    
    /**
     * Create a new config
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConfigUsingPOSTTest() throws ApiException {
        Config config = null;
        // Config response = api.createConfigUsingPOST(config);

        // TODO: test validations
    }
    
    /**
     * Delete an existing config.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConfigUsingDELETETest() throws ApiException {
        String name = null;
        // api.deleteConfigUsingDELETE(name);

        // TODO: test validations
    }
    
    /**
     * Get a single config
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConfigUsingGETTest() throws ApiException {
        String name = null;
        // Config response = api.getConfigUsingGET(name);

        // TODO: test validations
    }
    
    /**
     * List and search configs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConfigsUsingGETTest() throws ApiException {
        String filterSearch = null;
        Integer size = null;
        Integer page = null;
        String order = null;
        // PageConfig response = api.getConfigsUsingGET(filterSearch, size, page, order);

        // TODO: test validations
    }
    
    /**
     * Update an existing config.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateConfigUsingPUTTest() throws ApiException {
        String name = null;
        Config config = null;
        // api.updateConfigUsingPUT(name, config);

        // TODO: test validations
    }
    
}
