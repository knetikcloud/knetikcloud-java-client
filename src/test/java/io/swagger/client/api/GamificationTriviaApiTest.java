/*
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AnswerResource;
import io.swagger.client.model.Collectionstring;
import io.swagger.client.model.DeltaResource;
import io.swagger.client.model.ImportJobResource;
import io.swagger.client.model.PageResourceImportJobResource;
import io.swagger.client.model.PageResourceQuestionResource;
import io.swagger.client.model.PageResourceQuestionTemplateResource;
import io.swagger.client.model.QuestionResource;
import io.swagger.client.model.QuestionTemplateResource;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GamificationTriviaApi
 */
@Ignore
public class GamificationTriviaApiTest {

    private final GamificationTriviaApi api = new GamificationTriviaApi();

    
    /**
     * Add an answer to a question
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addAnswersUsingPOSTTest() throws ApiException {
        String questionId = null;
        AnswerResource answer = null;
        AnswerResource response = api.addAnswersUsingPOST(questionId, answer);

        // TODO: test validations
    }
    
    /**
     * Add a tag to a question
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addTagUsingPOSTTest() throws ApiException {
        String id = null;
        String tag = null;
        api.addTagUsingPOST(id, tag);

        // TODO: test validations
    }
    
    /**
     * Add a tag to a batch of questions
     *
     * All questions that dont&#39;t have the tag and match filters will have it added. The returned number is the number of questions updated.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void batchAddTagUsingPOSTTest() throws ApiException {
        String tag = null;
        String filterSearch = null;
        String filterIdset = null;
        String filterCategory = null;
        String filterTag = null;
        String filterTagset = null;
        String filterType = null;
        Boolean filterPublished = null;
        Long filterImportId = null;
        Integer response = api.batchAddTagUsingPOST(tag, filterSearch, filterIdset, filterCategory, filterTag, filterTagset, filterType, filterPublished, filterImportId);

        // TODO: test validations
    }
    
    /**
     * Remove a tag from a batch of questions
     *
     * ll questions that have the tag and match filters will have it removed. The returned number is the number of questions updated.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void batchRemoveTagUsingDELETETest() throws ApiException {
        String tag = null;
        String filterSearch = null;
        String filterIdset = null;
        String filterCategory = null;
        String filterTag = null;
        String filterTagset = null;
        String filterType = null;
        Boolean filterPublished = null;
        Long filterImportId = null;
        Integer response = api.batchRemoveTagUsingDELETE(tag, filterSearch, filterIdset, filterCategory, filterTag, filterTagset, filterType, filterPublished, filterImportId);

        // TODO: test validations
    }
    
    /**
     * Bulk update questions
     *
     * Will update all questions that match filters used (or all questions in system if no filters used). Body should match a question resource with only those properties you wish to set. Null values will be ignored. Returned number is how many were updated.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void bulkUpdateUsingPUTTest() throws ApiException {
        QuestionResource question = null;
        String filterSearch = null;
        String filterIdset = null;
        String filterCategory = null;
        String filterTagset = null;
        String filterType = null;
        Boolean filterPublished = null;
        Long filterImportId = null;
        Integer response = api.bulkUpdateUsingPUT(question, filterSearch, filterIdset, filterCategory, filterTagset, filterType, filterPublished, filterImportId);

        // TODO: test validations
    }
    
    /**
     * Count questions based on filters.
     *
     * This is also provided by the list endpoint so you don&#39;t need to call this for pagination purposes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void countQuestionsUsingGETTest() throws ApiException {
        String filterSearch = null;
        String filterIdset = null;
        String filterCategory = null;
        String filterTag = null;
        String filterTagset = null;
        String filterType = null;
        Boolean filterPublished = null;
        Long response = api.countQuestionsUsingGET(filterSearch, filterIdset, filterCategory, filterTag, filterTagset, filterType, filterPublished);

        // TODO: test validations
    }
    
    /**
     * Create a question template
     *
     * Question templates define a type of question and the properties they have
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createQuestionTemplateUsingPOSTTest() throws ApiException {
        QuestionTemplateResource questionTemplateResource = null;
        QuestionTemplateResource response = api.createQuestionTemplateUsingPOST(questionTemplateResource);

        // TODO: test validations
    }
    
    /**
     * Create a question
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createQuestionUsingPOSTTest() throws ApiException {
        QuestionResource question = null;
        QuestionResource response = api.createQuestionUsingPOST(question);

        // TODO: test validations
    }
    
    /**
     * Create an import job
     *
     * Set up a job to import a set of trivia questions from a cvs file at a remote url. the file will be validated asynchronously but will not be processed until started manually with the process endpoint.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUsingPOSTTest() throws ApiException {
        ImportJobResource request = null;
        ImportJobResource response = api.createUsingPOST(request);

        // TODO: test validations
    }
    
    /**
     * Delete a question template
     *
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteQuestionTemplateUsingDELETETest() throws ApiException {
        String id = null;
        String cascade = null;
        api.deleteQuestionTemplateUsingDELETE(id, cascade);

        // TODO: test validations
    }
    
    /**
     * Delete a question
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteQuestionUsingDELETETest() throws ApiException {
        String id = null;
        api.deleteQuestionUsingDELETE(id);

        // TODO: test validations
    }
    
    /**
     * Delete an import job
     *
     * Also deletes all questions that were imported by it
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUsingDELETETest() throws ApiException {
        Long id = null;
        api.deleteUsingDELETE(id);

        // TODO: test validations
    }
    
    /**
     * Get an answer for a question
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnswerUsingGETTest() throws ApiException {
        String questionId = null;
        String id = null;
        AnswerResource response = api.getAnswerUsingGET(questionId, id);

        // TODO: test validations
    }
    
    /**
     * List the answers available for a question
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnswersUsingGETTest() throws ApiException {
        String questionId = null;
        List<AnswerResource> response = api.getAnswersUsingGET(questionId);

        // TODO: test validations
    }
    
    /**
     * Get a list of import job
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getListUsingGET1Test() throws ApiException {
        String filterVendor = null;
        String filterCategory = null;
        String filterName = null;
        String filterStatus = null;
        Integer size = null;
        Integer page = null;
        String order = null;
        PageResourceImportJobResource response = api.getListUsingGET1(filterVendor, filterCategory, filterName, filterStatus, size, page, order);

        // TODO: test validations
    }
    
    /**
     * Get a single question template
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQuestionTemplateUsingGETTest() throws ApiException {
        String id = null;
        QuestionTemplateResource response = api.getQuestionTemplateUsingGET(id);

        // TODO: test validations
    }
    
    /**
     * List and search question templates
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQuestionTemplatesUsingGETTest() throws ApiException {
        Integer size = null;
        Integer page = null;
        String order = null;
        PageResourceQuestionTemplateResource response = api.getQuestionTemplatesUsingGET(size, page, order);

        // TODO: test validations
    }
    
    /**
     * Get a single question
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQuestionUsingGETTest() throws ApiException {
        String id = null;
        QuestionResource response = api.getQuestionUsingGET(id);

        // TODO: test validations
    }
    
    /**
     * List question deltas in ascending order of updated date
     *
     * The &#39;since&#39; parameter is important to avoid getting a full list of all questions. Implementors should make sure they pass the updated date of the last resource loaded, not the date of the last request, in order to avoid gaps
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQuestionsDeltaUsingGETTest() throws ApiException {
        Long since = null;
        List<DeltaResource> response = api.getQuestionsDeltaUsingGET(since);

        // TODO: test validations
    }
    
    /**
     * List and search questions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQuestionsUsingGETTest() throws ApiException {
        Integer size = null;
        Integer page = null;
        String order = null;
        String filterSearch = null;
        String filterIdset = null;
        String filterCategory = null;
        String filterTagset = null;
        String filterType = null;
        Boolean filterPublished = null;
        Long filterImportId = null;
        PageResourceQuestionResource response = api.getQuestionsUsingGET(size, page, order, filterSearch, filterIdset, filterCategory, filterTagset, filterType, filterPublished, filterImportId);

        // TODO: test validations
    }
    
    /**
     * List the tags for a question
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTagsUsingGET1Test() throws ApiException {
        String id = null;
        List<String> response = api.getTagsUsingGET1(id);

        // TODO: test validations
    }
    
    /**
     * List and search tags by the beginning of the string
     *
     * For performance reasons, search &amp; category filters are mutually exclusive. If category is specified, search filter will be ignored in order to do fast matches for typeahead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTagsUsingGET2Test() throws ApiException {
        String filterSearch = null;
        String filterCategory = null;
        Long filterImportId = null;
        Collectionstring response = api.getTagsUsingGET2(filterSearch, filterCategory, filterImportId);

        // TODO: test validations
    }
    
    /**
     * Get an import job
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsingGETTest() throws ApiException {
        Long id = null;
        ImportJobResource response = api.getUsingGET(id);

        // TODO: test validations
    }
    
    /**
     * Remove an answer from a question
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeAnswersUsingDELETETest() throws ApiException {
        String questionId = null;
        String id = null;
        api.removeAnswersUsingDELETE(questionId, id);

        // TODO: test validations
    }
    
    /**
     * Remove a tag from a question
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeTagUsingDELETETest() throws ApiException {
        String id = null;
        String tag = null;
        api.removeTagUsingDELETE(id, tag);

        // TODO: test validations
    }
    
    /**
     * Start processing an import job
     *
     * Will process the CSV file and add new questions asynchronously. The status of the job must be &#39;VALID&#39;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startProcessUsingPOSTTest() throws ApiException {
        Long id = null;
        Boolean publishNow = null;
        ImportJobResource response = api.startProcessUsingPOST(id, publishNow);

        // TODO: test validations
    }
    
    /**
     * Update an answer for a question
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAnswerUsingPUTTest() throws ApiException {
        String questionId = null;
        String id = null;
        AnswerResource answer = null;
        api.updateAnswerUsingPUT(questionId, id, answer);

        // TODO: test validations
    }
    
    /**
     * Update a question template
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateQuestionTemplateUsingPUTTest() throws ApiException {
        String id = null;
        QuestionTemplateResource questionTemplateResource = null;
        api.updateQuestionTemplateUsingPUT(id, questionTemplateResource);

        // TODO: test validations
    }
    
    /**
     * Update a question
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateQuestionUsingPUTTest() throws ApiException {
        String id = null;
        QuestionResource question = null;
        QuestionResource response = api.updateQuestionUsingPUT(id, question);

        // TODO: test validations
    }
    
    /**
     * Update an import job
     *
     * Changes should be made before process is started for there to be any effect.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUsingPUTTest() throws ApiException {
        Long id = null;
        ImportJobResource request = null;
        ImportJobResource response = api.updateUsingPUT(id, request);

        // TODO: test validations
    }
    
}
