/**
 * Knetik Platform API Documentation Latest
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.OauthAccessTokenResource;
import io.swagger.client.model.PageResourceOauthAccessTokenResource;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthTokensApi
 */
public class AuthTokensApiTest {

    private final AuthTokensApi api = new AuthTokensApi();

    
    /**
     * Delete all tokens by username
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTokenUsingDELETETest() throws ApiException {
        String username = null;
        // api.deleteTokenUsingDELETE(username);

        // TODO: test validations
    }
    
    /**
     * Delete a token by username and client id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTokenWithClientIdUsingDELETETest() throws ApiException {
        String username = null;
        String clientId = null;
        // api.deleteTokenWithClientIdUsingDELETE(username, clientId);

        // TODO: test validations
    }
    
    /**
     * Get a single token by username and client id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTokenByUserUsingGETTest() throws ApiException {
        String username = null;
        String clientId = null;
        // OauthAccessTokenResource response = api.getTokenByUserUsingGET(username, clientId);

        // TODO: test validations
    }
    
    /**
     * List usernames and client ids
     *
     * Token value not shown
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTokensUsingGETTest() throws ApiException {
        String filterClientId = null;
        String filterUsername = null;
        Integer size = null;
        Integer page = null;
        String order = null;
        // PageResourceOauthAccessTokenResource response = api.getTokensUsingGET(filterClientId, filterUsername, size, page, order);

        // TODO: test validations
    }
    
}
