/**
 * Knetik Platform API Documentation latest 
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ShippingItem;
import io.swagger.client.model.ItemTemplateResource;
import io.swagger.client.model.PageItemTemplateResource;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StoreShippingApi
 */
public class StoreShippingApiTest {

    private final StoreShippingApi api = new StoreShippingApi();

    
    /**
     * Create a shipping item
     *
     * A shipping item represents a shipping option and cost. SKUs have to be unique in the entire store.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createShippingItemUsingPOSTTest() throws ApiException {
        ShippingItem shippingItem = null;
        // ShippingItem response = api.createShippingItemUsingPOST(shippingItem);

        // TODO: test validations
    }
    
    /**
     * Create a shipping template
     *
     * Shipping Templates define a type of shipping and the properties they have.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createShippingTemplateUsingPOSTTest() throws ApiException {
        ItemTemplateResource shippingTemplateResource = null;
        // ItemTemplateResource response = api.createShippingTemplateUsingPOST(shippingTemplateResource);

        // TODO: test validations
    }
    
    /**
     * Delete a shipping item
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShippingItemUsingDELETETest() throws ApiException {
        Integer id = null;
        // api.deleteShippingItemUsingDELETE(id);

        // TODO: test validations
    }
    
    /**
     * Delete a shipping template
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteShippingTemplateUsingDELETETest() throws ApiException {
        String id = null;
        String cascade = null;
        // api.deleteShippingTemplateUsingDELETE(id, cascade);

        // TODO: test validations
    }
    
    /**
     * Get a single shipping item
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShippingItemUsingGETTest() throws ApiException {
        Integer id = null;
        // ShippingItem response = api.getShippingItemUsingGET(id);

        // TODO: test validations
    }
    
    /**
     * Get a single shipping template
     *
     * Shipping Templates define a type of shipping and the properties they have.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShippingTemplateUsingGETTest() throws ApiException {
        String id = null;
        // ItemTemplateResource response = api.getShippingTemplateUsingGET(id);

        // TODO: test validations
    }
    
    /**
     * List and search shipping templates
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShippingTemplatesUsingGETTest() throws ApiException {
        Integer size = null;
        Integer page = null;
        String order = null;
        // PageItemTemplateResource response = api.getShippingTemplatesUsingGET(size, page, order);

        // TODO: test validations
    }
    
    /**
     * Update a shipping item
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateShippingItemUsingPUTTest() throws ApiException {
        Integer id = null;
        ShippingItem shippingItem = null;
        // api.updateShippingItemUsingPUT(id, shippingItem);

        // TODO: test validations
    }
    
    /**
     * Update a shipping template
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateShippingTemplateUsingPUTTest() throws ApiException {
        String id = null;
        ItemTemplateResource shippingTemplateResource = null;
        // api.updateShippingTemplateUsingPUT(id, shippingTemplateResource);

        // TODO: test validations
    }
    
}
