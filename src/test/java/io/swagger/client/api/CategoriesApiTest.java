/**
 * Knetik Platform API Documentation latest 
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.CategoryResource;
import io.swagger.client.model.TemplateResource;
import io.swagger.client.model.PageTemplateResource;
import io.swagger.client.model.PageCategoryResource;
import io.swagger.client.model.Pagestring;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CategoriesApi
 */
public class CategoriesApiTest {

    private final CategoriesApi api = new CategoriesApi();

    
    /**
     * Create a new category
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCategoryUsingPOSTTest() throws ApiException {
        CategoryResource category = null;
        // CategoryResource response = api.createCategoryUsingPOST(category);

        // TODO: test validations
    }
    
    /**
     * Create a category template
     *
     * Templates define a type of category and the properties they have
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTemplateUsingPOST2Test() throws ApiException {
        TemplateResource template = null;
        // TemplateResource response = api.createTemplateUsingPOST2(template);

        // TODO: test validations
    }
    
    /**
     * Delete an existing category
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCategoryUsingDELETETest() throws ApiException {
        String id = null;
        // api.deleteCategoryUsingDELETE(id);

        // TODO: test validations
    }
    
    /**
     * Delete a category template
     *
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTemplateUsingDELETE1Test() throws ApiException {
        String id = null;
        String cascade = null;
        // api.deleteTemplateUsingDELETE1(id, cascade);

        // TODO: test validations
    }
    
    /**
     * List and search category templates
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getArticleTemplatesUsingGET1Test() throws ApiException {
        Integer size = null;
        Integer page = null;
        String order = null;
        // PageTemplateResource response = api.getArticleTemplatesUsingGET1(size, page, order);

        // TODO: test validations
    }
    
    /**
     * List and search categories with optional filters
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCategoriesUsingGET1Test() throws ApiException {
        String filterSearch = null;
        Boolean filterActive = null;
        Integer size = null;
        Integer page = null;
        String order = null;
        // PageCategoryResource response = api.getCategoriesUsingGET1(filterSearch, filterActive, size, page, order);

        // TODO: test validations
    }
    
    /**
     * Get a single category
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCategoryUsingGET1Test() throws ApiException {
        String id = null;
        // CategoryResource response = api.getCategoryUsingGET1(id);

        // TODO: test validations
    }
    
    /**
     * List all trivia tags in the system
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTagsUsingGETTest() throws ApiException {
        Integer size = null;
        Integer page = null;
        String order = null;
        // Pagestring response = api.getTagsUsingGET(size, page, order);

        // TODO: test validations
    }
    
    /**
     * Get a single category template
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTemplateUsingGET1Test() throws ApiException {
        String id = null;
        // TemplateResource response = api.getTemplateUsingGET1(id);

        // TODO: test validations
    }
    
    /**
     * Update an existing category
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCategoryUsingPUT1Test() throws ApiException {
        String id = null;
        CategoryResource category = null;
        // api.updateCategoryUsingPUT1(id, category);

        // TODO: test validations
    }
    
    /**
     * Update a category template
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTemplateUsingPUT2Test() throws ApiException {
        String id = null;
        TemplateResource template = null;
        // api.updateTemplateUsingPUT2(id, template);

        // TODO: test validations
    }
    
}
