/*
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.PageResourceStoreItem;
import io.swagger.client.model.PageResourceStoreItemTemplateResource;
import io.swagger.client.model.Result;
import io.swagger.client.model.StoreItem;
import io.swagger.client.model.StoreItemTemplateResource;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StoreApi
 */
@Ignore
public class StoreApiTest {

    private final StoreApi api = new StoreApi();

    
    /**
     * Create an item template
     *
     * Item Templates define a type of item and the properties they have.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createItemTemplateTest() throws ApiException {
        StoreItemTemplateResource itemTemplateResource = null;
        StoreItemTemplateResource response = api.createItemTemplate(itemTemplateResource);

        // TODO: test validations
    }
    
    /**
     * Create a store item
     *
     * SKUs have to be unique in the entire store. If a duplicate SKU is found, a 400 error is generated and the response will have a \&quot;parameters\&quot; field that is a list of duplicates. A duplicate is an object like {item_id, offending_sku_list}. Ex:&lt;br /&gt; {..., parameters: [[{item: 1, skus: [\&quot;SKU-1\&quot;]}]]}&lt;br /&gt; If an item is brand new and has duplicate SKUs within itself, the item ID will be 0.  Item subclasses are not allowed here, you will have to use their respective endpoints.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createStoreItemTest() throws ApiException {
        Boolean cascade = null;
        StoreItem storeItem = null;
        StoreItem response = api.createStoreItem(cascade, storeItem);

        // TODO: test validations
    }
    
    /**
     * Delete an item template
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteItemTemplateTest() throws ApiException {
        String id = null;
        String cascade = null;
        api.deleteItemTemplate(id, cascade);

        // TODO: test validations
    }
    
    /**
     * Delete a store item
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteStoreItemTest() throws ApiException {
        Integer id = null;
        api.deleteStoreItem(id);

        // TODO: test validations
    }
    
    /**
     * Get a single item template
     *
     * Item Templates define a type of item and the properties they have.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemTemplateTest() throws ApiException {
        String id = null;
        StoreItemTemplateResource response = api.getItemTemplate(id);

        // TODO: test validations
    }
    
    /**
     * List and search item templates
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemTemplatesTest() throws ApiException {
        Integer size = null;
        Integer page = null;
        String order = null;
        PageResourceStoreItemTemplateResource response = api.getItemTemplates(size, page, order);

        // TODO: test validations
    }
    
    /**
     * Get a listing of store items
     *
     * The exact structure of each items may differ to include fields specific to the type. The same is true for behaviors.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoreTest() throws ApiException {
        Integer limit = null;
        Integer page = null;
        Boolean useCatalog = null;
        Boolean ignoreLocation = null;
        Boolean inStockOnly = null;
        PageResourceStoreItem response = api.getStore(limit, page, useCatalog, ignoreLocation, inStockOnly);

        // TODO: test validations
    }
    
    /**
     * Get a single store item
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoreItemTest() throws ApiException {
        Integer id = null;
        StoreItem response = api.getStoreItem(id);

        // TODO: test validations
    }
    
    /**
     * List and search store items
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStoreItemsTest() throws ApiException {
        String filterNameSearch = null;
        String filterUniqueKey = null;
        Boolean filterPublished = null;
        Boolean filterDisplayable = null;
        String filterStart = null;
        String filterEnd = null;
        String filterStartDate = null;
        String filterStopDate = null;
        String filterSku = null;
        String filterPrice = null;
        String filterTag = null;
        String filterItemsByType = null;
        String filterBundledSkus = null;
        Integer size = null;
        Integer page = null;
        String order = null;
        PageResourceStoreItem response = api.getStoreItems(filterNameSearch, filterUniqueKey, filterPublished, filterDisplayable, filterStart, filterEnd, filterStartDate, filterStopDate, filterSku, filterPrice, filterTag, filterItemsByType, filterBundledSkus, size, page, order);

        // TODO: test validations
    }
    
    /**
     * Update an item template
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateItemTemplateTest() throws ApiException {
        String id = null;
        StoreItemTemplateResource itemTemplateResource = null;
        StoreItemTemplateResource response = api.updateItemTemplate(id, itemTemplateResource);

        // TODO: test validations
    }
    
    /**
     * Update a store item
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateStoreItemTest() throws ApiException {
        Integer id = null;
        Boolean cascade = null;
        StoreItem storeItem = null;
        StoreItem response = api.updateStoreItem(id, cascade, storeItem);

        // TODO: test validations
    }
    
}
