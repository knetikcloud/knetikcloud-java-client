/**
 * Knetik Platform API Documentation latest 
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.CreateBillingAgreementRequest;
import io.swagger.client.model.CreatePayPalPaymentRequest;
import io.swagger.client.model.FinalizeBillingAgreementRequest;
import io.swagger.client.model.FinalizePayPalPaymentRequest;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PaymentsPayPalClassicApi
 */
public class PaymentsPayPalClassicApiTest {

    private final PaymentsPayPalClassicApi api = new PaymentsPayPalClassicApi();

    
    /**
     * Create a PayPal Classic billing agreement for the user
     *
     * Returns the token that should be used to forward the user to PayPal so they can accept the agreement.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBillingAgreementUrlUsingPOSTTest() throws ApiException {
        CreateBillingAgreementRequest request = null;
        // String response = api.createBillingAgreementUrlUsingPOST(request);

        // TODO: test validations
    }
    
    /**
     * Create a payment token for PayPal express checkout
     *
     * Returns the token that should be used to forward the user to PayPal so they can complete the checkout.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void expressCheckoutUsingPOSTTest() throws ApiException {
        CreatePayPalPaymentRequest request = null;
        // String response = api.expressCheckoutUsingPOST(request);

        // TODO: test validations
    }
    
    /**
     * Finalizes a billing agreement after the user has accepted through PayPal
     *
     * Returns the ID of the new payment method created for the user for the billing agreement.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void finalizeBillingAgreementUsingPOSTTest() throws ApiException {
        FinalizeBillingAgreementRequest request = null;
        // Integer response = api.finalizeBillingAgreementUsingPOST(request);

        // TODO: test validations
    }
    
    /**
     * Finalizes a payment after the user has completed checkout with PayPal
     *
     * The invoice will be marked paid/failed by asynchronous IPN callback.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void finalizeCheckoutUsingPOSTTest() throws ApiException {
        FinalizePayPalPaymentRequest request = null;
        // api.finalizeCheckoutUsingPOST(request);

        // TODO: test validations
    }
    
}
