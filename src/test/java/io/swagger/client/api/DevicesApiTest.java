/**
 * Knetik Platform API Documentation latest 
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.DeviceResource;
import io.swagger.client.model.PageDeviceResource;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DevicesApi
 */
public class DevicesApiTest {

    private final DevicesApi api = new DevicesApi();

    
    /**
     * Create a device
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDeviceUsingPOSTTest() throws ApiException {
        DeviceResource device = null;
        // DeviceResource response = api.createDeviceUsingPOST(device);

        // TODO: test validations
    }
    
    /**
     * Delete a device
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDeviceUsingDELETETest() throws ApiException {
        Integer id = null;
        // api.deleteDeviceUsingDELETE(id);

        // TODO: test validations
    }
    
    /**
     * Get a single device
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDeviceUsingGETTest() throws ApiException {
        Integer id = null;
        // DeviceResource response = api.getDeviceUsingGET(id);

        // TODO: test validations
    }
    
    /**
     * List and search devices
     *
     * Get a list of devices with optional filtering
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDevicesUsingGETTest() throws ApiException {
        String filterMake = null;
        String filterModel = null;
        Integer size = null;
        Integer page = null;
        String order = null;
        // PageDeviceResource response = api.getDevicesUsingGET(filterMake, filterModel, size, page, order);

        // TODO: test validations
    }
    
    /**
     * Update a device
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDeviceUsingPUTTest() throws ApiException {
        DeviceResource device = null;
        Integer id = null;
        // api.updateDeviceUsingPUT(device, id);

        // TODO: test validations
    }
    
}
