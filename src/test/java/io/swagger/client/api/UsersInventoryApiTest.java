/*
 * Knetik Platform API Documentation Latest
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://demo.sandbox.knetikcloud.com
 *
 * OpenAPI spec version: Latest
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.EntitlementItem;
import io.swagger.client.model.InvoiceResource;
import io.swagger.client.model.ItemTemplateResource;
import io.swagger.client.model.PageResourceEntitlementItem;
import io.swagger.client.model.PageResourceItemTemplateResource;
import io.swagger.client.model.PageResourceUserInventoryResource;
import io.swagger.client.model.PageResourceUserItemLogResource;
import io.swagger.client.model.UserInventoryAddRequest;
import io.swagger.client.model.UserInventoryResource;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersInventoryApi
 */
@Ignore
public class UsersInventoryApiTest {

    private final UsersInventoryApi api = new UsersInventoryApi();

    
    /**
     * Adds an item to the user inventory
     *
     * The inventory is fulfilled asynchronously UNLESS the invoice is explicitely skipped. Depending on the use case, it might require the client to verify that the entitlement was added after the fact or configure a BRE rule to get a notification in real time
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addItemUsingPOST1Test() throws ApiException {
        Integer id = null;
        UserInventoryAddRequest userInventoryAddRequest = null;
        InvoiceResource response = api.addItemUsingPOST1(id, userInventoryAddRequest);

        // TODO: test validations
    }
    
    /**
     * Create an entitlement item
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createItemUsingPOSTTest() throws ApiException {
        EntitlementItem entitlementItem = null;
        EntitlementItem response = api.createItemUsingPOST(entitlementItem);

        // TODO: test validations
    }
    
    /**
     * Create an entitlement template
     *
     * Entitlement templates define a type of entitlement and the properties they have
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTemplateUsingPOST3Test() throws ApiException {
        ItemTemplateResource template = null;
        ItemTemplateResource response = api.createTemplateUsingPOST3(template);

        // TODO: test validations
    }
    
    /**
     * Delete an entitlement template
     *
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEntitlementTemplateUsingDELETETest() throws ApiException {
        String id = null;
        String cascade = null;
        api.deleteEntitlementTemplateUsingDELETE(id, cascade);

        // TODO: test validations
    }
    
    /**
     * Delete an entitlement item
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteItemUsingDELETETest() throws ApiException {
        Integer entitlementId = null;
        api.deleteItemUsingDELETE(entitlementId);

        // TODO: test validations
    }
    
    /**
     * Check for access to an item without consuming
     *
     * Useful for pre-check and accounts for all various buisness rules
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entitlementCheckUsingGETTest() throws ApiException {
        String userId = null;
        Integer itemId = null;
        String sku = null;
        api.entitlementCheckUsingGET(userId, itemId, sku);

        // TODO: test validations
    }
    
    /**
     * Use an item
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entitlementUseUsingPOSTTest() throws ApiException {
        String userId = null;
        Integer itemId = null;
        String sku = null;
        String info = null;
        api.entitlementUseUsingPOST(userId, itemId, sku, info);

        // TODO: test validations
    }
    
    /**
     * List and search entitlement items
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCurrenciesUsingGET1Test() throws ApiException {
        Integer size = null;
        Integer page = null;
        String order = null;
        PageResourceEntitlementItem response = api.getCurrenciesUsingGET1(size, page, order);

        // TODO: test validations
    }
    
    /**
     * Get a single entitlement template
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEntitlementTemplateUsingGETTest() throws ApiException {
        String id = null;
        ItemTemplateResource response = api.getEntitlementTemplateUsingGET(id);

        // TODO: test validations
    }
    
    /**
     * List and search entitlement templates
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEntitlementTemplatesUsingGETTest() throws ApiException {
        Integer size = null;
        Integer page = null;
        String order = null;
        PageResourceItemTemplateResource response = api.getEntitlementTemplatesUsingGET(size, page, order);

        // TODO: test validations
    }
    
    /**
     * List the user inventory entries for all users
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInventoryListUsingGETTest() throws ApiException {
        Boolean inactive = null;
        Integer size = null;
        Integer page = null;
        String filterItemName = null;
        String filterUsername = null;
        String filterGroup = null;
        String filterDate = null;
        PageResourceUserInventoryResource response = api.getInventoryListUsingGET(inactive, size, page, filterItemName, filterUsername, filterGroup, filterDate);

        // TODO: test validations
    }
    
    /**
     * Get an inventory entry
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInventoryUsingGETTest() throws ApiException {
        Integer userId = null;
        Integer id = null;
        UserInventoryResource response = api.getInventoryUsingGET(userId, id);

        // TODO: test validations
    }
    
    /**
     * Get a single entitlement item
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getItemUsingGETTest() throws ApiException {
        Integer entitlementId = null;
        EntitlementItem response = api.getItemUsingGET(entitlementId);

        // TODO: test validations
    }
    
    /**
     * List the user inventory entries for a given user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserInventoryListUsingGETTest() throws ApiException {
        Integer id = null;
        Boolean inactive = null;
        Integer size = null;
        Integer page = null;
        String filterItemName = null;
        Long filterMinDate = null;
        Long filterMaxDate = null;
        PageResourceUserInventoryResource response = api.getUserInventoryListUsingGET(id, inactive, size, page, filterItemName, filterMinDate, filterMaxDate);

        // TODO: test validations
    }
    
    /**
     * List the log entries for this inventory entry.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserInventoryLogUsingGETTest() throws ApiException {
        String userId = null;
        Integer id = null;
        Integer size = null;
        Integer page = null;
        PageResourceUserItemLogResource response = api.getUserInventoryLogUsingGET(userId, id, size, page);

        // TODO: test validations
    }
    
    /**
     * Update an entitlement item
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateItemUsingPUT1Test() throws ApiException {
        Integer entitlementId = null;
        EntitlementItem entitlementItem = null;
        api.updateItemUsingPUT1(entitlementId, entitlementItem);

        // TODO: test validations
    }
    
    /**
     * Update an entitlement template
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTemplateUsingPUT3Test() throws ApiException {
        String id = null;
        ItemTemplateResource template = null;
        api.updateTemplateUsingPUT3(id, template);

        // TODO: test validations
    }
    
    /**
     * Set the behavior data for an inventory entry
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserInventoryBehaviorDataUsingPUTTest() throws ApiException {
        Integer userId = null;
        Integer id = null;
        Object data = null;
        api.updateUserInventoryBehaviorDataUsingPUT(userId, id, data);

        // TODO: test validations
    }
    
    /**
     * Set the expiration date
     *
     * Will change the current grace period for a subscription but not the bill date (possibly even ending before having the chance to re-bill)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserInventoryExpiresUsingPUTTest() throws ApiException {
        Integer userId = null;
        Integer id = null;
        Long timestamp = null;
        api.updateUserInventoryExpiresUsingPUT(userId, id, timestamp);

        // TODO: test validations
    }
    
    /**
     * Set the status for an inventory entry
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserInventoryStatusUsingPUTTest() throws ApiException {
        Integer userId = null;
        Integer id = null;
        String inventoryStatus = null;
        api.updateUserInventoryStatusUsingPUT(userId, id, inventoryStatus);

        // TODO: test validations
    }
    
}
