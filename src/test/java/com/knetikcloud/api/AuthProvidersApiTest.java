/*
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.knetikcloud.api;

import com.knetikcloud.client.ApiException;
import com.knetikcloud.model.OAuth2ProviderResource;
import com.knetikcloud.model.PageResourceOAuth2ProviderResource;
import com.knetikcloud.model.Result;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthProvidersApi
 */
@Ignore
public class AuthProvidersApiTest {

    private final AuthProvidersApi api = new AuthProvidersApi();

    
    /**
     * Create a new OAuth 2 provider
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; POST
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProviderTest() throws ApiException {
        OAuth2ProviderResource providerResource = null;
        OAuth2ProviderResource response = api.createProvider(providerResource);

        // TODO: test validations
    }
    
    /**
     * Delete an existing OAuth 2 provider
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; DELETE
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProviderTest() throws ApiException {
        String providerId = null;
        api.deleteProvider(providerId);

        // TODO: test validations
    }
    
    /**
     * Get an existing OAuth 2 provider
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; GET
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProviderTest() throws ApiException {
        String providerId = null;
        OAuth2ProviderResource response = api.getProvider(providerId);

        // TODO: test validations
    }
    
    /**
     * List OAuth 2 providers
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; LIST
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProvidersTest() throws ApiException {
        PageResourceOAuth2ProviderResource response = api.getProviders();

        // TODO: test validations
    }
    
    /**
     * Update an existing OAuth 2 provider
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; PUT
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProviderTest() throws ApiException {
        String providerId = null;
        OAuth2ProviderResource providerResource = null;
        api.updateProvider(providerId, providerResource);

        // TODO: test validations
    }
    
}
