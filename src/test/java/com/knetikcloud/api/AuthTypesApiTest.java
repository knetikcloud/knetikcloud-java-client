/*
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.knetikcloud.api;

import com.knetikcloud.client.ApiException;
import com.knetikcloud.model.AccessResourceCreateRequest;
import com.knetikcloud.model.AccessTypeResource;
import com.knetikcloud.model.PageResourceAccessTypeResource;
import com.knetikcloud.model.Result;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthTypesApi
 */
@Ignore
public class AuthTypesApiTest {

    private final AuthTypesApi api = new AuthTypesApi();

    
    /**
     * Get allowed action
     *
     * Checks for which actions can be taken against a given resource by the caller. &lt;b&gt;Types Needed:&lt;/b&gt; any
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void allowedResourceActionsTest() throws ApiException {
        String type = null;
        String id = null;
        List<String> response = api.allowedResourceActions(type, id);

        // TODO: test validations
    }
    
    /**
     * Get allowed actions on a type
     *
     * Checks for which actions can be taken against a given type by the caller. &lt;b&gt;Types Needed:&lt;/b&gt; any
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void allowedTypeActionsTest() throws ApiException {
        String type = null;
        List<String> response = api.allowedTypeActions(type);

        // TODO: test validations
    }
    
    /**
     * Create or update resource
     *
     * Creates the access control for a resource if it does not exist, and updates parent information if it does not.&lt;b&gt;Resources Needed:&lt;/b&gt; ROLE_SUPER_ADMIN
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createResourceTest() throws ApiException {
        String type = null;
        AccessResourceCreateRequest accessResource = null;
        AccessTypeResource response = api.createResource(type, accessResource);

        // TODO: test validations
    }
    
    /**
     * Create a new type
     *
     * &lt;b&gt;Types Needed:&lt;/b&gt; ROLE_SUPER_ADMIN
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTypeTest() throws ApiException {
        AccessTypeResource typeResource = null;
        AccessTypeResource response = api.createType(typeResource);

        // TODO: test validations
    }
    
    /**
     * Delete a resource
     *
     * Deletes a non-root level type&lt;br /&gt;&lt;b&gt;Types Needed:&lt;/b&gt; ROLE_SUPER_ADMIN
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteResourceTest() throws ApiException {
        String type = null;
        String id = null;
        api.deleteResource(type, id);

        // TODO: test validations
    }
    
    /**
     * Delete all resources of a type
     *
     * &lt;b&gt;Types Needed:&lt;/b&gt; ROLE_SUPER_ADMIN
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteResourcesTest() throws ApiException {
        String type = null;
        api.deleteResources(type);

        // TODO: test validations
    }
    
    /**
     * Delete a root type
     *
     * Deletes a root level type with no id&lt;br /&gt;&lt;b&gt;Types Needed:&lt;/b&gt; ROLE_SUPER_ADMIN
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTypeTest() throws ApiException {
        String type = null;
        api.deleteType(type);

        // TODO: test validations
    }
    
    /**
     * Get a single resource
     *
     * &lt;b&gt;Types Needed:&lt;/b&gt; VIEW_ACCESS
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getResourceTest() throws ApiException {
        String type = null;
        String id = null;
        AccessTypeResource response = api.getResource(type, id);

        // TODO: test validations
    }
    
    /**
     * List and search resources
     *
     * &lt;b&gt;Types Needed:&lt;/b&gt; ROLE_SUPER_ADMIN
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getResourcesTest() throws ApiException {
        String type = null;
        String filterType = null;
        Integer size = null;
        Integer page = null;
        String order = null;
        PageResourceAccessTypeResource response = api.getResources(type, filterType, size, page, order);

        // TODO: test validations
    }
    
    /**
     * Get a single root type
     *
     * &lt;b&gt;Types Needed:&lt;/b&gt; VIEW_ACCESS
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTypeTest() throws ApiException {
        String type = null;
        AccessTypeResource response = api.getType(type);

        // TODO: test validations
    }
    
    /**
     * List and search types
     *
     * &lt;b&gt;Types Needed:&lt;/b&gt; ROLE_SUPER_ADMIN
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTypesTest() throws ApiException {
        Integer size = null;
        Integer page = null;
        String order = null;
        PageResourceAccessTypeResource response = api.getTypes(size, page, order);

        // TODO: test validations
    }
    
    /**
     * Update a resource
     *
     * &lt;b&gt;Types Needed:&lt;/b&gt; ACCESS_CONTROL
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateResourceTest() throws ApiException {
        String type = null;
        String id = null;
        AccessTypeResource typeResource = null;
        AccessTypeResource response = api.updateResource(type, id, typeResource);

        // TODO: test validations
    }
    
    /**
     * Update a root type
     *
     * &lt;b&gt;Types Needed:&lt;/b&gt; ACCESS_CONTROL
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTypeTest() throws ApiException {
        String type = null;
        AccessTypeResource typeResource = null;
        AccessTypeResource response = api.updateType(type, typeResource);

        // TODO: test validations
    }
    
}
