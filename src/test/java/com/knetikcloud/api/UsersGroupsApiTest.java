/*
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.knetikcloud.api;

import com.knetikcloud.client.ApiException;
import com.knetikcloud.model.ChatMessageRequest;
import com.knetikcloud.model.ChatMessageResource;
import com.knetikcloud.model.GroupMemberResource;
import com.knetikcloud.model.GroupResource;
import com.knetikcloud.model.PageResourceChatMessageResource;
import com.knetikcloud.model.PageResourceGroupMemberResource;
import com.knetikcloud.model.PageResourceGroupResource;
import com.knetikcloud.model.PageResourceTemplateResource;
import com.knetikcloud.model.PageResourcestring;
import com.knetikcloud.model.PatchResource;
import com.knetikcloud.model.Result;
import com.knetikcloud.model.StringWrapper;
import com.knetikcloud.model.TemplateResource;
import com.knetikcloud.model.ValueWrapperboolean;
import com.knetikcloud.model.VerificationRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersGroupsApi
 */
@Ignore
public class UsersGroupsApiTest {

    private final UsersGroupsApi api = new UsersGroupsApi();

    
    /**
     * Adds a new member to the group
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; POST or JOIN if self&lt;br /&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; NONE
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addMemberToGroupTest() throws ApiException {
        String uniqueName = null;
        GroupMemberResource user = null;
        GroupMemberResource response = api.addMemberToGroup(uniqueName, user);

        // TODO: test validations
    }
    
    /**
     * Adds multiple members to the group
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; POST&lt;br /&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; POST
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addMembersToGroupTest() throws ApiException {
        String uniqueName = null;
        List<GroupMemberResource> users = null;
        List<GroupMemberResource> response = api.addMembersToGroup(uniqueName, users);

        // TODO: test validations
    }
    
    /**
     * Create a group
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; POST&lt;br /&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; POST
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGroupTest() throws ApiException {
        GroupResource groupResource = null;
        GroupResource response = api.createGroup(groupResource);

        // TODO: test validations
    }
    
    /**
     * Create a group member template
     *
     * GroupMember Templates define a type of group member and the properties they have.&lt;br /&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; POST
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGroupMemberTemplateTest() throws ApiException {
        TemplateResource groupMemberTemplateResource = null;
        TemplateResource response = api.createGroupMemberTemplate(groupMemberTemplateResource);

        // TODO: test validations
    }
    
    /**
     * Create a group template
     *
     * Group Templates define a type of group and the properties they have.&lt;br /&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; POST
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGroupTemplateTest() throws ApiException {
        TemplateResource groupTemplateResource = null;
        TemplateResource response = api.createGroupTemplate(groupTemplateResource);

        // TODO: test validations
    }
    
    /**
     * Removes a group from the system
     *
     * All groups listing this as the parent are also removed and users are in turn removed from this and those groups. This may result in users no longer being in this group&#39;s parent if they were not added to it directly as well. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; DELETE&lt;br /&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; DELETE
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteGroupTest() throws ApiException {
        String uniqueName = null;
        api.deleteGroup(uniqueName);

        // TODO: test validations
    }
    
    /**
     * Delete a group member template
     *
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects.&lt;br /&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; DELETE
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteGroupMemberTemplateTest() throws ApiException {
        String id = null;
        String cascade = null;
        api.deleteGroupMemberTemplate(id, cascade);

        // TODO: test validations
    }
    
    /**
     * Delete a group template
     *
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects.&lt;br /&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; DELETE
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteGroupTemplateTest() throws ApiException {
        String id = null;
        String cascade = null;
        api.deleteGroupTemplate(id, cascade);

        // TODO: test validations
    }
    
    /**
     * Enable or disable notification of group messages
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; TOPICS_ADMIN or self
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void disableGroupNotificationTest() throws ApiException {
        String uniqueName = null;
        String userId = null;
        ValueWrapperboolean disabled = null;
        api.disableGroupNotification(uniqueName, userId, disabled);

        // TODO: test validations
    }
    
    /**
     * Loads a specific group&#39;s details
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; GET&lt;br /&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; GET
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupTest() throws ApiException {
        String uniqueName = null;
        GroupResource response = api.getGroup(uniqueName);

        // TODO: test validations
    }
    
    /**
     * Get group ancestors
     *
     * Returns a list of ancestor groups in reverse order (parent, then grandparent, etc). &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; ANY&lt;br /&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; LIST
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupAncestorsTest() throws ApiException {
        String uniqueName = null;
        Integer size = null;
        Integer page = null;
        PageResourceGroupResource response = api.getGroupAncestors(uniqueName, size, page);

        // TODO: test validations
    }
    
    /**
     * Get a user from a group
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; GET&lt;br /&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; GET
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupMemberTest() throws ApiException {
        String uniqueName = null;
        Integer userId = null;
        GroupMemberResource response = api.getGroupMember(uniqueName, userId);

        // TODO: test validations
    }
    
    /**
     * Get a single group member template
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; GET
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupMemberTemplateTest() throws ApiException {
        String id = null;
        TemplateResource response = api.getGroupMemberTemplate(id);

        // TODO: test validations
    }
    
    /**
     * List and search group member templates
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; LIST
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupMemberTemplatesTest() throws ApiException {
        Integer size = null;
        Integer page = null;
        String order = null;
        PageResourceTemplateResource response = api.getGroupMemberTemplates(size, page, order);

        // TODO: test validations
    }
    
    /**
     * Lists members of the group
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; LIST&lt;br /&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; LIST
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupMembersTest() throws ApiException {
        String uniqueName = null;
        Integer size = null;
        Integer page = null;
        String order = null;
        PageResourceGroupMemberResource response = api.getGroupMembers(uniqueName, size, page, order);

        // TODO: test validations
    }
    
    /**
     * Get a list of group messages
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupMessagesTest() throws ApiException {
        String uniqueName = null;
        Integer size = null;
        Integer page = null;
        String order = null;
        PageResourceChatMessageResource response = api.getGroupMessages(uniqueName, size, page, order);

        // TODO: test validations
    }
    
    /**
     * Get a single group template
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; GET
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupTemplateTest() throws ApiException {
        String id = null;
        TemplateResource response = api.getGroupTemplate(id);

        // TODO: test validations
    }
    
    /**
     * List and search group templates
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; LIST
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupTemplatesTest() throws ApiException {
        Integer size = null;
        Integer page = null;
        String order = null;
        PageResourceTemplateResource response = api.getGroupTemplates(size, page, order);

        // TODO: test validations
    }
    
    /**
     * List groups a user is in
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; LIST_GROUPS&lt;br /&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; LIST_GROUPS
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupsForUserTest() throws ApiException {
        Integer userId = null;
        Integer size = null;
        Integer page = null;
        Boolean filterChildren = null;
        PageResourcestring response = api.getGroupsForUser(userId, size, page, filterChildren);

        // TODO: test validations
    }
    
    /**
     * Invite to group
     *
     * This will create a verification for joining the group which uses the &#39;group_invite&#39; template and sets the additional_property &#39;group&#39; with the unique name&lt;br /&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; INVITE
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void inviteToGroupTest() throws ApiException {
        String uniqueName = null;
        VerificationRequest request = null;
        VerificationRequest response = api.inviteToGroup(uniqueName, request);

        // TODO: test validations
    }
    
    /**
     * List and search groups
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; LIST&lt;br /&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; LIST
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listGroupsTest() throws ApiException {
        String filterTemplate = null;
        String filterMemberCount = null;
        String filterName = null;
        String filterUniqueName = null;
        String filterParent = null;
        String filterStatus = null;
        Integer size = null;
        Integer page = null;
        String order = null;
        PageResourceGroupResource response = api.listGroups(filterTemplate, filterMemberCount, filterName, filterUniqueName, filterParent, filterStatus, size, page, order);

        // TODO: test validations
    }
    
    /**
     * Send a group message
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postGroupMessageTest() throws ApiException {
        String uniqueName = null;
        ChatMessageRequest chatMessageRequest = null;
        ChatMessageResource response = api.postGroupMessage(uniqueName, chatMessageRequest);

        // TODO: test validations
    }
    
    /**
     * Removes a user from a group
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; DELETE&lt;br /&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; DELETE
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeGroupMemberTest() throws ApiException {
        String uniqueName = null;
        Integer userId = null;
        api.removeGroupMember(uniqueName, userId);

        // TODO: test validations
    }
    
    /**
     * Update a group
     *
     * If adding/removing/changing parent, user membership in group/new parent groups may be modified. The parent being removed will remove members from this sub group unless they were added explicitly to the parent and the new parent will gain members unless they were already a part of it. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; PUT&lt;br /&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; PUT
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateGroupTest() throws ApiException {
        String uniqueName = null;
        GroupResource groupResource = null;
        api.updateGroup(uniqueName, groupResource);

        // TODO: test validations
    }
    
    /**
     * Change a user&#39;s order
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; PUT&lt;br /&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; PUT
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateGroupMemberOrderTest() throws ApiException {
        String uniqueName = null;
        Integer userId = null;
        StringWrapper order = null;
        api.updateGroupMemberOrder(uniqueName, userId, order);

        // TODO: test validations
    }
    
    /**
     * Change a user&#39;s membership properties
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; PUT&lt;br /&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; PUT
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateGroupMemberPropertiesTest() throws ApiException {
        String uniqueName = null;
        Integer userId = null;
        Object properties = null;
        api.updateGroupMemberProperties(uniqueName, userId, properties);

        // TODO: test validations
    }
    
    /**
     * Change a user&#39;s status
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; PUT&lt;br /&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; PUT
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateGroupMemberStatusTest() throws ApiException {
        String uniqueName = null;
        Integer userId = null;
        StringWrapper status = null;
        api.updateGroupMemberStatus(uniqueName, userId, status);

        // TODO: test validations
    }
    
    /**
     * Update a group member template
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; PUT
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateGroupMemberTemplateTest() throws ApiException {
        String id = null;
        PatchResource templatePatchResource = null;
        Boolean testValidation = null;
        TemplateResource response = api.updateGroupMemberTemplate(id, templatePatchResource, testValidation);

        // TODO: test validations
    }
    
    /**
     * Update a group template
     *
     * &lt;b&gt;Permissions Needed:&lt;/b&gt; PUT
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateGroupTemplateTest() throws ApiException {
        String id = null;
        PatchResource templatePatchResource = null;
        Boolean testValidation = null;
        TemplateResource response = api.updateGroupTemplate(id, templatePatchResource, testValidation);

        // TODO: test validations
    }
    
}
