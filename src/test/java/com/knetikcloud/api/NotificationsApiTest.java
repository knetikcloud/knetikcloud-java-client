/*
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.knetikcloud.api;

import com.knetikcloud.client.ApiException;
import com.knetikcloud.model.NotificationResource;
import com.knetikcloud.model.NotificationTypeResource;
import com.knetikcloud.model.NotificationUserTypeResource;
import com.knetikcloud.model.PageResourceNotificationTypeResource;
import com.knetikcloud.model.PageResourceNotificationUserTypeResource;
import com.knetikcloud.model.PageResourceUserNotificationResource;
import com.knetikcloud.model.Result;
import com.knetikcloud.model.ValueWrapperboolean;
import com.knetikcloud.model.ValueWrapperstring;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NotificationsApi
 */
@Ignore
public class NotificationsApiTest {

    private final NotificationsApi api = new NotificationsApi();

    
    /**
     * Create a notification type
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNotificationTypeTest() throws ApiException {
        NotificationTypeResource notificationType = null;
        NotificationTypeResource response = api.createNotificationType(notificationType);

        // TODO: test validations
    }
    
    /**
     * Delete a notification type
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotificationTypeTest() throws ApiException {
        String id = null;
        api.deleteNotificationType(id);

        // TODO: test validations
    }
    
    /**
     * Get a single notification type
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotificationTypeTest() throws ApiException {
        String id = null;
        NotificationTypeResource response = api.getNotificationType(id);

        // TODO: test validations
    }
    
    /**
     * List and search notification types
     *
     * Get a list of notification type with optional filtering
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotificationTypesTest() throws ApiException {
        Integer size = null;
        Integer page = null;
        String order = null;
        PageResourceNotificationTypeResource response = api.getNotificationTypes(size, page, order);

        // TODO: test validations
    }
    
    /**
     * View a user&#39;s notification settings for a type
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserNotificationInfoTest() throws ApiException {
        String typeId = null;
        String userId = null;
        NotificationUserTypeResource response = api.getUserNotificationInfo(typeId, userId);

        // TODO: test validations
    }
    
    /**
     * View a user&#39;s notification settings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserNotificationInfoListTest() throws ApiException {
        String userId = null;
        Integer size = null;
        Integer page = null;
        String order = null;
        PageResourceNotificationUserTypeResource response = api.getUserNotificationInfoList(userId, size, page, order);

        // TODO: test validations
    }
    
    /**
     * Get notifications
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserNotificationsTest() throws ApiException {
        String id = null;
        String filterStatus = null;
        Integer size = null;
        Integer page = null;
        String order = null;
        PageResourceUserNotificationResource response = api.getUserNotifications(id, filterStatus, size, page, order);

        // TODO: test validations
    }
    
    /**
     * Send a notification
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendNotificationTest() throws ApiException {
        NotificationResource notification = null;
        NotificationResource response = api.sendNotification(notification);

        // TODO: test validations
    }
    
    /**
     * Set notification status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setUserNotificationStatusTest() throws ApiException {
        String userId = null;
        String notificationId = null;
        ValueWrapperstring notification = null;
        api.setUserNotificationStatus(userId, notificationId, notification);

        // TODO: test validations
    }
    
    /**
     * Enable or disable direct notifications for a user
     *
     * Allows enabling or disabling messages for a given notification type when sent direct to the user. Notifications can still be retrieved by endpoint. For notifications broadcased to a topic, see the topic service to disable messages for the user there.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void silenceDirectNotificationsTest() throws ApiException {
        String typeId = null;
        String userId = null;
        ValueWrapperboolean silenced = null;
        api.silenceDirectNotifications(typeId, userId, silenced);

        // TODO: test validations
    }
    
    /**
     * Update a notificationType
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotificationTypeTest() throws ApiException {
        String id = null;
        NotificationTypeResource notificationType = null;
        NotificationTypeResource response = api.updateNotificationType(id, notificationType);

        // TODO: test validations
    }
    
}
